[
    {
        "url": "https://docs.gitlab.com/ee/api/group_level_variables.html",
        "urlPart": "group_level_variables.html",
        "allEntries": [
            {
                "title": "group-level-variables--api",
                "description": "Get list of a group’s variables.",
                "api": [
                    "GET /groups/:id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a group or URL-encoded path of the group owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-group-variables",
                "description": "Get list of a group’s variables.",
                "api": [
                    "GET /groups/:id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a group or URL-encoded path of the group owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "show-variable-details",
                "description": "Get the details of a group’s specific variable.",
                "api": [
                    "GET /groups/:id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a group or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    }
                ]
            },
            {
                "title": "create-variable",
                "description": "Create a new variable.",
                "api": [
                    "POST /groups/:id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a group or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of a variable"
                    },
                    {
                        "attribute": "protected",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether the variable is protected"
                    }
                ]
            },
            {
                "title": "update-variable",
                "description": "Update a group’s variable.",
                "api": [
                    "PUT /groups/:id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a group or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of a variable"
                    },
                    {
                        "attribute": "protected",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether the variable is protected"
                    }
                ]
            },
            {
                "title": "remove-variable",
                "description": "Remove a group’s variable.",
                "api": [
                    "DELETE /groups/:id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a group or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/custom_attributes.html",
        "urlPart": "custom_attributes.html",
        "allEntries": [
            {
                "title": "custom-attributes-api",
                "description": "Every API call to custom attributes must be authenticated as administrator.",
                "api": [
                    "GET /users/:id/custom_attributes",
                    "GET /groups/:id/custom_attributes",
                    "GET /projects/:id/custom_attributes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a resource"
                    }
                ]
            },
            {
                "title": "list-custom-attributes",
                "description": "Get all custom attributes on a resource.",
                "api": [
                    "GET /users/:id/custom_attributes",
                    "GET /groups/:id/custom_attributes",
                    "GET /projects/:id/custom_attributes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a resource"
                    }
                ]
            },
            {
                "title": "single-custom-attribute",
                "description": "Get a single custom attribute on a resource.",
                "api": [
                    "GET /users/:id/custom_attributes/:key",
                    "GET /groups/:id/custom_attributes/:key",
                    "GET /projects/:id/custom_attributes/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a resource"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the custom attribute"
                    }
                ]
            },
            {
                "title": "set-custom-attribute",
                "description": "Set a custom attribute on a resource. The attribute will be updated if it already exists,\nor newly created otherwise.",
                "api": [
                    "PUT /users/:id/custom_attributes/:key",
                    "PUT /groups/:id/custom_attributes/:key",
                    "PUT /projects/:id/custom_attributes/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a resource"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the custom attribute"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of the custom attribute"
                    }
                ]
            },
            {
                "title": "delete-custom-attribute",
                "description": "Delete a custom attribute on a resource.",
                "api": [
                    "DELETE /users/:id/custom_attributes/:key",
                    "DELETE /groups/:id/custom_attributes/:key",
                    "DELETE /projects/:id/custom_attributes/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a resource"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the custom attribute"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/epic_issues.html",
        "urlPart": "epic_issues.html",
        "allEntries": [
            {
                "title": "epic-issues-api-ultimate",
                "description": "Every API call to epic_issues must be authenticated.",
                "api": [
                    "GET /groups/:id/epics/:epic_iid/issues"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic."
                    }
                ]
            },
            {
                "title": "list-issues-for-an-epic",
                "description": "Gets all issues that are assigned to an epic and the authenticated user has  access to.",
                "api": [
                    "GET /groups/:id/epics/:epic_iid/issues"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic."
                    }
                ]
            },
            {
                "title": "assign-an-issue-to-the-epic",
                "description": "Creates an epic - issue association. If the issue in question belongs to another epic it is unassigned from that epic.",
                "api": [
                    "POST /groups/:id/epics/:epic_iid/issues/:issue_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic."
                    },
                    {
                        "attribute": "issue_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID  of the issue."
                    }
                ]
            },
            {
                "title": "remove-an-issue-from-the-epic",
                "description": "Removes an epic - issue association.",
                "api": [
                    "DELETE /groups/:id/epics/:epic_iid/issues/:epic_issue_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic."
                    },
                    {
                        "attribute": "epic_issue_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID  of the issue - epic association."
                    }
                ]
            },
            {
                "title": "update-epic---issue-association",
                "description": "Updates an epic - issue association.",
                "api": [
                    "PUT /groups/:id/epics/:epic_iid/issues/:epic_issue_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic."
                    },
                    {
                        "attribute": "epic_issue_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of the issue - epic association."
                    },
                    {
                        "attribute": "move_before_id",
                        "type": "integer/string",
                        "required": "no",
                        "description": "The ID of the issue - epic association that should be placed before the link in the question."
                    },
                    {
                        "attribute": "move_after_id",
                        "type": "integer/string",
                        "required": "no",
                        "description": "The ID of the issue - epic association that should be placed after the link in the question."
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/project_level_variables.html",
        "urlPart": "project_level_variables.html",
        "allEntries": [
            {
                "title": "project-level-variables--api",
                "description": "Get list of a project’s variables.",
                "api": [
                    "GET /projects/:id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a project or urlencoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-project-variables",
                "description": "Get list of a project’s variables.",
                "api": [
                    "GET /projects/:id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a project or urlencoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "show-variable-details",
                "description": "Get the details of a project’s specific variable.",
                "api": [
                    "GET /projects/:id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a project or urlencoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    }
                ]
            },
            {
                "title": "create-variable",
                "description": "Create a new variable.",
                "api": [
                    "POST /projects/:id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a project or urlencoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of a variable"
                    },
                    {
                        "attribute": "protected",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether the variable is protected"
                    },
                    {
                        "attribute": "environment_scope",
                        "type": "string",
                        "required": "no",
                        "description": "The environment_scope of the variable"
                    }
                ]
            },
            {
                "title": "update-variable",
                "description": "Update a project’s variable.",
                "api": [
                    "PUT /projects/:id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a project or urlencoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of a variable"
                    },
                    {
                        "attribute": "protected",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether the variable is protected"
                    },
                    {
                        "attribute": "environment_scope",
                        "type": "string",
                        "required": "no",
                        "description": "The environment_scope of the variable"
                    }
                ]
            },
            {
                "title": "remove-variable",
                "description": "Remove a project’s variable.",
                "api": [
                    "DELETE /projects/:id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of a project or urlencoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/commits.html",
        "urlPart": "commits.html",
        "allEntries": [
            {
                "title": "commits-api",
                "description": "Get a list of repository commits in a project.",
                "api": [
                    "GET /projects/:id/repository/commits"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "ref_name",
                        "type": "string",
                        "required": "no",
                        "description": "The name of a repository branch or tag or if not given the default branch"
                    },
                    {
                        "attribute": "since",
                        "type": "string",
                        "required": "no",
                        "description": "Only commits after or on this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ"
                    },
                    {
                        "attribute": "until",
                        "type": "string",
                        "required": "no",
                        "description": "Only commits before or on this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ"
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "no",
                        "description": "The file path"
                    },
                    {
                        "attribute": "all",
                        "type": "boolean",
                        "required": "no",
                        "description": "Retrieve every commit from the repository"
                    },
                    {
                        "attribute": "with_stats",
                        "type": "boolean",
                        "required": "no",
                        "description": "Stats about each commit will be added to the response"
                    }
                ]
            },
            {
                "title": "list-repository-commits",
                "description": "Get a list of repository commits in a project.",
                "api": [
                    "GET /projects/:id/repository/commits"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "ref_name",
                        "type": "string",
                        "required": "no",
                        "description": "The name of a repository branch or tag or if not given the default branch"
                    },
                    {
                        "attribute": "since",
                        "type": "string",
                        "required": "no",
                        "description": "Only commits after or on this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ"
                    },
                    {
                        "attribute": "until",
                        "type": "string",
                        "required": "no",
                        "description": "Only commits before or on this date will be returned in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ"
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "no",
                        "description": "The file path"
                    },
                    {
                        "attribute": "all",
                        "type": "boolean",
                        "required": "no",
                        "description": "Retrieve every commit from the repository"
                    },
                    {
                        "attribute": "with_stats",
                        "type": "boolean",
                        "required": "no",
                        "description": "Stats about each commit will be added to the response"
                    }
                ]
            },
            {
                "title": "create-a-commit-with-multiple-files-and-actions",
                "description": "Create a commit by posting a JSON payload",
                "api": [
                    "POST /projects/:id/repository/commits"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "Name of the branch to commit into. To create a new branch, also provide start_branch."
                    },
                    {
                        "attribute": "commit_message",
                        "type": "string",
                        "required": "yes",
                        "description": "Commit message"
                    },
                    {
                        "attribute": "start_branch",
                        "type": "string",
                        "required": "no",
                        "description": "Name of the branch to start the new commit from"
                    },
                    {
                        "attribute": "actions[]",
                        "type": "array",
                        "required": "yes",
                        "description": "An array of action hashes to commit as a batch. See the next table for what attributes it can take."
                    },
                    {
                        "attribute": "author_email",
                        "type": "string",
                        "required": "no",
                        "description": "Specify the commit author’s email address"
                    },
                    {
                        "attribute": "author_name",
                        "type": "string",
                        "required": "no",
                        "description": "Specify the commit author’s name"
                    },
                    {
                        "attribute": "stats",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include commit stats. Default is true"
                    }
                ]
            },
            {
                "title": "get-a-single-commit",
                "description": "Get a specific commit identified by the commit hash or name of a branch or tag.",
                "api": [
                    "GET /projects/:id/repository/commits/:sha"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit hash or name of a repository branch or tag"
                    },
                    {
                        "attribute": "stats",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include commit stats. Default is true"
                    }
                ]
            },
            {
                "title": "get-references-a-commit-is-pushed-to",
                "description": "Get all references (from branches or tags) a commit is pushed to.\nThe pagination parameters page and per_page can be used to restrict the list of references.",
                "api": [
                    "GET /projects/:id/repository/commits/:sha/refs"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit hash"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "The scope of commits. Possible values branch, tag, all. Default is all."
                    }
                ]
            },
            {
                "title": "cherry-pick-a-commit",
                "description": "Cherry picks a commit to a given branch.",
                "api": [
                    "POST /projects/:id/repository/commits/:sha/cherry_pick"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit hash"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch"
                    }
                ]
            },
            {
                "title": "revert-a-commit",
                "description": "Reverts a commit in a given branch.",
                "api": [
                    "POST /projects/:id/repository/commits/:sha/revert"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "Commit SHA to revert"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "Target branch name"
                    }
                ]
            },
            {
                "title": "get-the-diff-of-a-commit",
                "description": "Get the diff of a commit in a project.",
                "api": [
                    "GET /projects/:id/repository/commits/:sha/diff"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit hash or name of a repository branch or tag"
                    }
                ]
            },
            {
                "title": "get-the-comments-of-a-commit",
                "description": "Get the comments of a commit in a project.",
                "api": [
                    "GET /projects/:id/repository/commits/:sha/comments"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit hash or name of a repository branch or tag"
                    }
                ]
            },
            {
                "title": "post-comment-to-commit",
                "description": "Adds a comment to a commit.",
                "api": [
                    "POST /projects/:id/repository/commits/:sha/comments"
                ],
                "params": [
                    {
                        "attribute": "shalinepath",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "commit-status",
                "description": "Since GitLab 8.1, this is the new commit status API.",
                "api": [
                    "GET /projects/:id/repository/commits/:sha/statuses"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit SHA"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "no",
                        "description": "The name of a repository branch or tag or, if not given, the default branch"
                    },
                    {
                        "attribute": "stage",
                        "type": "string",
                        "required": "no",
                        "description": "Filter by build stage, e.g., test\n"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "Filter by job name, e.g., bundler:audit\n"
                    },
                    {
                        "attribute": "all",
                        "type": "boolean",
                        "required": "no",
                        "description": "Return all statuses, not only the latest ones"
                    }
                ]
            },
            {
                "title": "list-the-statuses-of-a-commit",
                "description": "List the statuses of a commit in a project.\nThe pagination parameters page and per_page can be used to restrict the list of references.",
                "api": [
                    "GET /projects/:id/repository/commits/:sha/statuses"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit SHA"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "no",
                        "description": "The name of a repository branch or tag or, if not given, the default branch"
                    },
                    {
                        "attribute": "stage",
                        "type": "string",
                        "required": "no",
                        "description": "Filter by build stage, e.g., test\n"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "Filter by job name, e.g., bundler:audit\n"
                    },
                    {
                        "attribute": "all",
                        "type": "boolean",
                        "required": "no",
                        "description": "Return all statuses, not only the latest ones"
                    }
                ]
            },
            {
                "title": "post-the-build-status-to-a-commit",
                "description": "Adds or updates a build status of a commit.",
                "api": [
                    "POST /projects/:id/statuses/:sha"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit SHA"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "yes",
                        "description": "The state of the status. Can be one of the following: pending, running, success, failed, canceled\n"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "no",
                        "description": "The ref (branch or tag) to which the status refers"
                    },
                    {
                        "attribute": "\nname or context\n",
                        "type": "string",
                        "required": "no",
                        "description": "The label to differentiate this status from the status of other systems. Default value is default\n"
                    },
                    {
                        "attribute": "target_url",
                        "type": "string",
                        "required": "no",
                        "description": "The target URL to associate with this status"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The short description of the status"
                    },
                    {
                        "attribute": "coverage",
                        "type": "float",
                        "required": "no",
                        "description": "The total code coverage"
                    }
                ]
            },
            {
                "title": "list-merge-requests-associated-with-a-commit",
                "description": "Get a list of Merge Requests related to the specified commit.",
                "api": [
                    "GET /projects/:id/repository/commits/:sha/merge_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "yes",
                        "description": "The commit SHA"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/epics.html",
        "urlPart": "epics.html",
        "allEntries": [
            {
                "title": "epics-api-ultimate",
                "description": "Every API call to epic must be authenticated.",
                "api": [
                    "GET /groups/:id/epics",
                    "GET /groups/:id/epics?author_id=5",
                    "GET /groups/:id/epics?labels=bug,reproduced",
                    "GET /groups/:id/epics?state=opened"
                ],
                "params": []
            },
            {
                "title": "epic-issues-api",
                "description": "The epic issues API allows you to interact with issues associated with an epic.",
                "api": [
                    "GET /groups/:id/epics",
                    "GET /groups/:id/epics?author_id=5",
                    "GET /groups/:id/epics?labels=bug,reproduced",
                    "GET /groups/:id/epics?state=opened"
                ],
                "params": []
            },
            {
                "title": "milestone-dates-integration",
                "description": "Since start date and due date can be dynamically sourced from related issue milestones, when user has edit permission, additional fields will be shown. These include two boolean fields start_date_is_fixed and due_date_is_fixed, and four date fields start_date_fixed, start_date_from_milestones, due_date_fixed and due_date_from_milestones.",
                "api": [
                    "GET /groups/:id/epics",
                    "GET /groups/:id/epics?author_id=5",
                    "GET /groups/:id/epics?labels=bug,reproduced",
                    "GET /groups/:id/epics?state=opened"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return epics created by the given user id\n"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Return epics matching a comma separated list of labels names. Label names from the epic group or a parent group can be used"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return epics ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return epics sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search epics against their title and description\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Search epics against their state, possible filters: opened, closed and all, default: all\n"
                    }
                ]
            },
            {
                "title": "list-epics-for-a-group",
                "description": "Gets all epics of the requested group and its subgroups.",
                "api": [
                    "GET /groups/:id/epics",
                    "GET /groups/:id/epics?author_id=5",
                    "GET /groups/:id/epics?labels=bug,reproduced",
                    "GET /groups/:id/epics?state=opened"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return epics created by the given user id\n"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Return epics matching a comma separated list of labels names. Label names from the epic group or a parent group can be used"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return epics ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return epics sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search epics against their title and description\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Search epics against their state, possible filters: opened, closed and all, default: all\n"
                    }
                ]
            },
            {
                "title": "single-epic",
                "description": "Gets a single epic",
                "api": [
                    "GET /groups/:id/epics/:epic_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic."
                    }
                ]
            },
            {
                "title": "new-epic",
                "description": "Creates a new epic.",
                "api": [],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "yes",
                        "description": "The title of the epic"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "The comma separated list of labels"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of the epic"
                    },
                    {
                        "attribute": "start_date_is_fixed",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether start date should be sourced from start_date_fixed or from milestones (since 11.3)"
                    },
                    {
                        "attribute": "start_date_fixed",
                        "type": "string",
                        "required": "no",
                        "description": "The fixed start date of an epic (since 11.3)"
                    },
                    {
                        "attribute": "due_date_is_fixed",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether due date should be sourced from due_date_fixed or from milestones (since 11.3)"
                    },
                    {
                        "attribute": "due_date_fixed",
                        "type": "string",
                        "required": "no",
                        "description": "The fixed due date of an epic (since 11.3)"
                    }
                ]
            },
            {
                "title": "update-epic",
                "description": "Updates an epic.",
                "api": [],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "no",
                        "description": "The title of an epic"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of an epic"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "The comma separated list of labels"
                    },
                    {
                        "attribute": "start_date_is_fixed",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether start date should be sourced from start_date_fixed or from milestones (since 11.3)"
                    },
                    {
                        "attribute": "start_date_fixed",
                        "type": "string",
                        "required": "no",
                        "description": "The fixed start date of an epic (since 11.3)"
                    },
                    {
                        "attribute": "due_date_is_fixed",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether due date should be sourced from due_date_fixed or from milestones (since 11.3)"
                    },
                    {
                        "attribute": "due_date_fixed",
                        "type": "string",
                        "required": "no",
                        "description": "The fixed due date of an epic (since 11.3)"
                    },
                    {
                        "attribute": "state_event",
                        "type": "string",
                        "required": "no",
                        "description": "State event for an epic. Set close to close the epic and reopen to reopen it (since 11.4)"
                    }
                ]
            },
            {
                "title": "delete-epic",
                "description": "Deletes an epic",
                "api": [
                    "DELETE /groups/:id/epics/:epic_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID  of the epic."
                    }
                ]
            },
            {
                "title": "create-a-todo",
                "description": "Manually creates a todo for the current user on an epic. If\nthere already exists a todo for the user on that epic, status code 304 is\nreturned.",
                "api": [
                    "POST /groups/:id/epics/:epic_iid/todo"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "epic_iid ",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a group’s epic"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/award_emoji.html",
        "urlPart": "award_emoji.html",
        "allEntries": [
            {
                "title": "award-emoji-api",
                "description": "An awarded emoji tells a thousand words, and can be awarded on issues, merge\nrequests, snippets, and notes/comments. Issues, merge requests, snippets, and notes are further called\nawardables.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/award_emoji",
                    "GET /projects/:id/merge_requests/:merge_request_iid/award_emoji",
                    "GET /projects/:id/snippets/:snippet_id/award_emoji"
                ],
                "params": []
            },
            {
                "title": "issues-merge-requests-and-snippets",
                "description": "Gets a list of all award emoji",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/award_emoji",
                    "GET /projects/:id/merge_requests/:merge_request_iid/award_emoji",
                    "GET /projects/:id/snippets/:snippet_id/award_emoji"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "awardable_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID (iid for merge requests/issues, id for snippets) of an awardable"
                    }
                ]
            },
            {
                "title": "list-an-awardables-award-emoji",
                "description": "Gets a list of all award emoji",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/award_emoji",
                    "GET /projects/:id/merge_requests/:merge_request_iid/award_emoji",
                    "GET /projects/:id/snippets/:snippet_id/award_emoji"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "awardable_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID (iid for merge requests/issues, id for snippets) of an awardable"
                    }
                ]
            },
            {
                "title": "get-single-award-emoji",
                "description": "Gets a single award emoji from an issue, snippet, or merge request.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/award_emoji/:award_id",
                    "GET /projects/:id/merge_requests/:merge_request_iid/award_emoji/:award_id",
                    "GET /projects/:id/snippets/:snippet_id/award_emoji/:award_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "awardable_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID (iid for merge requests/issues, id for snippets) of an awardable"
                    },
                    {
                        "attribute": "award_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the award emoji"
                    }
                ]
            },
            {
                "title": "award-a-new-emoji",
                "description": "This end point creates an award emoji on the specified resource",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/award_emoji",
                    "POST /projects/:id/merge_requests/:merge_request_iid/award_emoji",
                    "POST /projects/:id/snippets/:snippet_id/award_emoji"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "awardable_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID (iid for merge requests/issues, id for snippets) of an awardable"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the emoji, without colons"
                    }
                ]
            },
            {
                "title": "delete-an-award-emoji",
                "description": "Sometimes its just not meant to be, and you’ll have to remove your award. Only available to\nadmins or the author of the award.",
                "api": [
                    "DELETE /projects/:id/issues/:issue_iid/award_emoji/:award_id",
                    "DELETE /projects/:id/merge_requests/:merge_request_iid/award_emoji/:award_id",
                    "DELETE /projects/:id/snippets/:snippet_id/award_emoji/:award_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of an issue"
                    },
                    {
                        "attribute": "award_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an award_emoji"
                    }
                ]
            },
            {
                "title": "award-emoji-on-notes",
                "description": "The endpoints documented above are available for Notes as well. Notes\nare a sub-resource of Issues, Merge Requests, or Snippets. The examples below\ndescribe working with Award Emoji on notes for an Issue, but can be\neasily adapted for notes on a Merge Request.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of an issue"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    }
                ]
            },
            {
                "title": "list-a-notes-award-emoji",
                "description": "The endpoints documented above are available for Notes as well. Notes are a sub-resource of Issues, Merge Requests, or Snippets. The examples below describe working with Award Emoji on notes for an Issue, but can be easily adapted for notes on a Merge Request.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of an issue"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    }
                ]
            },
            {
                "title": "get-single-notes-award-emoji",
                "description": "Get single note’s award emoji:",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of an issue"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    },
                    {
                        "attribute": "award_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the award emoji"
                    }
                ]
            },
            {
                "title": "award-a-new-emoji-on-a-note",
                "description": "Award a new emoji on a note",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of an issue"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the emoji, without colons"
                    }
                ]
            },
            {
                "title": "delete-an-award-emoji-from-note",
                "description": "Sometimes its just not meant to be, and you’ll have to remove your award. Only available to\nadmins or the author of the award.",
                "api": [
                    "DELETE /projects/:id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of an issue"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    },
                    {
                        "attribute": "award_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an award_emoji"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/broadcast_messages.html",
        "urlPart": "broadcast_messages.html",
        "allEntries": [
            {
                "title": "broadcast-messages-api",
                "description": "The broadcast message API is only accessible to administrators. All requests by\nguests will respond with 401 Unauthorized, and all requests by normal users\nwill respond with 403 Forbidden.",
                "api": [
                    "GET /broadcast_messages"
                ],
                "params": []
            },
            {
                "title": "get-all-broadcast-messages",
                "description": "Example response:",
                "api": [
                    "GET /broadcast_messages"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "Broadcast message ID"
                    }
                ]
            },
            {
                "title": "get-a-specific-broadcast-message",
                "description": "Example response:",
                "api": [
                    "GET /broadcast_messages/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "Broadcast message ID"
                    }
                ]
            },
            {
                "title": "create-a-broadcast-message",
                "description": "Example response:",
                "api": [
                    "POST /broadcast_messages"
                ],
                "params": [
                    {
                        "attribute": "message",
                        "type": "string",
                        "required": "yes",
                        "description": "Message to display"
                    },
                    {
                        "attribute": "starts_at",
                        "type": "datetime",
                        "required": "no",
                        "description": "Starting time (defaults to current time)"
                    },
                    {
                        "attribute": "ends_at",
                        "type": "datetime",
                        "required": "no",
                        "description": "Ending time (defaults to one hour from current time)"
                    },
                    {
                        "attribute": "color",
                        "type": "string",
                        "required": "no",
                        "description": "Background color hex code"
                    },
                    {
                        "attribute": "font",
                        "type": "string",
                        "required": "no",
                        "description": "Foreground color hex code"
                    }
                ]
            },
            {
                "title": "update-a-broadcast-message",
                "description": "Example response:",
                "api": [
                    "PUT /broadcast_messages/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "Broadcast message ID"
                    },
                    {
                        "attribute": "message",
                        "type": "string",
                        "required": "no",
                        "description": "Message to display"
                    },
                    {
                        "attribute": "starts_at",
                        "type": "datetime",
                        "required": "no",
                        "description": "Starting time"
                    },
                    {
                        "attribute": "ends_at",
                        "type": "datetime",
                        "required": "no",
                        "description": "Ending time"
                    },
                    {
                        "attribute": "color",
                        "type": "string",
                        "required": "no",
                        "description": "Background color hex code"
                    },
                    {
                        "attribute": "font",
                        "type": "string",
                        "required": "no",
                        "description": "Foreground color hex code"
                    }
                ]
            },
            {
                "title": "delete-a-broadcast-message",
                "description": "",
                "api": [
                    "DELETE /broadcast_messages/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "Broadcast message ID"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/deploy_keys.html",
        "urlPart": "deploy_keys.html",
        "allEntries": [
            {
                "title": "deploy-keys-api",
                "description": "Get a list of all deploy keys across all projects of the GitLab instance. This endpoint requires admin access.",
                "api": [
                    "GET /deploy_keys"
                ],
                "params": []
            },
            {
                "title": "list-all-deploy-keys",
                "description": "Get a list of all deploy keys across all projects of the GitLab instance. This endpoint requires admin access.",
                "api": [
                    "GET /deploy_keys"
                ],
                "params": []
            },
            {
                "title": "list-project-deploy-keys",
                "description": "Get a list of a project’s deploy keys.",
                "api": [
                    "GET /projects/:id/deploy_keys"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "single-deploy-key",
                "description": "Get a single key.",
                "api": [
                    "GET /projects/:id/deploy_keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the deploy key"
                    }
                ]
            },
            {
                "title": "add-deploy-key",
                "description": "Creates a new deploy key for a project.",
                "api": [
                    "POST /projects/:id/deploy_keys"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "yes",
                        "description": "New deploy key’s title"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "New deploy key"
                    },
                    {
                        "attribute": "can_push",
                        "type": "boolean",
                        "required": "no",
                        "description": "Can deploy key push to the project’s repository"
                    }
                ]
            },
            {
                "title": "update-deploy-key",
                "description": "Updates a deploy key for a project.",
                "api": [
                    "PUT /projects/:id/deploy_keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "no",
                        "description": "New deploy key’s title"
                    },
                    {
                        "attribute": "can_push",
                        "type": "boolean",
                        "required": "no",
                        "description": "Can deploy key push to the project’s repository"
                    }
                ]
            },
            {
                "title": "delete-deploy-key",
                "description": "Removes a deploy key from the project. If the deploy key is used only for this project, it will be deleted from the system.",
                "api": [
                    "DELETE /projects/:id/deploy_keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the deploy key"
                    }
                ]
            },
            {
                "title": "enable-a-deploy-key",
                "description": "Enables a deploy key for a project so this can be used. Returns the enabled key, with a status code 201 when successful.",
                "api": [
                    "curl --request POST --header \"PRIVATE-TOKEN: 9koXpg98eAheJpvBs5tK\" https://gitlab.example.com/api/v4/projects/5/deploy_keys/13/enable"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the deploy key"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/deployments.html",
        "urlPart": "deployments.html",
        "allEntries": [
            {
                "title": "deployments-api",
                "description": "Get a list of deployments in a project.",
                "api": [
                    "GET /projects/:id/deployments"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return deployments ordered by id or iid or created_at or ref fields. Default is id\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return deployments sorted in asc or desc order. Default is asc\n"
                    }
                ]
            },
            {
                "title": "list-project-deployments",
                "description": "Get a list of deployments in a project.",
                "api": [
                    "GET /projects/:id/deployments"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return deployments ordered by id or iid or created_at or ref fields. Default is id\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return deployments sorted in asc or desc order. Default is asc\n"
                    }
                ]
            },
            {
                "title": "get-a-specific-deployment",
                "description": "Example of response",
                "api": [
                    "GET /projects/:id/deployments/:deployment_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "deployment_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the deployment"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/branches.html",
        "urlPart": "branches.html",
        "allEntries": [
            {
                "title": "branches-api",
                "description": "Get a list of repository branches from a project, sorted by name alphabetically.\nThis endpoint can be accessed without authentication if the repository is\npublicly accessible.",
                "api": [
                    "GET /projects/:id/repository/branches"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return list of branches matching the search criteria."
                    }
                ]
            },
            {
                "title": "list-repository-branches",
                "description": "Get a list of repository branches from a project, sorted by name alphabetically.\nThis endpoint can be accessed without authentication if the repository is\npublicly accessible.",
                "api": [
                    "GET /projects/:id/repository/branches"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return list of branches matching the search criteria."
                    }
                ]
            },
            {
                "title": "get-single-repository-branch",
                "description": "Get a single project repository branch. This endpoint can be accessed without\nauthentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/branches/:branch"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch"
                    }
                ]
            },
            {
                "title": "protect-repository-branch",
                "description": "Protects a single project repository branch. This is an idempotent function,\nprotecting an already protected repository branch still returns a 200 OK\nstatus code.",
                "api": [
                    "PUT /projects/:id/repository/branches/:branch/protect"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch"
                    },
                    {
                        "attribute": "developers_can_push",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag if developers can push to the branch"
                    },
                    {
                        "attribute": "developers_can_merge",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag if developers can merge to the branch"
                    }
                ]
            },
            {
                "title": "unprotect-repository-branch",
                "description": "Unprotects a single project repository branch. This is an idempotent function,\nunprotecting an already unprotected repository branch still returns a 200 OK\nstatus code.",
                "api": [
                    "PUT /projects/:id/repository/branches/:branch/unprotect"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch"
                    }
                ]
            },
            {
                "title": "create-repository-branch",
                "description": "Example response:",
                "api": [
                    "POST /projects/:id/repository/branches"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "yes",
                        "description": "The branch name or commit SHA to create branch from"
                    }
                ]
            },
            {
                "title": "delete-repository-branch",
                "description": "In case of an error, an explaining message is provided.",
                "api": [
                    "DELETE /projects/:id/repository/branches/:branch"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch"
                    }
                ]
            },
            {
                "title": "delete-merged-branches",
                "description": "Will delete all branches that are merged into the project’s default branch.",
                "api": [
                    "DELETE /projects/:id/repository/merged_branches"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/jobs.html",
        "urlPart": "jobs.html",
        "allEntries": [
            {
                "title": "jobs-api",
                "description": "Get a list of jobs in a project.",
                "api": [
                    "GET /projects/:id/jobs"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string or array of strings",
                        "required": "no",
                        "description": "The scope of jobs to show, one or array of: created, pending, running, failed, success, canceled, skipped, manual; showing all jobs if none provided"
                    }
                ]
            },
            {
                "title": "list-project-jobs",
                "description": "Get a list of jobs in a project.",
                "api": [
                    "GET /projects/:id/jobs"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string or array of strings",
                        "required": "no",
                        "description": "The scope of jobs to show, one or array of: created, pending, running, failed, success, canceled, skipped, manual; showing all jobs if none provided"
                    }
                ]
            },
            {
                "title": "list-pipeline-jobs",
                "description": "Get a list of jobs for a pipeline.",
                "api": [
                    "GET /projects/:id/pipelines/:pipeline_id/jobs"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a pipeline"
                    },
                    {
                        "attribute": "scope",
                        "type": "string or array of strings",
                        "required": "no",
                        "description": "The scope of jobs to show, one or array of: created, pending, running, failed, success, canceled, skipped, manual; showing all jobs if none provided"
                    }
                ]
            },
            {
                "title": "get-a-single-job",
                "description": "Get a single job of a project",
                "api": [
                    "GET /projects/:id/jobs/:job_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    }
                ]
            },
            {
                "title": "get-job-artifacts",
                "description": "Get job artifacts of a project.",
                "api": [
                    "GET /projects/:id/jobs/:job_id/artifacts"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    },
                    {
                        "attribute": "job_token",
                        "type": "string",
                        "required": "no",
                        "description": "To be used with triggers for multi-project pipelines. Is should be invoked only inside .gitlab-ci.yml. Its value is always $CI_JOB_TOKEN."
                    }
                ]
            },
            {
                "title": "download-the-artifacts-archive",
                "description": "Download the artifacts archive from the given reference name and job provided the\njob finished successfully.",
                "api": [
                    "GET /projects/:id/jobs/artifacts/:ref_name/download?job=name"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "ref_name",
                        "type": "string",
                        "required": "yes",
                        "description": "The ref from a repository (can only be branch or tag name, not HEAD or SHA)"
                    },
                    {
                        "attribute": "job",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the job"
                    },
                    {
                        "attribute": "job_token",
                        "type": "string",
                        "required": "no",
                        "description": "To be used with triggers for multi-project pipelines. Is should be invoked only inside .gitlab-ci.yml. Its value is always $CI_JOB_TOKEN."
                    }
                ]
            },
            {
                "title": "download-a-single-artifact-file",
                "description": "Download a single artifact file from within the job’s artifacts archive.",
                "api": [
                    "GET /projects/:id/jobs/:job_id/artifacts/*artifact_path"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id  ",
                        "type": "integer",
                        "required": "yes",
                        "description": "The unique job identifier"
                    },
                    {
                        "attribute": "artifact_path",
                        "type": "string",
                        "required": "yes",
                        "description": "Path to a file inside the artifacts archive"
                    }
                ]
            },
            {
                "title": "get-a-trace-file",
                "description": "Get a trace of a specific job of a project",
                "api": [
                    "GET /projects/:id/jobs/:job_id/trace"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    }
                ]
            },
            {
                "title": "cancel-a-job",
                "description": "Cancel a single job of a project",
                "api": [
                    "POST /projects/:id/jobs/:job_id/cancel"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    }
                ]
            },
            {
                "title": "retry-a-job",
                "description": "Retry a single job of a project",
                "api": [
                    "POST /projects/:id/jobs/:job_id/retry"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    }
                ]
            },
            {
                "title": "erase-a-job",
                "description": "Erase a single job of a project (remove job artifacts and a job trace)",
                "api": [
                    "POST /projects/:id/jobs/:job_id/erase"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    }
                ]
            },
            {
                "title": "keep-artifacts",
                "description": "Prevents artifacts from being deleted when expiration is set.",
                "api": [
                    "POST /projects/:id/jobs/:job_id/artifacts/keep"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    }
                ]
            },
            {
                "title": "play-a-job",
                "description": "Triggers a manual action to start a job.",
                "api": [
                    "POST /projects/:id/jobs/:job_id/play"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "job_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a job"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/merge_request_approvals.html",
        "urlPart": "merge_request_approvals.html",
        "allEntries": [
            {
                "title": "merge-request-approvals-api-starter",
                "description": "Configuration for approvals on all Merge Requests (MR) in the project. Must be authenticated for all endpoints.",
                "api": [
                    "GET /projects/:id/approvals"
                ],
                "params": []
            },
            {
                "title": "project-level-mr-approvals",
                "description": "You can request information about a project’s approval configuration using the\nfollowing endpoint:",
                "api": [
                    "GET /projects/:id/approvals"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    }
                ]
            },
            {
                "title": "get-configuration",
                "description": "You can request information about a project’s approval configuration using the\nfollowing endpoint:",
                "api": [
                    "GET /projects/:id/approvals"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    }
                ]
            },
            {
                "title": "change-configuration",
                "description": "If you are allowed to, you can change approval configuration using the following\nendpoint:",
                "api": [
                    "POST /projects/:id/approvals"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "approvals_before_merge",
                        "type": "integer",
                        "required": "no",
                        "description": "How many approvals are required before an MR can be merged"
                    },
                    {
                        "attribute": "reset_approvals_on_push",
                        "type": "boolean",
                        "required": "no",
                        "description": "Reset approvals on a new push"
                    },
                    {
                        "attribute": "disable_overriding_approvers_per_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow/Disallow overriding approvers per MR"
                    }
                ]
            },
            {
                "title": "change-allowed-approvers",
                "description": "If you are allowed to, you can change approvers and approver groups using\nthe following endpoint:",
                "api": [
                    "PUT /projects/:id/approvers"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "approver_ids",
                        "type": "Array",
                        "required": "yes",
                        "description": "An array of User IDs that can approve MRs"
                    },
                    {
                        "attribute": "approver_group_ids",
                        "type": "Array",
                        "required": "yes",
                        "description": "An array of Group IDs whose members can approve MRs"
                    }
                ]
            },
            {
                "title": "merge-request-level-mr-approvals",
                "description": "Configuration for approvals on a specific Merge Request. Must be authenticated for all endpoints.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/approvals"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of MR"
                    }
                ]
            },
            {
                "title": "get-approval-configuration",
                "description": "You can request information about a merge request’s approval status using the\nfollowing endpoint:",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/approvals"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of MR"
                    }
                ]
            },
            {
                "title": "change-approval-configuration",
                "description": "If you are allowed to, you can change approvals_required using the following\nendpoint:",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/approvals"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of MR"
                    },
                    {
                        "attribute": "approvals_required",
                        "type": "integer",
                        "required": "yes",
                        "description": "Approvals required before MR can be merged"
                    }
                ]
            },
            {
                "title": "change-allowed-approvers-for-merge-request",
                "description": "If you are allowed to, you can change approvers and approver groups using\nthe following endpoint:",
                "api": [
                    "PUT /projects/:id/merge_requests/:merge_request_iid/approvers"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of MR"
                    },
                    {
                        "attribute": "approver_ids",
                        "type": "Array",
                        "required": "yes",
                        "description": "An array of User IDs that can approve the MR"
                    },
                    {
                        "attribute": "approver_group_ids",
                        "type": "Array",
                        "required": "yes",
                        "description": "An array of Group IDs whose members can approve the MR"
                    }
                ]
            },
            {
                "title": "approve-merge-request",
                "description": "If you are allowed to, you can approve a merge request using the following\nendpoint:",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/approve"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of MR"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "no",
                        "description": "The HEAD of the MR"
                    }
                ]
            },
            {
                "title": "unapprove-merge-request",
                "description": "If you did approve a merge request, you can unapprove it using the following\nendpoint:",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/unapprove"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of MR"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/access_requests.html",
        "urlPart": "access_requests.html",
        "allEntries": [
            {
                "title": "group-and-project-access-requests-api",
                "description": "Valid access levels",
                "api": [
                    "10 => Guest access",
                    "20 => Reporter access",
                    "30 => Developer access",
                    "40 => Maintainer access",
                    "50 => Owner access # Only valid for groups"
                ],
                "params": []
            },
            {
                "title": "list-access-requests-for-a-group-or-project",
                "description": "Gets a list of access requests viewable by the authenticated user.",
                "api": [
                    "GET /groups/:id/access_requests",
                    "GET /projects/:id/access_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "request-access-to-a-group-or-project",
                "description": "Requests access for the authenticated user to a group or project.",
                "api": [
                    "POST /groups/:id/access_requests",
                    "POST /projects/:id/access_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "approve-an-access-request",
                "description": "Approves an access request for the given user.",
                "api": [
                    "PUT /groups/:id/access_requests/:user_id/approve",
                    "PUT /projects/:id/access_requests/:user_id/approve"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the access requester"
                    },
                    {
                        "attribute": "access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "A valid access level (defaults: 30, developer access level)"
                    }
                ]
            },
            {
                "title": "deny-an-access-request",
                "description": "Denies an access request for the given user.",
                "api": [
                    "DELETE /groups/:id/access_requests/:user_id",
                    "DELETE /projects/:id/access_requests/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the access requester"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/namespaces.html",
        "urlPart": "namespaces.html",
        "allEntries": [
            {
                "title": "namespaces-api",
                "description": "Usernames and groupnames fall under a special category called namespaces.",
                "api": [
                    "GET /namespaces"
                ],
                "params": []
            },
            {
                "title": "list-namespaces",
                "description": "Get a list of the namespaces of the authenticated user. If the user is an\nadministrator, a list of all namespaces in the GitLab instance is shown.",
                "api": [
                    "GET /namespaces"
                ],
                "params": []
            },
            {
                "title": "search-for-namespace",
                "description": "Get all namespaces that match a string in their name or path.",
                "api": [
                    "GET /namespaces?search=foobar"
                ],
                "params": [
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Returns a list of namespaces the user is authorized to see based on the search criteria"
                    }
                ]
            },
            {
                "title": "get-namespace-by-id",
                "description": "Get a namespace by ID.",
                "api": [
                    "GET /namespaces/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "ID or path of the namespace"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/notification_settings.html",
        "urlPart": "notification_settings.html",
        "allEntries": [
            {
                "title": "notification-settings-api",
                "description": "Valid notification levels",
                "api": [
                    "disabled",
                    "participating",
                    "watch",
                    "global",
                    "mention",
                    "custom"
                ],
                "params": []
            },
            {
                "title": "global-notification-settings",
                "description": "Get current notification settings and email address.",
                "api": [
                    "GET /notification_settings"
                ],
                "params": []
            },
            {
                "title": "update-global-notification-settings",
                "description": "Update current notification settings and email address.",
                "api": [
                    "PUT /notification_settings"
                ],
                "params": [
                    {
                        "attribute": "level",
                        "type": "string",
                        "required": "no",
                        "description": "The global notification level"
                    },
                    {
                        "attribute": "notification_email",
                        "type": "string",
                        "required": "no",
                        "description": "The email address to send notifications"
                    },
                    {
                        "attribute": "new_note",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "new_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reopen_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "close_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reassign_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "issue_due",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "new_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "push_to_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reopen_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "close_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reassign_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "merge_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "failed_pipeline",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "success_pipeline",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "new_epic",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification (Introduced in 11.3)"
                    }
                ]
            },
            {
                "title": "group--project-level-notification-settings",
                "description": "Get current group or project notification settings.",
                "api": [
                    "GET /groups/:id/notification_settings",
                    "GET /projects/:id/notification_settings"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The group/project ID or path"
                    }
                ]
            },
            {
                "title": "update-groupproject-level-notification-settings",
                "description": "Update current group/project notification settings.",
                "api": [
                    "PUT /groups/:id/notification_settings",
                    "PUT /projects/:id/notification_settings"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The group/project ID or path"
                    },
                    {
                        "attribute": "level",
                        "type": "string",
                        "required": "no",
                        "description": "The global notification level"
                    },
                    {
                        "attribute": "new_note",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "new_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reopen_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "close_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reassign_issue",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "issue_due",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "new_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "push_to_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reopen_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "close_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "reassign_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "merge_merge_request",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "failed_pipeline",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "success_pipeline",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification"
                    },
                    {
                        "attribute": "new_epic",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable this notification (Introduced in 11.3)"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/resource_label_events.html",
        "urlPart": "resource_label_events.html",
        "allEntries": [
            {
                "title": "resource-label-events-api",
                "description": "Resource label events keep track about who, when, and which label was added or removed to an issuable.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/resource_label_events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    }
                ]
            },
            {
                "title": "issues",
                "description": "Gets a list of all label events for a single issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/resource_label_events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    }
                ]
            },
            {
                "title": "list-project-issue-label-events",
                "description": "Gets a list of all label events for a single issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/resource_label_events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    }
                ]
            },
            {
                "title": "get-single-issue-label-event",
                "description": "Returns a single label event for a specific project issue",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/resource_label_events/:resource_label_event_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "resource_label_event_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a label event"
                    }
                ]
            },
            {
                "title": "epics",
                "description": "Gets a list of all label events for a single epic.",
                "api": [
                    "GET /groups/:id/epics/:epic_id/resource_label_events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    }
                ]
            },
            {
                "title": "list-group-epic-label-events",
                "description": "Gets a list of all label events for a single epic.",
                "api": [
                    "GET /groups/:id/epics/:epic_id/resource_label_events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    }
                ]
            },
            {
                "title": "get-single-epic-label-event",
                "description": "Returns a single label event for a specific group epic",
                "api": [
                    "GET /groups/:id/epics/:epic_id/resource_label_events/:resource_label_event_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "resource_label_event_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a label event"
                    }
                ]
            },
            {
                "title": "merge-requests",
                "description": "Gets a list of all label events for a single merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/resource_label_events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    }
                ]
            },
            {
                "title": "list-project-merge-request-label-events",
                "description": "Gets a list of all label events for a single merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/resource_label_events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    }
                ]
            },
            {
                "title": "get-single-merge-request-label-event",
                "description": "Returns a single label event for a specific project merge request",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/resource_label_events/:resource_label_event_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "resource_label_event_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a label event"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/pages_domains.html",
        "urlPart": "pages_domains.html",
        "allEntries": [
            {
                "title": "pages-domains-api",
                "description": "Endpoints for connecting custom domain(s) and TLS certificates in GitLab Pages.",
                "api": [
                    "GET /pages/domains"
                ],
                "params": []
            },
            {
                "title": "list-all-pages-domains",
                "description": "Get a list of all pages domains. The user must have admin permissions.",
                "api": [
                    "GET /pages/domains"
                ],
                "params": []
            },
            {
                "title": "list-pages-domains",
                "description": "Get a list of project pages domains. The user must have permissions to view pages domains.",
                "api": [
                    "GET /projects/:id/pages/domains"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "single-pages-domain",
                "description": "Get a single project pages domain. The user must have permissions to view pages domains.",
                "api": [
                    "GET /projects/:id/pages/domains/:domain"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "domain",
                        "type": "string",
                        "required": "yes",
                        "description": "The domain"
                    }
                ]
            },
            {
                "title": "create-new-pages-domain",
                "description": "Creates a new pages domain. The user must have permissions to create new pages domains.",
                "api": [
                    "POST /projects/:id/pages/domains"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "domain",
                        "type": "string",
                        "required": "yes",
                        "description": "The domain"
                    },
                    {
                        "attribute": "certificate",
                        "type": "file/string",
                        "required": "no",
                        "description": "The certificate in PEM format with intermediates following in most specific to least specific order."
                    },
                    {
                        "attribute": "key",
                        "type": "file/string",
                        "required": "no",
                        "description": "The certificate key in PEM format."
                    }
                ]
            },
            {
                "title": "update-pages-domain",
                "description": "Updates an existing project pages domain. The user must have permissions to change an existing pages domains.",
                "api": [
                    "PUT /projects/:id/pages/domains/:domain"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "domain",
                        "type": "string",
                        "required": "yes",
                        "description": "The domain"
                    },
                    {
                        "attribute": "certificate",
                        "type": "file/string",
                        "required": "no",
                        "description": "The certificate in PEM format with intermediates following in most specific to least specific order."
                    },
                    {
                        "attribute": "key",
                        "type": "file/string",
                        "required": "no",
                        "description": "The certificate key in PEM format."
                    }
                ]
            },
            {
                "title": "delete-pages-domain",
                "description": "Deletes an existing project pages domain.",
                "api": [
                    "DELETE /projects/:id/pages/domains/:domain"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "domain",
                        "type": "string",
                        "required": "yes",
                        "description": "The domain"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/access_requests.html",
        "urlPart": "access_requests.html",
        "allEntries": [
            {
                "title": "group-and-project-access-requests-api",
                "description": "Valid access levels",
                "api": [
                    "10 => Guest access",
                    "20 => Reporter access",
                    "30 => Developer access",
                    "40 => Maintainer access",
                    "50 => Owner access # Only valid for groups"
                ],
                "params": []
            },
            {
                "title": "list-access-requests-for-a-group-or-project",
                "description": "Gets a list of access requests viewable by the authenticated user.",
                "api": [
                    "GET /groups/:id/access_requests",
                    "GET /projects/:id/access_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "request-access-to-a-group-or-project",
                "description": "Requests access for the authenticated user to a group or project.",
                "api": [
                    "POST /groups/:id/access_requests",
                    "POST /projects/:id/access_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "approve-an-access-request",
                "description": "Approves an access request for the given user.",
                "api": [
                    "PUT /groups/:id/access_requests/:user_id/approve",
                    "PUT /projects/:id/access_requests/:user_id/approve"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the access requester"
                    },
                    {
                        "attribute": "access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "A valid access level (defaults: 30, developer access level)"
                    }
                ]
            },
            {
                "title": "deny-an-access-request",
                "description": "Denies an access request for the given user.",
                "api": [
                    "DELETE /groups/:id/access_requests/:user_id",
                    "DELETE /projects/:id/access_requests/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the access requester"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/pipeline_triggers.html",
        "urlPart": "pipeline_triggers.html",
        "allEntries": [
            {
                "title": "pipeline-triggers-api",
                "description": "You can read more about triggering pipelines through the API.",
                "api": [
                    "GET /projects/:id/triggers"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-project-triggers",
                "description": "Get a list of project’s build triggers.",
                "api": [
                    "GET /projects/:id/triggers"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "get-trigger-details",
                "description": "Get details of project’s build trigger.",
                "api": [
                    "GET /projects/:id/triggers/:trigger_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "trigger_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The trigger id"
                    }
                ]
            },
            {
                "title": "create-a-project-trigger",
                "description": "Create a trigger for a project.",
                "api": [
                    "POST /projects/:id/triggers"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "yes",
                        "description": "The trigger name"
                    }
                ]
            },
            {
                "title": "update-a-project-trigger",
                "description": "Update a trigger for a project.",
                "api": [
                    "PUT /projects/:id/triggers/:trigger_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "trigger_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The trigger id"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The trigger name"
                    }
                ]
            },
            {
                "title": "take-ownership-of-a-project-trigger",
                "description": "Update an owner of a project trigger.",
                "api": [
                    "POST /projects/:id/triggers/:trigger_id/take_ownership"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "trigger_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The trigger id"
                    }
                ]
            },
            {
                "title": "remove-a-project-trigger",
                "description": "Remove a project’s build trigger.",
                "api": [
                    "DELETE /projects/:id/triggers/:trigger_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "trigger_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The trigger id"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/discussions.html",
        "urlPart": "discussions.html",
        "allEntries": [
            {
                "title": "discussions-api",
                "description": "Discussions are set of related notes on snippets, issues, epics, merge requests or commits.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    }
                ]
            },
            {
                "title": "issues",
                "description": "Gets a list of all discussions for a single issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    }
                ]
            },
            {
                "title": "list-project-issue-discussions",
                "description": "Gets a list of all discussions for a single issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    }
                ]
            },
            {
                "title": "get-single-issue-discussion",
                "description": "Returns a single discussion for a specific project issue",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/discussions/:discussion_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    }
                ]
            },
            {
                "title": "create-new-issue-discussion",
                "description": "Creates a new discussion to a single project issue. This is similar to creating\na note but but another comments (replies) can be added to it later.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "add-note-to-existing-issue-discussion",
                "description": "Adds a new note to the discussion.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/discussions/:discussion_id/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "modify-existing-issue-discussion-note",
                "description": "Modify existing discussion note of an issue.",
                "api": [
                    "PUT /projects/:id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    }
                ]
            },
            {
                "title": "delete-an-issue-discussion-note",
                "description": "Deletes an existing discussion note of an issue.",
                "api": [
                    "DELETE /projects/:id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    }
                ]
            },
            {
                "title": "snippets",
                "description": "Gets a list of all discussions for a single snippet.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an snippet"
                    }
                ]
            },
            {
                "title": "list-project-snippet-discussions",
                "description": "Gets a list of all discussions for a single snippet.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an snippet"
                    }
                ]
            },
            {
                "title": "get-single-snippet-discussion",
                "description": "Returns a single discussion for a specific project snippet",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/discussions/:discussion_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an snippet"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    }
                ]
            },
            {
                "title": "create-new-snippet-discussion",
                "description": "Creates a new discussion to a single project snippet. This is similar to creating\na note but but another comments (replies) can be added to it later.",
                "api": [
                    "POST /projects/:id/snippets/:snippet_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an snippet"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "add-note-to-existing-snippet-discussion",
                "description": "Adds a new note to the discussion.",
                "api": [
                    "POST /projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an snippet"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "modify-existing-snippet-discussion-note",
                "description": "Modify existing discussion note of an snippet.",
                "api": [
                    "PUT /projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an snippet"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    }
                ]
            },
            {
                "title": "delete-an-snippet-discussion-note",
                "description": "Deletes an existing discussion note of an snippet.",
                "api": [
                    "DELETE /projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an snippet"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    }
                ]
            },
            {
                "title": "epics",
                "description": "Gets a list of all discussions for a single epic.",
                "api": [
                    "GET /groups/:id/epics/:epic_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    }
                ]
            },
            {
                "title": "list-group-epic-discussions",
                "description": "Gets a list of all discussions for a single epic.",
                "api": [
                    "GET /groups/:id/epics/:epic_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    }
                ]
            },
            {
                "title": "get-single-epic-discussion",
                "description": "Returns a single discussion for a specific group epic",
                "api": [
                    "GET /groups/:id/epics/:epic_id/discussions/:discussion_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    }
                ]
            },
            {
                "title": "create-new-epic-discussion",
                "description": "Creates a new discussion to a single group epic. This is similar to creating\na note but but another comments (replies) can be added to it later.",
                "api": [
                    "POST /groups/:id/epics/:epic_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "add-note-to-existing-epic-discussion",
                "description": "Adds a new note to the discussion.",
                "api": [
                    "POST /groups/:id/epics/:epic_id/discussions/:discussion_id/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "modify-existing-epic-discussion-note",
                "description": "Modify existing discussion note of an epic.",
                "api": [
                    "PUT /groups/:id/epics/:epic_id/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    }
                ]
            },
            {
                "title": "delete-an-epic-discussion-note",
                "description": "Deletes an existing discussion note of an epic.",
                "api": [
                    "DELETE /groups/:id/epics/:epic_id/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    }
                ]
            },
            {
                "title": "merge-requests",
                "description": "Gets a list of all discussions for a single merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    }
                ]
            },
            {
                "title": "list-project-merge-request-discussions",
                "description": "Gets a list of all discussions for a single merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    }
                ]
            },
            {
                "title": "get-single-merge-request-discussion",
                "description": "Returns a single discussion for a specific project merge request",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    }
                ]
            },
            {
                "title": "create-new-merge-request-discussion",
                "description": "Creates a new discussion to a single project merge request. This is similar to creating\na note but but another comments (replies) can be added to it later.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    },
                    {
                        "attribute": "position",
                        "type": "hash",
                        "required": "no",
                        "description": "Position when creating a diff note"
                    },
                    {
                        "attribute": "position[base_sha]",
                        "type": "string",
                        "required": "yes",
                        "description": "Base commit SHA in the source branch"
                    },
                    {
                        "attribute": "position[start_sha]",
                        "type": "string",
                        "required": "yes",
                        "description": "SHA referencing commit in target branch"
                    },
                    {
                        "attribute": "position[head_sha]",
                        "type": "string",
                        "required": "yes",
                        "description": "SHA referencing HEAD of this merge request"
                    },
                    {
                        "attribute": "position[position_type]",
                        "type": "string",
                        "required": "yes",
                        "description": "Type of the position reference’, allowed values: ‘text’ or ‘image’"
                    },
                    {
                        "attribute": "position[new_path]",
                        "type": "string",
                        "required": "no",
                        "description": "File path after change"
                    },
                    {
                        "attribute": "position[new_line]",
                        "type": "integer",
                        "required": "no",
                        "description": "Line number after change (for ‘text’ diff notes)"
                    },
                    {
                        "attribute": "position[old_path]",
                        "type": "string",
                        "required": "no",
                        "description": "File path before change"
                    },
                    {
                        "attribute": "position[old_line]",
                        "type": "integer",
                        "required": "no",
                        "description": "Line number before change (for ‘text’ diff notes)"
                    },
                    {
                        "attribute": "position[width]",
                        "type": "integer",
                        "required": "no",
                        "description": "Width of the image (for ‘image’ diff notes)"
                    },
                    {
                        "attribute": "position[height]",
                        "type": "integer",
                        "required": "no",
                        "description": "Height of the image (for ‘image’ diff notes)"
                    },
                    {
                        "attribute": "position[x]",
                        "type": "integer",
                        "required": "no",
                        "description": "X coordinate (for ‘image’ diff notes)"
                    },
                    {
                        "attribute": "position[y]",
                        "type": "integer",
                        "required": "no",
                        "description": "Y coordinate (for ‘image’ diff notes)"
                    }
                ]
            },
            {
                "title": "resolve-a-merge-request-discussion",
                "description": "Resolve/unresolve whole discussion of a merge request.",
                "api": [
                    "PUT /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "resolved",
                        "type": "boolean",
                        "required": "yes",
                        "description": "Resolve/unresolve the discussion"
                    }
                ]
            },
            {
                "title": "add-note-to-existing-merge-request-discussion",
                "description": "Adds a new note to the discussion.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "modify-an-existing-merge-request-discussion-note",
                "description": "Modify or resolve an existing discussion note of a merge request.",
                "api": [
                    "PUT /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "no",
                        "description": "The content of a discussion (exactly one of body or resolved must be set"
                    },
                    {
                        "attribute": "resolved",
                        "type": "boolean",
                        "required": "no",
                        "description": "Resolve/unresolve the note (exactly one of body or resolved must be set"
                    }
                ]
            },
            {
                "title": "delete-a-merge-request-discussion-note",
                "description": "Deletes an existing discussion note of a merge request.",
                "api": [
                    "DELETE /projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    }
                ]
            },
            {
                "title": "commits",
                "description": "Gets a list of all discussions for a single commit.",
                "api": [
                    "GET /projects/:id/commits/:commit_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "commit_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a commit"
                    }
                ]
            },
            {
                "title": "list-project-commit-discussions",
                "description": "Gets a list of all discussions for a single commit.",
                "api": [
                    "GET /projects/:id/commits/:commit_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "commit_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a commit"
                    }
                ]
            },
            {
                "title": "get-single-commit-discussion",
                "description": "Returns a single discussion for a specific project commit",
                "api": [
                    "GET /projects/:id/commits/:commit_id/discussions/:discussion_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "commit_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a commit"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    }
                ]
            },
            {
                "title": "create-new-commit-discussion",
                "description": "Creates a new discussion to a single project commit. This is similar to creating\na note but but another comments (replies) can be added to it later.",
                "api": [
                    "POST /projects/:id/commits/:commit_id/discussions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "commit_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a commit"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    },
                    {
                        "attribute": "position",
                        "type": "hash",
                        "required": "no",
                        "description": "Position when creating a diff note"
                    },
                    {
                        "attribute": "position[base_sha]",
                        "type": "string",
                        "required": "yes",
                        "description": "Base commit SHA in the source branch"
                    },
                    {
                        "attribute": "position[start_sha]",
                        "type": "string",
                        "required": "yes",
                        "description": "SHA referencing commit in target branch"
                    },
                    {
                        "attribute": "position[head_sha]",
                        "type": "string",
                        "required": "yes",
                        "description": "SHA referencing HEAD of this commit"
                    },
                    {
                        "attribute": "position[position_type]",
                        "type": "string",
                        "required": "yes",
                        "description": "Type of the position reference’, allowed values: ‘text’ or ‘image’"
                    },
                    {
                        "attribute": "position[new_path]",
                        "type": "string",
                        "required": "no",
                        "description": "File path after change"
                    },
                    {
                        "attribute": "position[new_line]",
                        "type": "integer",
                        "required": "no",
                        "description": "Line number after change"
                    },
                    {
                        "attribute": "position[old_path]",
                        "type": "string",
                        "required": "no",
                        "description": "File path before change"
                    },
                    {
                        "attribute": "position[old_line]",
                        "type": "integer",
                        "required": "no",
                        "description": "Line number before change"
                    },
                    {
                        "attribute": "position[width]",
                        "type": "integer",
                        "required": "no",
                        "description": "Width of the image (for ‘image’ diff notes)"
                    },
                    {
                        "attribute": "position[height]",
                        "type": "integer",
                        "required": "no",
                        "description": "Height of the image (for ‘image’ diff notes)"
                    },
                    {
                        "attribute": "position[x]",
                        "type": "integer",
                        "required": "no",
                        "description": "X coordinate (for ‘image’ diff notes)"
                    },
                    {
                        "attribute": "position[y]",
                        "type": "integer",
                        "required": "no",
                        "description": "Y coordinate (for ‘image’ diff notes)"
                    }
                ]
            },
            {
                "title": "add-note-to-existing-commit-discussion",
                "description": "Adds a new note to the discussion.",
                "api": [
                    "POST /projects/:id/commits/:commit_id/discussions/:discussion_id/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "commit_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a commit"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a discussion"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    }
                ]
            },
            {
                "title": "modify-an-existing-commit-discussion-note",
                "description": "Modify or resolve an existing discussion note of a commit.",
                "api": [
                    "PUT /projects/:id/commits/:commit_id/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "commit_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a commit"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "no",
                        "description": "The content of a note"
                    }
                ]
            },
            {
                "title": "delete-a-commit-discussion-note",
                "description": "Deletes an existing discussion note of a commit.",
                "api": [
                    "DELETE /projects/:id/commits/:commit_id/discussions/:discussion_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "commit_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a commit"
                    },
                    {
                        "attribute": "discussion_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a discussion note"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/pipeline_schedules.html",
        "urlPart": "pipeline_schedules.html",
        "allEntries": [
            {
                "title": "pipeline-schedules",
                "description": "You can read more about pipeline schedules.",
                "api": [
                    "GET /projects/:id/pipeline_schedules"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "The scope of pipeline schedules, one of: active, inactive\n"
                    }
                ]
            },
            {
                "title": "get-all-pipeline-schedules",
                "description": "Get a list of the pipeline schedules of a project.",
                "api": [
                    "GET /projects/:id/pipeline_schedules"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "The scope of pipeline schedules, one of: active, inactive\n"
                    }
                ]
            },
            {
                "title": "get-a-single-pipeline-schedule",
                "description": "Get the pipeline schedule of a project.",
                "api": [
                    "GET /projects/:id/pipeline_schedules/:pipeline_schedule_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    }
                ]
            },
            {
                "title": "create-a-new-pipeline-schedule",
                "description": "Create a new pipeline schedule of a project.",
                "api": [
                    "POST /projects/:id/pipeline_schedules"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "yes",
                        "description": "The description of pipeline schedule"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "yes",
                        "description": "The branch/tag name will be triggered"
                    },
                    {
                        "attribute": "cron ",
                        "type": "string",
                        "required": "yes",
                        "description": "The cron (e.g. 0 1 * * *) (Cron syntax)"
                    },
                    {
                        "attribute": "cron_timezone ",
                        "type": "string",
                        "required": "no",
                        "description": "The timezone supported by ActiveSupport::TimeZone (e.g. Pacific Time (US & Canada)) (default: 'UTC')"
                    },
                    {
                        "attribute": "active ",
                        "type": "boolean",
                        "required": "no",
                        "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially (default: true)"
                    }
                ]
            },
            {
                "title": "edit-a-pipeline-schedule",
                "description": "Updates the pipeline schedule  of a project. Once the update is done, it will be rescheduled automatically.",
                "api": [
                    "PUT /projects/:id/pipeline_schedules/:pipeline_schedule_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of pipeline schedule"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "no",
                        "description": "The branch/tag name will be triggered"
                    },
                    {
                        "attribute": "cron ",
                        "type": "string",
                        "required": "no",
                        "description": "The cron (e.g. 0 1 * * *) (Cron syntax)"
                    },
                    {
                        "attribute": "cron_timezone ",
                        "type": "string",
                        "required": "no",
                        "description": "The timezone supported by ActiveSupport::TimeZone (e.g. Pacific Time (US & Canada)) or TZInfo::Timezone (e.g. America/Los_Angeles)"
                    },
                    {
                        "attribute": "active ",
                        "type": "boolean",
                        "required": "no",
                        "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially."
                    }
                ]
            },
            {
                "title": "take-ownership-of-a-pipeline-schedule",
                "description": "Update the owner of the pipeline schedule of a project.",
                "api": [
                    "POST /projects/:id/pipeline_schedules/:pipeline_schedule_id/take_ownership"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    }
                ]
            },
            {
                "title": "delete-a-pipeline-schedule",
                "description": "Delete the pipeline schedule of a project.",
                "api": [
                    "DELETE /projects/:id/pipeline_schedules/:pipeline_schedule_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    }
                ]
            },
            {
                "title": "pipeline-schedule-variable",
                "description": "Create a new variable of a pipeline schedule.",
                "api": [
                    "POST /projects/:id/pipeline_schedules/:pipeline_schedule_id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of a variable"
                    }
                ]
            },
            {
                "title": "create-a-new-pipeline-schedule-variable",
                "description": "Create a new variable of a pipeline schedule.",
                "api": [
                    "POST /projects/:id/pipeline_schedules/:pipeline_schedule_id/variables"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of a variable"
                    }
                ]
            },
            {
                "title": "edit-a-pipeline-schedule-variable",
                "description": "Updates the variable of a pipeline schedule.",
                "api": [
                    "PUT /projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    },
                    {
                        "attribute": "value",
                        "type": "string",
                        "required": "yes",
                        "description": "The value of a variable"
                    }
                ]
            },
            {
                "title": "delete-a-pipeline-schedule-variable",
                "description": "Delete the variable of a pipeline schedule.",
                "api": [
                    "DELETE /projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_schedule_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The pipeline schedule id"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of a variable"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/project_import_export.html",
        "urlPart": "project_import_export.html",
        "allEntries": [
            {
                "title": "project-importexport-api",
                "description": "Introduced in GitLab 10.6",
                "api": [
                    "POST /projects/:id/export"
                ],
                "params": []
            },
            {
                "title": "schedule-an-export",
                "description": "Start a new export.",
                "api": [
                    "POST /projects/:id/export"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Overrides the project description"
                    },
                    {
                        "attribute": "upload",
                        "type": "hash",
                        "required": "no",
                        "description": "Hash that contains the information to upload the exported project to a web server"
                    },
                    {
                        "attribute": "upload[url]",
                        "type": "string",
                        "required": "yes",
                        "description": "The URL to upload the project"
                    },
                    {
                        "attribute": "upload[http_method]",
                        "type": "string",
                        "required": "no",
                        "description": "The HTTP method to upload the exported project. Only PUT and POST methods allowed. Default is PUT\n"
                    }
                ]
            },
            {
                "title": "export-status",
                "description": "Get the status of export.",
                "api": [
                    "GET /projects/:id/export"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "export-download",
                "description": "Download the finished export.",
                "api": [
                    "GET /projects/:id/export/download"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "import-a-file",
                "description": "The override params passed will take precedence over all values defined inside the export file.",
                "api": [
                    "POST /projects/import"
                ],
                "params": [
                    {
                        "attribute": "namespace",
                        "type": "integer/string",
                        "required": "no",
                        "description": "The ID or path of the namespace that the project will be imported to. Defaults to the current user’s namespace"
                    },
                    {
                        "attribute": "file",
                        "type": "string",
                        "required": "yes",
                        "description": "The file to be uploaded"
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "yes",
                        "description": "Name and path for new project"
                    },
                    {
                        "attribute": "overwrite",
                        "type": "boolean",
                        "required": "no",
                        "description": "If there is a project with the same path the import will overwrite it. Default to false"
                    },
                    {
                        "attribute": "override_params",
                        "type": "Hash",
                        "required": "no",
                        "description": "Supports all fields defined in the Project API\n"
                    }
                ]
            },
            {
                "title": "import-status",
                "description": "Get the status of an import.",
                "api": [
                    "GET /projects/:id/import"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/project_badges.html",
        "urlPart": "project_badges.html",
        "allEntries": [
            {
                "title": "project-badges-api",
                "description": "Badges support placeholders that will be replaced in real time in both the link and image URL. The allowed placeholders are:",
                "api": [
                    "GET /projects/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "placeholder-tokens",
                "description": "Badges support placeholders that will be replaced in real time in both the link and image URL. The allowed placeholders are:",
                "api": [
                    "GET /projects/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "list-all-badges-of-a-project",
                "description": "Gets a list of a project’s badges and its group badges.",
                "api": [
                    "GET /projects/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "get-a-badge-of-a-project",
                "description": "Gets a badge of a project.",
                "api": [
                    "GET /projects/:id/badges/:badge_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "badge_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The badge ID"
                    }
                ]
            },
            {
                "title": "add-a-badge-to-a-project",
                "description": "Adds a badge to a project.",
                "api": [
                    "POST /projects/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project  owned by the authenticated user"
                    },
                    {
                        "attribute": "link_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge link"
                    },
                    {
                        "attribute": "image_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge image"
                    }
                ]
            },
            {
                "title": "edit-a-badge-of-a-project",
                "description": "Updates a badge of a project.",
                "api": [
                    "PUT /projects/:id/badges/:badge_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "badge_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The badge ID"
                    },
                    {
                        "attribute": "link_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL of the badge link"
                    },
                    {
                        "attribute": "image_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL of the badge image"
                    }
                ]
            },
            {
                "title": "remove-a-badge-from-a-project",
                "description": "Removes a badge from a project. Only project’s badges will be removed by using this endpoint.",
                "api": [
                    "DELETE /projects/:id/badges/:badge_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "badge_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The badge ID"
                    }
                ]
            },
            {
                "title": "preview-a-badge-from-a-project",
                "description": "Returns how the link_url and image_url final URLs would be after resolving the placeholder interpolation.",
                "api": [
                    "GET /projects/:id/badges/render"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "link_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge link"
                    },
                    {
                        "attribute": "image_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge image"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/notes.html",
        "urlPart": "notes.html",
        "allEntries": [
            {
                "title": "notes-api",
                "description": "Notes are comments on snippets, issues, merge requests or epics.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/notes",
                    "GET /projects/:id/issues/:issue_iid/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return issue notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return issue notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "issues",
                "description": "Gets a list of all notes for a single issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/notes",
                    "GET /projects/:id/issues/:issue_iid/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return issue notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return issue notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "list-project-issue-notes",
                "description": "Gets a list of all notes for a single issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/notes",
                    "GET /projects/:id/issues/:issue_iid/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return issue notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return issue notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "get-single-issue-note",
                "description": "Returns a single note for a specific project issue",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-new-issue-note",
                "description": "Creates a new note to a single project issue.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "modify-existing-issue-note",
                "description": "Modify existing note of an issue.",
                "api": [
                    "PUT /projects/:id/issues/:issue_iid/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "delete-an-issue-note",
                "description": "Deletes an existing note of an issue.",
                "api": [
                    "DELETE /projects/:id/issues/:issue_iid/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of an issue"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    }
                ]
            },
            {
                "title": "snippets",
                "description": "Gets a list of all notes for a single snippet. Snippet notes are comments users can post to a snippet.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/notes",
                    "GET /projects/:id/snippets/:snippet_id/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project snippet"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return snippet notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return snippet notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "list-all-snippet-notes",
                "description": "Gets a list of all notes for a single snippet. Snippet notes are comments users can post to a snippet.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/notes",
                    "GET /projects/:id/snippets/:snippet_id/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project snippet"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return snippet notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return snippet notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "get-single-snippet-note",
                "description": "Returns a single note for a given snippet.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-new-snippet-note",
                "description": "Creates a new note for a single snippet. Snippet notes are comments users can post to a snippet.\nIf you create a note where the body only contains an Award Emoji, you’ll receive this object back.",
                "api": [
                    "POST /projects/:id/snippets/:snippet_id/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "modify-existing-snippet-note",
                "description": "Modify existing note of a snippet.",
                "api": [
                    "PUT /projects/:id/snippets/:snippet_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "delete-a-snippet-note",
                "description": "Deletes an existing note of a snippet.",
                "api": [
                    "DELETE /projects/:id/snippets/:snippet_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a snippet"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    }
                ]
            },
            {
                "title": "merge-requests",
                "description": "Gets a list of all notes for a single merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/notes",
                    "GET /projects/:id/merge_requests/:merge_request_iid/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a project merge request"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge request notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge request notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "list-all-merge-request-notes",
                "description": "Gets a list of all notes for a single merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/notes",
                    "GET /projects/:id/merge_requests/:merge_request_iid/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a project merge request"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge request notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge request notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "get-single-merge-request-note",
                "description": "Returns a single note for a given merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-new-merge-request-note",
                "description": "Creates a new note for a single merge request.\nIf you create a note where the body only contains an Award Emoji, you’ll receive\nthis object back.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "modify-existing-merge-request-note",
                "description": "Modify existing note of a merge request.",
                "api": [
                    "PUT /projects/:id/merge_requests/:merge_request_iid/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "delete-a-merge-request-note",
                "description": "Deletes an existing note of a merge request.",
                "api": [
                    "DELETE /projects/:id/merge_requests/:merge_request_iid/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The IID of a merge request"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    }
                ]
            },
            {
                "title": "epics",
                "description": "Gets a list of all notes for a single epic. Epic notes are comments users can post to an epic.",
                "api": [
                    "GET /groups/:id/epics/:epic_id/notes",
                    "GET /groups/:id/epics/:epic_id/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a group epic"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return epic notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return epic notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "list-all-epic-notes",
                "description": "Gets a list of all notes for a single epic. Epic notes are comments users can post to an epic.",
                "api": [
                    "GET /groups/:id/epics/:epic_id/notes",
                    "GET /groups/:id/epics/:epic_id/notes?sort=asc&order_by=updated_at"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a group epic"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return epic notes sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return epic notes ordered by created_at or updated_at fields. Default is created_at\n"
                    }
                ]
            },
            {
                "title": "get-single-epic-note",
                "description": "Returns a single note for a given epic.",
                "api": [
                    "GET /groups/:id/epics/:epic_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    }
                ]
            },
            {
                "title": "create-new-epic-note",
                "description": "Creates a new note for a single epic. Epic notes are comments users can post to an epic.\nIf you create a note where the body only contains an Award Emoji, you’ll receive this object back.",
                "api": [
                    "POST /groups/:id/epics/:epic_id/notes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a note"
                    }
                ]
            },
            {
                "title": "modify-existing-epic-note",
                "description": "Modify existing note of an epic.",
                "api": [
                    "PUT /groups/:id/epics/:epic_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    },
                    {
                        "attribute": "body",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of a note"
                    }
                ]
            },
            {
                "title": "delete-an-epic-note",
                "description": "Deletes an existing note of an epic.",
                "api": [
                    "DELETE /groups/:id/epics/:epic_id/notes/:note_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group\n"
                    },
                    {
                        "attribute": "epic_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of an epic"
                    },
                    {
                        "attribute": "note_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a note"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/repository_submodules.html",
        "urlPart": "repository_submodules.html",
        "allEntries": [
            {
                "title": "repository-submodules-api",
                "description": "In some workflows, especially automated ones, it can be useful to update a\nsubmodule’s reference to keep up to date other projects that use it.\nThis endpoint allows you to update a Git submodule reference in a\nspecific branch.",
                "api": [
                    "PUT /projects/:id/repository/submodules/:submodule"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "submodule",
                        "type": "string",
                        "required": "yes",
                        "description": "URL encoded full path to the submodule. For example, lib%2Fclass%2Erb\n"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "Name of the branch to commit into"
                    },
                    {
                        "attribute": "commit_sha",
                        "type": "string",
                        "required": "yes",
                        "description": "Full commit SHA to update the submodule to"
                    },
                    {
                        "attribute": "commit_message",
                        "type": "string",
                        "required": "no",
                        "description": "Commit message. If no message is provided, a default one will be set"
                    }
                ]
            },
            {
                "title": "update-existing-submodule-reference-in-repository",
                "description": "In some workflows, especially automated ones, it can be useful to update a\nsubmodule’s reference to keep up to date other projects that use it.\nThis endpoint allows you to update a Git submodule reference in a\nspecific branch.",
                "api": [
                    "PUT /projects/:id/repository/submodules/:submodule"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "submodule",
                        "type": "string",
                        "required": "yes",
                        "description": "URL encoded full path to the submodule. For example, lib%2Fclass%2Erb\n"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "yes",
                        "description": "Name of the branch to commit into"
                    },
                    {
                        "attribute": "commit_sha",
                        "type": "string",
                        "required": "yes",
                        "description": "Full commit SHA to update the submodule to"
                    },
                    {
                        "attribute": "commit_message",
                        "type": "string",
                        "required": "no",
                        "description": "Commit message. If no message is provided, a default one will be set"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/repository_files.html",
        "urlPart": "repository_files.html",
        "allEntries": [
            {
                "title": "repository-files-api",
                "description": "CRUD for repository files",
                "api": [
                    "GET /projects/:id/repository/files/:file_path"
                ],
                "params": []
            },
            {
                "title": "get-file-from-repository",
                "description": "Allows you to receive information about file in repository like name, size,\ncontent. Note that file content is Base64 encoded. This endpoint can be accessed\nwithout authentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/files/:file_path"
                ],
                "params": [
                    {
                        "attribute": "file_path",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Url encoded full path to new file. Ex. lib%2Fclass%2Erb"
                    }
                ]
            },
            {
                "title": "get-raw-file-from-repository",
                "description": "Get raw file from repository.",
                "api": [
                    "GET /projects/:id/repository/files/:file_path/raw"
                ],
                "params": [
                    {
                        "attribute": "file_path",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Url encoded full path to new file. Ex. lib%2Fclass%2Erb"
                    }
                ]
            },
            {
                "title": "create-new-file-in-repository",
                "description": "This allows you to create a single file. For creating multiple files with a single request see the commits API.",
                "api": [
                    "POST /projects/:id/repository/files/:file_path"
                ],
                "params": [
                    {
                        "attribute": "file_path",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Url encoded full path to new file. Ex. lib%2Fclass%2Erb"
                    }
                ]
            },
            {
                "title": "update-existing-file-in-repository",
                "description": "This allows you to update a single file. For updating multiple files with a single request see the commits API.",
                "api": [
                    "PUT /projects/:id/repository/files/:file_path"
                ],
                "params": [
                    {
                        "attribute": "file_path",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Url encoded full path to new file. Ex. lib%2Fclass%2Erb"
                    }
                ]
            },
            {
                "title": "delete-existing-file-in-repository",
                "description": "This allows you to delete a single file. For deleting multiple files with a singleh request see the commits API.",
                "api": [
                    "DELETE /projects/:id/repository/files/:file_path"
                ],
                "params": [
                    {
                        "attribute": "file_path",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Url encoded full path to new file. Ex. lib%2Fclass%2Erb"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/pipelines.html",
        "urlPart": "pipelines.html",
        "allEntries": [
            {
                "title": "pipelines-api",
                "description": "Example of response",
                "api": [
                    "GET /projects/:id/pipelines"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "The scope of pipelines, one of: running, pending, finished, branches, tags\n"
                    },
                    {
                        "attribute": "status",
                        "type": "string",
                        "required": "no",
                        "description": "The status of pipelines, one of: running, pending, success, failed, canceled, skipped\n"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "no",
                        "description": "The ref of pipelines"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "no",
                        "description": "The sha or pipelines"
                    },
                    {
                        "attribute": "yaml_errors",
                        "type": "boolean",
                        "required": "no",
                        "description": "Returns pipelines with invalid configurations"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "The name of the user who triggered pipelines"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "no",
                        "description": "The username of the user who triggered pipelines"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Order pipelines by id, status, ref, or user_id (default: id)"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Sort pipelines in asc or desc order (default: desc)"
                    }
                ]
            },
            {
                "title": "list-project-pipelines",
                "description": "Example of response",
                "api": [
                    "GET /projects/:id/pipelines"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "The scope of pipelines, one of: running, pending, finished, branches, tags\n"
                    },
                    {
                        "attribute": "status",
                        "type": "string",
                        "required": "no",
                        "description": "The status of pipelines, one of: running, pending, success, failed, canceled, skipped\n"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "no",
                        "description": "The ref of pipelines"
                    },
                    {
                        "attribute": "sha",
                        "type": "string",
                        "required": "no",
                        "description": "The sha or pipelines"
                    },
                    {
                        "attribute": "yaml_errors",
                        "type": "boolean",
                        "required": "no",
                        "description": "Returns pipelines with invalid configurations"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "The name of the user who triggered pipelines"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "no",
                        "description": "The username of the user who triggered pipelines"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Order pipelines by id, status, ref, or user_id (default: id)"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Sort pipelines in asc or desc order (default: desc)"
                    }
                ]
            },
            {
                "title": "get-a-single-pipeline",
                "description": "Example of response",
                "api": [
                    "GET /projects/:id/pipelines/:pipeline_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a pipeline"
                    }
                ]
            },
            {
                "title": "create-a-new-pipeline",
                "description": "Example of response",
                "api": [
                    "POST /projects/:id/pipeline"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "ref",
                        "type": "string",
                        "required": "yes",
                        "description": "Reference to commit"
                    },
                    {
                        "attribute": "variables",
                        "type": "array",
                        "required": "no",
                        "description": "An array containing the variables available in the pipeline, matching the structure [{ ‘key’ => ‘UPLOAD_TO_S3’, ‘value’ => ‘true’ }]"
                    }
                ]
            },
            {
                "title": "retry-jobs-in-a-pipeline",
                "description": "Response:",
                "api": [
                    "POST /projects/:id/pipelines/:pipeline_id/retry"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a pipeline"
                    }
                ]
            },
            {
                "title": "cancel-a-pipelines-jobs",
                "description": "Response:",
                "api": [
                    "POST /projects/:id/pipelines/:pipeline_id/cancel"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a pipeline"
                    }
                ]
            },
            {
                "title": "delete-a-pipeline",
                "description": "",
                "api": [
                    "DELETE /projects/:id/pipelines/:pipeline_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "pipeline_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a pipeline"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/runners.html",
        "urlPart": "runners.html",
        "allEntries": [
            {
                "title": "runners-api",
                "description": "Get a list of specific runners available to the user.",
                "api": [
                    "GET /runners",
                    "GET /runners?scope=active",
                    "GET /runners?type=project_type",
                    "GET /runners?status=active"
                ],
                "params": [
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Deprecated: Use type or status instead. The scope of specific runners to show, one of: active, paused, online, offline; showing all runners if none provided"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "The type of runners to show, one of: instance_type, group_type, project_type\n"
                    },
                    {
                        "attribute": "status",
                        "type": "string",
                        "required": "no",
                        "description": "The status of runners to show, one of: active, paused, online, offline\n"
                    }
                ]
            },
            {
                "title": "list-owned-runners",
                "description": "Get a list of specific runners available to the user.",
                "api": [
                    "GET /runners",
                    "GET /runners?scope=active",
                    "GET /runners?type=project_type",
                    "GET /runners?status=active"
                ],
                "params": [
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Deprecated: Use type or status instead. The scope of specific runners to show, one of: active, paused, online, offline; showing all runners if none provided"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "The type of runners to show, one of: instance_type, group_type, project_type\n"
                    },
                    {
                        "attribute": "status",
                        "type": "string",
                        "required": "no",
                        "description": "The status of runners to show, one of: active, paused, online, offline\n"
                    }
                ]
            },
            {
                "title": "list-all-runners",
                "description": "Get a list of all runners in the GitLab instance (specific and shared). Access\nis restricted to users with admin privileges.",
                "api": [
                    "GET /runners/all",
                    "GET /runners/all?scope=online",
                    "GET /runners/all?type=project_type",
                    "GET /runners/all?status=active"
                ],
                "params": [
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Deprecated: Use type or status instead. The scope of runners to show, one of: specific, shared, active, paused, online, offline; showing all runners if none provided"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "The type of runners to show, one of: instance_type, group_type, project_type\n"
                    },
                    {
                        "attribute": "status",
                        "type": "string",
                        "required": "no",
                        "description": "The status of runners to show, one of: active, paused, online, offline\n"
                    }
                ]
            },
            {
                "title": "get-runners-details",
                "description": "Get details of a runner.",
                "api": [
                    "GET /runners/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a runner"
                    }
                ]
            },
            {
                "title": "update-runners-details",
                "description": "Update details of a runner.",
                "api": [
                    "PUT /runners/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a runner"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of a runner"
                    },
                    {
                        "attribute": "active",
                        "type": "boolean",
                        "required": "no",
                        "description": "The state of a runner; can be set to true or false\n"
                    },
                    {
                        "attribute": "tag_list",
                        "type": "array",
                        "required": "no",
                        "description": "The list of tags for a runner; put array of tags, that should be finally assigned to a runner"
                    },
                    {
                        "attribute": "run_untagged",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag indicating the runner can execute untagged jobs"
                    },
                    {
                        "attribute": "locked",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag indicating the runner is locked"
                    },
                    {
                        "attribute": "access_level",
                        "type": "string",
                        "required": "no",
                        "description": "The access_level of the runner; not_protected or ref_protected\n"
                    },
                    {
                        "attribute": "maximum_timeout",
                        "type": "integer",
                        "required": "no",
                        "description": "Maximum timeout set when this Runner will handle the job"
                    }
                ]
            },
            {
                "title": "remove-a-runner",
                "description": "Remove a runner.",
                "api": [
                    "DELETE /runners/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a runner"
                    }
                ]
            },
            {
                "title": "list-runners-jobs",
                "description": "List jobs that are being processed or were processed by specified Runner.",
                "api": [
                    "GET /runners/:id/jobs"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a runner"
                    },
                    {
                        "attribute": "status",
                        "type": "string",
                        "required": "no",
                        "description": "Status of the job; one of: running, success, failed, canceled\n"
                    }
                ]
            },
            {
                "title": "list-projects-runners",
                "description": "List all runners (specific and shared) available in the project. Shared runners\nare listed if at least one shared runner is defined.",
                "api": [
                    "GET /projects/:id/runners",
                    "GET /projects/:id/runners?scope=active",
                    "GET /projects/:id/runners?type=project_type",
                    "GET /projects/:id/runners?status=active"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Deprecated: Use type or status instead. The scope of specific runners to show, one of: active, paused, online, offline; showing all runners if none provided"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "The type of runners to show, one of: instance_type, group_type, project_type\n"
                    },
                    {
                        "attribute": "status",
                        "type": "string",
                        "required": "no",
                        "description": "The status of runners to show, one of: active, paused, online, offline\n"
                    }
                ]
            },
            {
                "title": "enable-a-runner-in-project",
                "description": "Enable an available specific runner in the project.",
                "api": [
                    "POST /projects/:id/runners"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "runner_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a runner"
                    }
                ]
            },
            {
                "title": "disable-a-runner-from-project",
                "description": "Disable a specific runner from the project. It works only if the project isn’t\nthe only project associated with the specified runner. If so, an error is\nreturned. Use the Remove a runner call instead.",
                "api": [
                    "DELETE /projects/:id/runners/:runner_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "runner_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a runner"
                    }
                ]
            },
            {
                "title": "register-a-new-runner",
                "description": "Register a new Runner for the instance.",
                "api": [
                    "POST /runners"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "yes",
                        "description": "Registration token (Read how to obtain a token)"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Runner’s description"
                    },
                    {
                        "attribute": "info",
                        "type": "hash",
                        "required": "no",
                        "description": "Runner’s metadata"
                    },
                    {
                        "attribute": "active",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether the Runner is active"
                    },
                    {
                        "attribute": "locked",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether the Runner should be locked for current project"
                    },
                    {
                        "attribute": "run_untagged",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether the Runner should handle untagged jobs"
                    },
                    {
                        "attribute": "tag_list",
                        "type": "Array[String]",
                        "required": "no",
                        "description": "List of Runner’s tags"
                    },
                    {
                        "attribute": "maximum_timeout",
                        "type": "integer",
                        "required": "no",
                        "description": "Maximum timeout set when this Runner will handle the job"
                    }
                ]
            },
            {
                "title": "delete-a-registered-runner",
                "description": "Deletes a registed Runner.",
                "api": [
                    "DELETE /runners"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "yes",
                        "description": "Runner’s authentication token"
                    }
                ]
            },
            {
                "title": "verify-authentication-for-a-registered-runner",
                "description": "Validates authentication credentials for a registered Runner.",
                "api": [
                    "POST /runners/verify"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "yes",
                        "description": "Runner’s authentication token"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/project_snippets.html",
        "urlPart": "project_snippets.html",
        "allEntries": [
            {
                "title": "project-snippets",
                "description": "Snippets in GitLab can be either private, internal or public.\nYou can set it with the visibility field in the snippet.",
                "api": [
                    "GET /projects/:id/snippets"
                ],
                "params": [
                    {
                        "attribute": "private",
                        "type": "The snippet is visible only the snippet creator"
                    },
                    {
                        "attribute": "internal",
                        "type": "The snippet is visible for any logged in user"
                    },
                    {
                        "attribute": "public",
                        "type": "The snippet can be accessed without any authentication"
                    }
                ]
            },
            {
                "title": "snippet-visibility-level",
                "description": "Snippets in GitLab can be either private, internal or public.\nYou can set it with the visibility field in the snippet.",
                "api": [
                    "GET /projects/:id/snippets"
                ],
                "params": [
                    {
                        "attribute": "private",
                        "type": "The snippet is visible only the snippet creator"
                    },
                    {
                        "attribute": "internal",
                        "type": "The snippet is visible for any logged in user"
                    },
                    {
                        "attribute": "public",
                        "type": "The snippet can be accessed without any authentication"
                    }
                ]
            },
            {
                "title": "list-snippets",
                "description": "Get a list of project snippets.",
                "api": [
                    "GET /projects/:id/snippets"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "single-snippet",
                "description": "Get a single project snippet.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-new-snippet",
                "description": "Creates a new project snippet. The user must have permission to create new snippets.",
                "api": [
                    "POST /projects/:id/snippets"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "update-snippet",
                "description": "Updates an existing project snippet. The user must have permission to change an existing snippet.",
                "api": [
                    "PUT /projects/:id/snippets/:snippet_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "delete-snippet",
                "description": "Deletes an existing project snippet. This returns a 204 No Content status code if the operation was successfully or 404 if the resource was not found.",
                "api": [
                    "DELETE /projects/:id/snippets/:snippet_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "snippet-content",
                "description": "Returns the raw project snippet as plain text.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/raw"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-user-agent-details",
                "description": "Available only for admins.",
                "api": [
                    "GET /projects/:id/snippets/:snippet_id/user_agent_detail"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "Integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "snippet_id",
                        "type": "Integer",
                        "required": "yes",
                        "description": "The ID of a snippet"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/todos.html",
        "urlPart": "todos.html",
        "allEntries": [
            {
                "title": "todos-api",
                "description": "Returns a list of todos. When no filter is applied, it returns all pending todos\nfor the current user. Different filters allow the user to precise the request.",
                "api": [
                    "GET /todos"
                ],
                "params": [
                    {
                        "attribute": "action",
                        "type": "string",
                        "required": "no",
                        "description": "The action to be filtered. Can be assigned, mentioned, build_failed, marked, approval_required, unmergeable or directly_addressed."
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of an author"
                    },
                    {
                        "attribute": "project_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "group_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a group"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "The state of the todo. Can be either pending or done\n"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "The type of a todo. Can be either Issue or MergeRequest\n"
                    }
                ]
            },
            {
                "title": "get-a-list-of-todos",
                "description": "Returns a list of todos. When no filter is applied, it returns all pending todos\nfor the current user. Different filters allow the user to precise the request.",
                "api": [
                    "GET /todos"
                ],
                "params": [
                    {
                        "attribute": "action",
                        "type": "string",
                        "required": "no",
                        "description": "The action to be filtered. Can be assigned, mentioned, build_failed, marked, approval_required, unmergeable or directly_addressed."
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of an author"
                    },
                    {
                        "attribute": "project_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "group_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a group"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "The state of the todo. Can be either pending or done\n"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "The type of a todo. Can be either Issue or MergeRequest\n"
                    }
                ]
            },
            {
                "title": "mark-a-todo-as-done",
                "description": "Marks a single pending todo given by its ID for the current user as done. The\ntodo marked as done is returned in the response.",
                "api": [
                    "POST /todos/:id/mark_as_done"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a todo"
                    }
                ]
            },
            {
                "title": "mark-all-todos-as-done",
                "description": "Marks all pending todos for the current user as done. It returns the HTTP status code 204 with an empty response.",
                "api": [
                    "POST /todos/mark_as_done"
                ],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/protected_tags.html",
        "urlPart": "protected_tags.html",
        "allEntries": [
            {
                "title": "protected-tags-api",
                "description": "Valid access levels",
                "api": [
                    "GET /projects/:id/protected_tags"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-protected-tags",
                "description": "Gets a list of protected tags from a project.\nThis function takes pagination parameters page and per_page to restrict the list of protected tags.",
                "api": [
                    "GET /projects/:id/protected_tags"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "get-a-single-protected-tag-or-wildcard-protected-tag",
                "description": "Gets a single protected tag or wildcard protected tag.\nThe pagination parameters page and per_page can be used to restrict the list of protected tags.",
                "api": [
                    "GET /projects/:id/protected_tags/:name"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the tag or wildcard"
                    }
                ]
            },
            {
                "title": "protect-repository-tags",
                "description": "Protects a single repository tag or several project repository\ntags using a wildcard protected tag.",
                "api": [
                    "POST /projects/:id/protected_tags"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the tag or wildcard"
                    },
                    {
                        "attribute": "create_access_level",
                        "type": "string",
                        "required": "no",
                        "description": "Access levels allowed to create (defaults: 40, maintainer access level)"
                    }
                ]
            },
            {
                "title": "unprotect-repository-tags",
                "description": "Unprotects the given protected tag or wildcard protected tag.",
                "api": [
                    "DELETE /projects/:id/protected_tags/:name"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the tag"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/members.html",
        "urlPart": "members.html",
        "allEntries": [
            {
                "title": "group-and-project-members-api",
                "description": "Valid access levels",
                "api": [
                    "10 => Guest access",
                    "20 => Reporter access",
                    "30 => Developer access",
                    "40 => Maintainer access",
                    "50 => Owner access # Only valid for groups"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "query",
                        "type": "string",
                        "required": "no",
                        "description": "A query string to search for members"
                    }
                ]
            },
            {
                "title": "list-all-members-of-a-group-or-project",
                "description": "Gets a list of group or project members viewable by the authenticated user.\nReturns only direct members and not inherited members through ancestors groups.",
                "api": [
                    "GET /groups/:id/members",
                    "GET /projects/:id/members"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "query",
                        "type": "string",
                        "required": "no",
                        "description": "A query string to search for members"
                    }
                ]
            },
            {
                "title": "list-all-members-of-a-group-or-project-including-inherited-members",
                "description": "Gets a list of group or project members viewable by the authenticated user, including inherited members through ancestor groups.\nReturns multiple times the same user (with different member attributes) when the user is a member of the project/group and of one or more ancestor group.",
                "api": [
                    "GET /groups/:id/members/all",
                    "GET /projects/:id/members/all"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "query",
                        "type": "string",
                        "required": "no",
                        "description": "A query string to search for members"
                    }
                ]
            },
            {
                "title": "get-a-member-of-a-group-or-project",
                "description": "Gets a member of a group or project.",
                "api": [
                    "GET /groups/:id/members/:user_id",
                    "GET /projects/:id/members/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the member"
                    }
                ]
            },
            {
                "title": "add-a-member-to-a-group-or-project",
                "description": "Adds a member to a group or project.",
                "api": [
                    "POST /groups/:id/members",
                    "POST /projects/:id/members"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the new member"
                    },
                    {
                        "attribute": "access_level",
                        "type": "integer",
                        "required": "yes",
                        "description": "A valid access level"
                    },
                    {
                        "attribute": "expires_at",
                        "type": "string",
                        "required": "no",
                        "description": "A date string in the format YEAR-MONTH-DAY"
                    }
                ]
            },
            {
                "title": "edit-a-member-of-a-group-or-project",
                "description": "Updates a member of a group or project.",
                "api": [
                    "PUT /groups/:id/members/:user_id",
                    "PUT /projects/:id/members/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the member"
                    },
                    {
                        "attribute": "access_level",
                        "type": "integer",
                        "required": "yes",
                        "description": "A valid access level"
                    },
                    {
                        "attribute": "expires_at",
                        "type": "string",
                        "required": "no",
                        "description": "A date string in the format YEAR-MONTH-DAY"
                    }
                ]
            },
            {
                "title": "remove-a-member-from-a-group-or-project",
                "description": "Removes a user from a group or project.",
                "api": [
                    "DELETE /groups/:id/members/:user_id",
                    "DELETE /projects/:id/members/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the member"
                    }
                ]
            },
            {
                "title": "give-a-group-access-to-a-project",
                "description": "Look at share project with group",
                "api": [],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/templates/licenses.html",
        "urlPart": "templates/licenses.html",
        "allEntries": [
            {
                "title": "licenses-api",
                "description": "Get all license templates.",
                "api": [
                    "GET /templates/licenses"
                ],
                "params": [
                    {
                        "attribute": "popular",
                        "type": "boolean",
                        "required": "no",
                        "description": "If passed, returns only popular licenses"
                    }
                ]
            },
            {
                "title": "list-license-templates",
                "description": "Get all license templates.",
                "api": [
                    "GET /templates/licenses"
                ],
                "params": [
                    {
                        "attribute": "popular",
                        "type": "boolean",
                        "required": "no",
                        "description": "If passed, returns only popular licenses"
                    }
                ]
            },
            {
                "title": "single-license-template",
                "description": "Get a single license template. You can pass parameters to replace the license\nplaceholder.",
                "api": [
                    "GET /templates/licenses/:key"
                ],
                "params": [
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the license template"
                    },
                    {
                        "attribute": "project",
                        "type": "string",
                        "required": "no",
                        "description": "The copyrighted project name"
                    },
                    {
                        "attribute": "fullname",
                        "type": "string",
                        "required": "no",
                        "description": "The full-name of the copyright holder"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/protected_branches.html",
        "urlPart": "protected_branches.html",
        "allEntries": [
            {
                "title": "protected-branches-api",
                "description": "Valid access levels",
                "api": [
                    "GET /projects/:id/protected_branches"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-protected-branches",
                "description": "Gets a list of protected branches from a project.",
                "api": [
                    "GET /projects/:id/protected_branches"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "get-a-single-protected-branch-or-wildcard-protected-branch",
                "description": "Gets a single protected branch or wildcard protected branch.",
                "api": [
                    "GET /projects/:id/protected_branches/:name"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch or wildcard"
                    }
                ]
            },
            {
                "title": "protect-repository-branches",
                "description": "Protects a single repository branch or several project repository\nbranches using a wildcard protected branch.",
                "api": [
                    "POST /projects/:id/protected_branches"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch or wildcard"
                    },
                    {
                        "attribute": "push_access_level",
                        "type": "string",
                        "required": "no",
                        "description": "Access levels allowed to push (defaults: 40, maintainer access level)"
                    },
                    {
                        "attribute": "merge_access_level",
                        "type": "string",
                        "required": "no",
                        "description": "Access levels allowed to merge (defaults: 40, maintainer access level)"
                    },
                    {
                        "attribute": "unprotect_access_level",
                        "type": "string",
                        "required": "no",
                        "description": "Access levels allowed to unprotect (defaults: 40, maintainer access level)"
                    },
                    {
                        "attribute": "allowed_to_push",
                        "type": "array",
                        "required": "no",
                        "description": "Array of access levels allowed to push, with each described by a hash"
                    },
                    {
                        "attribute": "allowed_to_merge",
                        "type": "array",
                        "required": "no",
                        "description": "Array of access levels allowed to merge, with each described by a hash"
                    },
                    {
                        "attribute": "allowed_to_unprotect",
                        "type": "array",
                        "required": "no",
                        "description": "Array of access levels allowed to unprotect, with each described by a hash"
                    }
                ]
            },
            {
                "title": "example-with-user--group-level-access",
                "description": "Elements in the allowed_to_push / allowed_to_merge / allowed_to_unprotect array should take the\nform {user_id: integer}, {group_id: integer} or {access_level: integer}. Each user must have access to the project and each group must have this project shared. These access levels allow more granular control over protected branch access and were added to the API in  in GitLab 10.3 EE.",
                "api": [
                    "curl --request POST --header \"PRIVATE-TOKEN: 9koXpg98eAheJpvBs5tK\" 'https://gitlab.example.com/api/v4/projects/5/protected_branches?name=*-stable&allowed_to_push%5B%5D%5Buser_id%5D=1'"
                ],
                "params": []
            },
            {
                "title": "unprotect-repository-branches",
                "description": "Unprotects the given protected branch or wildcard protected branch.",
                "api": [
                    "DELETE /projects/:id/protected_branches/:name"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the branch"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/system_hooks.html",
        "urlPart": "system_hooks.html",
        "allEntries": [
            {
                "title": "system-hooks-api",
                "description": "All methods require administrator authorization.",
                "api": [
                    "GET /hooks"
                ],
                "params": []
            },
            {
                "title": "list-system-hooks",
                "description": "Get a list of all system hooks.",
                "api": [
                    "GET /hooks"
                ],
                "params": []
            },
            {
                "title": "add-new-system-hook",
                "description": "Add a new system hook.",
                "api": [
                    "POST /hooks"
                ],
                "params": [
                    {
                        "attribute": "url",
                        "type": "string",
                        "required": "yes",
                        "description": "The hook URL"
                    },
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "no",
                        "description": "Secret token to validate received payloads; this will not be returned in the response"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "When true, the hook will fire on push events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "When true, the hook will fire on new tags being pushed"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on merge requests events"
                    },
                    {
                        "attribute": "repository_update_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on repository update events"
                    },
                    {
                        "attribute": "enable_ssl_verification",
                        "type": "boolean",
                        "required": "no",
                        "description": "Do SSL verification when triggering the hook"
                    }
                ]
            },
            {
                "title": "test-system-hook",
                "description": "Example request:",
                "api": [
                    "GET /hooks/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the hook"
                    }
                ]
            },
            {
                "title": "delete-system-hook",
                "description": "Deletes a system hook.",
                "api": [
                    "DELETE /hooks/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the hook"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/sidekiq_metrics.html",
        "urlPart": "sidekiq_metrics.html",
        "allEntries": [
            {
                "title": "sidekiq-metrics-api",
                "description": "This API endpoint allows you to retrieve some information about the current state\nof Sidekiq, its jobs, queues, and processes.",
                "api": [
                    "GET /sidekiq/queue_metrics"
                ],
                "params": []
            },
            {
                "title": "get-the-current-queue-metrics",
                "description": "List information about all the registered queues, their backlog and their\nlatency.",
                "api": [
                    "GET /sidekiq/queue_metrics"
                ],
                "params": []
            },
            {
                "title": "get-the-current-process-metrics",
                "description": "List information about all the Sidekiq workers registered to process your queues.",
                "api": [
                    "GET /sidekiq/process_metrics"
                ],
                "params": []
            },
            {
                "title": "get-the-current-job-statistics",
                "description": "List information about the jobs that Sidekiq has performed.",
                "api": [
                    "GET /sidekiq/job_stats"
                ],
                "params": []
            },
            {
                "title": "get-a-compound-response-of-all-the-previously-mentioned-metrics",
                "description": "List all the currently available information about Sidekiq.",
                "api": [
                    "GET /sidekiq/compound_metrics"
                ],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/repositories.html",
        "urlPart": "repositories.html",
        "allEntries": [
            {
                "title": "repositories-api",
                "description": "Get a list of repository files and directories in a project. This endpoint can\nbe accessed without authentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/tree"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "list-repository-tree",
                "description": "Get a list of repository files and directories in a project. This endpoint can\nbe accessed without authentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/tree"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-a-blob-from-repository",
                "description": "Allows you to receive information about blob in repository like size and\ncontent. Note that blob content is Base64 encoded. This endpoint can be accessed\nwithout authentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/blobs/:sha"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "raw-blob-content",
                "description": "Get the raw file contents for a blob by blob SHA. This endpoint can be accessed\nwithout authentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/blobs/:sha/raw"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-file-archive",
                "description": "Get an archive of the repository. This endpoint can be accessed without\nauthentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/archive"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "compare-branches-tags-or-commits",
                "description": "This endpoint can be accessed without authentication if the repository is\npublicly accessible.",
                "api": [
                    "GET /projects/:id/repository/compare"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "contributors",
                "description": "Get repository contributors list. This endpoint can be accessed without\nauthentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/contributors"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "merge-base",
                "description": "Get the common ancestor for 2 refs (commit SHAs, branch names or tags).",
                "api": [
                    "GET /projects/:id/repository/merge_base"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "refs",
                        "type": "array",
                        "required": "yes",
                        "description": "The refs to find the common ancestor of, multiple refs can be passed"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/project_templates.html",
        "urlPart": "project_templates.html",
        "allEntries": [
            {
                "title": "project-templates-api",
                "description": "This API is a project-specific version of these endpoints:",
                "api": [
                    "GET /projects/:id/templates/:type"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "get-all-templates-of-a-particular-type",
                "description": "Example response (licenses):",
                "api": [
                    "GET /projects/:id/templates/:type"
                ],
                "params": [
                    {
                        "attribute": "id ",
                        "type": "integer / string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "yes",
                        "description": "The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses) of the template"
                    }
                ]
            },
            {
                "title": "get-one-template-of-a-particular-type",
                "description": "Example response (Dockerfile):",
                "api": [
                    "GET /projects/:id/templates/:type/:key"
                ],
                "params": [
                    {
                        "attribute": "id ",
                        "type": "integer / string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "yes",
                        "description": "The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses) of the template"
                    },
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the template, as obtained from the collection endpoint"
                    },
                    {
                        "attribute": "project",
                        "type": "string",
                        "required": "no",
                        "description": "The project name to use when expanding placeholders in the template. Only affects licenses"
                    },
                    {
                        "attribute": "fullname",
                        "type": "string",
                        "required": "no",
                        "description": "The full name of the copyright holder to use when expanding placeholders in the template. Only affects licenses"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/lint.html",
        "urlPart": "lint.html",
        "allEntries": [
            {
                "title": "validate-the-gitlab-ciyml-api",
                "description": "Checks if your .gitlab-ci.yml file is valid.",
                "api": [
                    "POST /lint"
                ],
                "params": [
                    {
                        "attribute": "content",
                        "type": "string",
                        "required": "yes",
                        "description": "the .gitlab-ci.yaml content"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/search.html",
        "urlPart": "search.html",
        "allEntries": [
            {
                "title": "global-search-api",
                "description": "Search globally across the GitLab instance.",
                "api": [
                    "GET /search"
                ],
                "params": [
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "yes",
                        "description": "The scope to search in"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "yes",
                        "description": "The search query"
                    }
                ]
            },
            {
                "title": "group-search-api",
                "description": "Search within the specified group.",
                "api": [
                    "GET /groups/:id/search"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "yes",
                        "description": "The scope to search in"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "yes",
                        "description": "The search query"
                    }
                ]
            },
            {
                "title": "project-search-api",
                "description": "Search within the specified project.",
                "api": [
                    "GET /projects/:id/search"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "yes",
                        "description": "The scope to search in"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "yes",
                        "description": "The search query"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/settings.html",
        "urlPart": "settings.html",
        "allEntries": [
            {
                "title": "get-current-application-settings",
                "description": "List the current application settings\nof the GitLab instance.",
                "api": [
                    "GET /application/settings"
                ],
                "params": []
            },
            {
                "title": "change-application-settings",
                "description": "Use an API call to modify GitLab instance\napplication settings.",
                "api": [
                    "PUT /application/settings"
                ],
                "params": [
                    {
                        "attribute": "admin_notification_email",
                        "type": "string",
                        "required": "no",
                        "description": "Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area."
                    },
                    {
                        "attribute": "after_sign_out_path",
                        "type": "string",
                        "required": "no",
                        "description": "Where to redirect users after logout."
                    },
                    {
                        "attribute": "after_sign_up_text",
                        "type": "string",
                        "required": "no",
                        "description": "Text shown to the user after signing up"
                    },
                    {
                        "attribute": "akismet_api_key",
                        "type": "string",
                        "required": "required by: akismet_enabled\n",
                        "description": "API key for akismet spam protection."
                    },
                    {
                        "attribute": "akismet_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: akismet_api_key) Enable or disable akismet spam protection."
                    },
                    {
                        "attribute": "allow_group_owners_to_manage_ldap",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) Set to true to allow group owners to manage LDAP"
                    },
                    {
                        "attribute": "allow_local_requests_from_hooks_and_services",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow requests to the local network from hooks and services."
                    },
                    {
                        "attribute": "authorized_keys_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand."
                    },
                    {
                        "attribute": "auto_devops_domain",
                        "type": "string",
                        "required": "no",
                        "description": "Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages."
                    },
                    {
                        "attribute": "auto_devops_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable Auto DevOps for projects by default. It will automatically build, test, and deploy applications based on a predefined CI/CD configuration."
                    },
                    {
                        "attribute": "check_namespace_plan",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) Enabling this will make only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public."
                    },
                    {
                        "attribute": "clientside_sentry_dsn",
                        "type": "string",
                        "required": "required by: clientside_sentry_enabled\n",
                        "description": "Clientside Sentry Data Source Name."
                    },
                    {
                        "attribute": "clientside_sentry_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: clientside_sentry_dsn) Enable Sentry error reporting for the client side."
                    },
                    {
                        "attribute": "container_registry_token_expire_delay",
                        "type": "integer",
                        "required": "no",
                        "description": "Container Registry token duration in minutes."
                    },
                    {
                        "attribute": "default_artifacts_expire_in",
                        "type": "string",
                        "required": "no",
                        "description": "Set the default expiration time for each job’s artifacts."
                    },
                    {
                        "attribute": "default_branch_protection",
                        "type": "integer",
                        "required": "no",
                        "description": "Determine if developers can push to master. Can take: 0 (not protected, both developers and maintainers can push new commits, force push, or delete the branch), 1 (partially protected, developers and maintainers can push new commits, but cannot force push or delete the branch) or 2 (fully protected, developers cannot push new commits, but maintainers can; no-one can force push or delete the branch) as a parameter. Default is 2."
                    },
                    {
                        "attribute": "default_group_visibility",
                        "type": "string",
                        "required": "no",
                        "description": "What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private."
                    },
                    {
                        "attribute": "default_project_visibility",
                        "type": "string",
                        "required": "no",
                        "description": "What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private."
                    },
                    {
                        "attribute": "default_projects_limit",
                        "type": "integer",
                        "required": "no",
                        "description": "Project limit per user. Default is 100000."
                    },
                    {
                        "attribute": "default_snippet_visibility",
                        "type": "string",
                        "required": "no",
                        "description": "What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private."
                    },
                    {
                        "attribute": "disabled_oauth_sign_in_sources",
                        "type": "array of strings",
                        "required": "no",
                        "description": "Disabled OAuth sign-in sources."
                    },
                    {
                        "attribute": "domain_blacklist",
                        "type": "array of strings",
                        "required": "required by: domain_blacklist_enabled\n",
                        "description": "Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com."
                    },
                    {
                        "attribute": "domain_blacklist_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: domain_blacklist) Allows blocking sign-ups from emails from specific domains."
                    },
                    {
                        "attribute": "domain_whitelist",
                        "type": "array of strings",
                        "required": "no",
                        "description": "Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction."
                    },
                    {
                        "attribute": "dsa_key_restriction",
                        "type": "integer",
                        "required": "no",
                        "description": "The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys."
                    },
                    {
                        "attribute": "ecdsa_key_restriction",
                        "type": "integer",
                        "required": "no",
                        "description": "The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys."
                    },
                    {
                        "attribute": "ed25519_key_restriction",
                        "type": "integer",
                        "required": "no",
                        "description": "The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys."
                    },
                    {
                        "attribute": "elasticsearch_aws",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) Enable the use of AWS hosted Elasticsearch"
                    },
                    {
                        "attribute": "elasticsearch_aws_access_key",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) AWS IAM access key"
                    },
                    {
                        "attribute": "elasticsearch_aws_region",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) The AWS region the elasticsearch domain is configured"
                    },
                    {
                        "attribute": "elasticsearch_aws_secret_access_key",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) AWS IAM secret access key"
                    },
                    {
                        "attribute": "elasticsearch_experimental_indexer",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) Use the experimental elasticsearch indexer. More info: https://gitlab.com/gitlab-org/gitlab-elasticsearch-indexer\n"
                    },
                    {
                        "attribute": "elasticsearch_indexing",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) Enable Elasticsearch indexing"
                    },
                    {
                        "attribute": "elasticsearch_search",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) Enable Elasticsearch search"
                    },
                    {
                        "attribute": "elasticsearch_url",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) The url to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (e.g., “http://localhost:9200, http://localhost:9201\"). If your Elasticsearch instance is password protected, pass the username:password in the URL (e.g., http://<username>:<password>@<elastic_host>:9200/)."
                    },
                    {
                        "attribute": "email_additional_text",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) Additional text added to the bottom of every email for legal/auditing/compliance reasons"
                    },
                    {
                        "attribute": "email_author_in_body",
                        "type": "boolean",
                        "required": "no",
                        "description": "Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead."
                    },
                    {
                        "attribute": "enabled_git_access_protocol",
                        "type": "string",
                        "required": "no",
                        "description": "Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols."
                    },
                    {
                        "attribute": "enforce_terms",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: terms) Enforce application ToS to all users."
                    },
                    {
                        "attribute": "external_auth_client_cert",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) (If enabled, requires: external_auth_client_key) The certificate to use to authenticate with the external authorization service"
                    },
                    {
                        "attribute": "external_auth_client_key",
                        "type": "string",
                        "required": "required by: external_auth_client_cert\n",
                        "description": "\n(Premium) Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored"
                    },
                    {
                        "attribute": "external_auth_client_key_pass",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) Passphrase to use for the private key when authenticating with the external service this is encrypted when stored"
                    },
                    {
                        "attribute": "external_authorization_service_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) (If enabled, requires: external_authorization_service_default_label, external_authorization_service_timeout and external_authorization_service_url )  Enable using an external authorization service for accessing projects"
                    },
                    {
                        "attribute": "external_authorization_service_default_label",
                        "type": "string",
                        "required": "required by: external_authorization_service_enabled\n",
                        "description": "\n(Premium) The default classification label to use when requesting authorization and no classification label has been specified on the project"
                    },
                    {
                        "attribute": "external_authorization_service_timeout",
                        "type": "float",
                        "required": "required by: external_authorization_service_enabled\n",
                        "description": "\n(Premium) The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001)"
                    },
                    {
                        "attribute": "external_authorization_service_url",
                        "type": "string",
                        "required": "required by: external_authorization_service_enabled\n",
                        "description": "\n(Premium) URL to which authorization requests will be directed"
                    },
                    {
                        "attribute": "file_template_project_id",
                        "type": "integer",
                        "required": "no",
                        "description": "\n(Premium) The ID of a project to load custom file templates from"
                    },
                    {
                        "attribute": "geo_status_timeout",
                        "type": "integer",
                        "required": "no",
                        "description": "\n(Premium) The amount of seconds after which a request to get a secondary node status will time out."
                    },
                    {
                        "attribute": "gitaly_timeout_default",
                        "type": "integer",
                        "required": "no",
                        "description": "Default Gitaly timeout, in seconds. This timeout is not enforced for git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts."
                    },
                    {
                        "attribute": "gitaly_timeout_fast",
                        "type": "integer",
                        "required": "no",
                        "description": "Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts."
                    },
                    {
                        "attribute": "gitaly_timeout_medium",
                        "type": "integer",
                        "required": "no",
                        "description": "Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts."
                    },
                    {
                        "attribute": "gravatar_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable Gravatar."
                    },
                    {
                        "attribute": "hashed_storage_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (EXPERIMENTAL)"
                    },
                    {
                        "attribute": "help_page_hide_commercial_content",
                        "type": "boolean",
                        "required": "no",
                        "description": "Hide marketing-related entries from help."
                    },
                    {
                        "attribute": "help_page_support_url",
                        "type": "string",
                        "required": "no",
                        "description": "Alternate support URL for help page."
                    },
                    {
                        "attribute": "help_page_text",
                        "type": "string",
                        "required": "no",
                        "description": "Custom text displayed on the help page."
                    },
                    {
                        "attribute": "help_text",
                        "type": "string",
                        "required": "no",
                        "description": "\n(Premium) GitLab server administrator information"
                    },
                    {
                        "attribute": "hide_third_party_offers",
                        "type": "boolean",
                        "required": "no",
                        "description": "Do not display offers from third parties within GitLab."
                    },
                    {
                        "attribute": "home_page_url",
                        "type": "string",
                        "required": "no",
                        "description": "Redirect to this URL when not logged in."
                    },
                    {
                        "attribute": "housekeeping_bitmaps_enabled",
                        "type": "boolean",
                        "required": "required by: housekeeping_enabled\n",
                        "description": "Enable Git pack file bitmap creation."
                    },
                    {
                        "attribute": "housekeeping_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: housekeeping_bitmaps_enabled, housekeeping_full_repack_period, housekeeping_gc_period, and housekeeping_incremental_repack_period) Enable or disable git housekeeping."
                    },
                    {
                        "attribute": "housekeeping_full_repack_period",
                        "type": "integer",
                        "required": "required by: housekeeping_enabled\n",
                        "description": "Number of Git pushes after which an incremental git repack is run."
                    },
                    {
                        "attribute": "housekeeping_gc_period",
                        "type": "integer",
                        "required": "required by: housekeeping_enabled\n",
                        "description": "Number of Git pushes after which git gc is run."
                    },
                    {
                        "attribute": "housekeeping_incremental_repack_period",
                        "type": "integer",
                        "required": "required by: housekeeping_enabled\n",
                        "description": "Number of Git pushes after which an incremental git repack is run."
                    },
                    {
                        "attribute": "html_emails_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable HTML emails."
                    },
                    {
                        "attribute": "instance_statistics_visibility_private",
                        "type": "boolean",
                        "required": "no",
                        "description": "When set to true Instance statistics will only be available to admins."
                    },
                    {
                        "attribute": "import_sources",
                        "type": "array of strings",
                        "required": "no",
                        "description": "Sources to allow project import from, possible values: github, bitbucket, gitlab, google_code, fogbugz, git, and gitlab_project."
                    },
                    {
                        "attribute": "max_artifacts_size",
                        "type": "integer",
                        "required": "no",
                        "description": "Maximum artifacts size in MB"
                    },
                    {
                        "attribute": "max_attachment_size",
                        "type": "integer",
                        "required": "no",
                        "description": "Limit attachment size in MB"
                    },
                    {
                        "attribute": "max_pages_size",
                        "type": "integer",
                        "required": "no",
                        "description": "Maximum size of pages repositories in MB"
                    },
                    {
                        "attribute": "metrics_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: metrics_host, metrics_method_call_threshold, metrics_packet_size, metrics_pool_size, metrics_port, metrics_sample_interval and metrics_timeout) Enable influxDB metrics."
                    },
                    {
                        "attribute": "metrics_host",
                        "type": "string",
                        "required": "required by: metrics_enabled\n",
                        "description": "InfluxDB host."
                    },
                    {
                        "attribute": "metrics_method_call_threshold",
                        "type": "integer",
                        "required": "required by: metrics_enabled\n",
                        "description": "A method call is only tracked when it takes longer than the given amount of milliseconds."
                    },
                    {
                        "attribute": "metrics_packet_size",
                        "type": "integer",
                        "required": "required by: metrics_enabled\n",
                        "description": "The amount of datapoints to send in a single UDP packet."
                    },
                    {
                        "attribute": "metrics_pool_size",
                        "type": "integer",
                        "required": "required by: metrics_enabled\n",
                        "description": "The amount of InfluxDB connections to keep open."
                    },
                    {
                        "attribute": "metrics_port",
                        "type": "integer",
                        "required": "required by: metrics_enabled\n",
                        "description": "The UDP port to use for connecting to InfluxDB."
                    },
                    {
                        "attribute": "metrics_sample_interval",
                        "type": "integer",
                        "required": "required by: metrics_enabled\n",
                        "description": "The sampling interval in seconds."
                    },
                    {
                        "attribute": "metrics_timeout",
                        "type": "integer",
                        "required": "required by: metrics_enabled\n",
                        "description": "The amount of seconds after which InfluxDB will time out."
                    },
                    {
                        "attribute": "mirror_available",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow mirrors to be set up for projects. If disabled, only admins will be able to set up mirrors in projects."
                    },
                    {
                        "attribute": "mirror_capacity_threshold",
                        "type": "integer",
                        "required": "no",
                        "description": "\n(Premium) Minimum capacity to be available before scheduling more mirrors preemptively"
                    },
                    {
                        "attribute": "mirror_max_capacity",
                        "type": "integer",
                        "required": "no",
                        "description": "\n(Premium) Maximum number of mirrors that can be synchronizing at the same time."
                    },
                    {
                        "attribute": "mirror_max_delay",
                        "type": "integer",
                        "required": "no",
                        "description": "\n(Premium) Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize."
                    },
                    {
                        "attribute": "pages_domain_verification_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled."
                    },
                    {
                        "attribute": "password_authentication_enabled_for_git",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true."
                    },
                    {
                        "attribute": "password_authentication_enabled_for_web",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable authentication for the web interface via a GitLab account password. Default is true."
                    },
                    {
                        "attribute": "performance_bar_allowed_group_id",
                        "type": "string",
                        "required": "no",
                        "description": "(Deprecated: Use performance_bar_allowed_group_path instead) Path of the group that is allowed to toggle the performance bar."
                    },
                    {
                        "attribute": "performance_bar_allowed_group_path",
                        "type": "string",
                        "required": "no",
                        "description": "Path of the group that is allowed to toggle the performance bar."
                    },
                    {
                        "attribute": "performance_bar_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(Deprecated: Pass performance_bar_allowed_group_path: nil instead) Allow enabling the performance bar."
                    },
                    {
                        "attribute": "plantuml_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false."
                    },
                    {
                        "attribute": "plantuml_url",
                        "type": "string",
                        "required": "required by: plantuml_enabled\n",
                        "description": "The PlantUML instance URL for integration."
                    },
                    {
                        "attribute": "polling_interval_multiplier",
                        "type": "decimal",
                        "required": "no",
                        "description": "Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling."
                    },
                    {
                        "attribute": "project_export_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable project export."
                    },
                    {
                        "attribute": "prometheus_metrics_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable prometheus metrics."
                    },
                    {
                        "attribute": "pseudonymizer_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) When enabled, GitLab will run a background job that will produce pseudonymized CSVs of the GitLab database that will be uploaded to your configured object storage directory."
                    },
                    {
                        "attribute": "recaptcha_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: recaptcha_private_key and recaptcha_site_key) Enable recaptcha."
                    },
                    {
                        "attribute": "recaptcha_private_key",
                        "type": "string",
                        "required": "required by: recaptcha_enabled\n",
                        "description": "Private key for recaptcha."
                    },
                    {
                        "attribute": "recaptcha_site_key",
                        "type": "string",
                        "required": "required by: recaptcha_enabled\n",
                        "description": "Site key for recaptcha."
                    },
                    {
                        "attribute": "repository_checks_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "GitLab will periodically run git fsck in all project and wiki repositories to look for silent disk corruption issues."
                    },
                    {
                        "attribute": "repository_size_limit",
                        "type": "integer",
                        "required": "no",
                        "description": "\n(Premium) Size limit per repository (MB)"
                    },
                    {
                        "attribute": "repository_storages",
                        "type": "array of strings",
                        "required": "no",
                        "description": "A list of names of enabled storage paths, taken from gitlab.yml. New projects will be created in one of these stores, chosen at random."
                    },
                    {
                        "attribute": "require_two_factor_authentication",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: two_factor_grace_period) Require all users to set up Two-factor authentication."
                    },
                    {
                        "attribute": "restricted_visibility_levels",
                        "type": "array of strings",
                        "required": "no",
                        "description": "Selected levels cannot be used by non-admin users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction."
                    },
                    {
                        "attribute": "rsa_key_restriction",
                        "type": "integer",
                        "required": "no",
                        "description": "The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys."
                    },
                    {
                        "attribute": "send_user_confirmation_email",
                        "type": "boolean",
                        "required": "no",
                        "description": "Send confirmation email on sign-up."
                    },
                    {
                        "attribute": "sentry_dsn",
                        "type": "string",
                        "required": "required by: sentry_enabled\n",
                        "description": "Sentry Data Source Name."
                    },
                    {
                        "attribute": "sentry_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: sentry_dsn) Sentry is an error reporting and logging tool which is currently not shipped with GitLab, available at https://getsentry.com."
                    },
                    {
                        "attribute": "session_expire_delay",
                        "type": "integer",
                        "required": "no",
                        "description": "Session duration in minutes. GitLab restart is required to apply changes"
                    },
                    {
                        "attribute": "shared_runners_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: shared_runners_text and shared_runners_minutes) Enable shared runners for new projects."
                    },
                    {
                        "attribute": "shared_runners_minutes",
                        "type": "integer",
                        "required": "required by: shared_runners_enabled\n",
                        "description": "\n(Premium) Set the maximum number of pipeline minutes that a group can use on shared Runners per month."
                    },
                    {
                        "attribute": "shared_runners_text",
                        "type": "string",
                        "required": "required by: shared_runners_enabled\n",
                        "description": "Shared runners text."
                    },
                    {
                        "attribute": "sign_in_text",
                        "type": "string",
                        "required": "no",
                        "description": "Text on the login page."
                    },
                    {
                        "attribute": "signin_enabled",
                        "type": "string",
                        "required": "no",
                        "description": "(Deprecated: Use password_authentication_enabled_for_web instead) Flag indicating if password authentication is enabled for the web interface."
                    },
                    {
                        "attribute": "signup_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable registration. Default is true."
                    },
                    {
                        "attribute": "slack_app_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "\n(Premium) (If enabled, requires: slack_app_id, slack_app_secret and slack_app_secret) Enable Slack app."
                    },
                    {
                        "attribute": "slack_app_id",
                        "type": "string",
                        "required": "required by: slack_app_enabled\n",
                        "description": "\n(Premium) The app id of the Slack-app."
                    },
                    {
                        "attribute": "slack_app_secret",
                        "type": "string",
                        "required": "required by: slack_app_enabled\n",
                        "description": "\n(Premium) The app secret of the Slack-app."
                    },
                    {
                        "attribute": "slack_app_verification_token",
                        "type": "string",
                        "required": "required by: slack_app_enabled\n",
                        "description": "\n(Premium) The verification token of the Slack-app."
                    },
                    {
                        "attribute": "terminal_max_session_time",
                        "type": "integer",
                        "required": "no",
                        "description": "Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time."
                    },
                    {
                        "attribute": "terms",
                        "type": "text",
                        "required": "required by: enforce_terms\n",
                        "description": "(Required by: enforce_terms) Markdown content for the ToS."
                    },
                    {
                        "attribute": "throttle_authenticated_api_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: throttle_authenticated_api_period_in_seconds and throttle_authenticated_api_requests_per_period) Enable authenticated API request rate limit. Helps reduce request volume (e.g. from crawlers or abusive bots)."
                    },
                    {
                        "attribute": "throttle_authenticated_api_period_in_seconds",
                        "type": "integer",
                        "required": "required by: throttle_authenticated_api_enabled\n",
                        "description": "Rate limit period in seconds."
                    },
                    {
                        "attribute": "throttle_authenticated_api_requests_per_period",
                        "type": "integer",
                        "required": "required by: throttle_authenticated_api_enabled\n",
                        "description": "Max requests per period per user."
                    },
                    {
                        "attribute": "throttle_authenticated_web_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: throttle_authenticated_web_period_in_seconds and throttle_authenticated_web_requests_per_period) Enable authenticated web request rate limit. Helps reduce request volume (e.g. from crawlers or abusive bots)."
                    },
                    {
                        "attribute": "throttle_authenticated_web_period_in_seconds",
                        "type": "integer",
                        "required": "required by: throttle_authenticated_web_enabled\n",
                        "description": "Rate limit period in seconds."
                    },
                    {
                        "attribute": "throttle_authenticated_web_requests_per_period",
                        "type": "integer",
                        "required": "required by: throttle_authenticated_web_enabled\n",
                        "description": "Max requests per period per user."
                    },
                    {
                        "attribute": "throttle_unauthenticated_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: throttle_unauthenticated_period_in_seconds and throttle_unauthenticated_requests_per_period) Enable unauthenticated request rate limit. Helps reduce request volume (e.g. from crawlers or abusive bots)."
                    },
                    {
                        "attribute": "throttle_unauthenticated_period_in_seconds",
                        "type": "integer",
                        "required": "required by: throttle_unauthenticated_enabled\n",
                        "description": "Rate limit period in seconds."
                    },
                    {
                        "attribute": "throttle_unauthenticated_requests_per_period",
                        "type": "integer",
                        "required": "required by: throttle_unauthenticated_enabled\n",
                        "description": "Max requests per period per IP."
                    },
                    {
                        "attribute": "two_factor_grace_period",
                        "type": "integer",
                        "required": "required by: require_two_factor_authentication\n",
                        "description": "Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication."
                    },
                    {
                        "attribute": "unique_ips_limit_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "(If enabled, requires: unique_ips_limit_per_user and unique_ips_limit_time_window) Limit sign in from multiple ips."
                    },
                    {
                        "attribute": "unique_ips_limit_per_user",
                        "type": "integer",
                        "required": "required by: unique_ips_limit_enabled\n",
                        "description": "Maximum number of ips per user."
                    },
                    {
                        "attribute": "unique_ips_limit_time_window",
                        "type": "integer",
                        "required": "required by: unique_ips_limit_enabled\n",
                        "description": "How many seconds an IP will be counted towards the limit."
                    },
                    {
                        "attribute": "usage_ping_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Every week GitLab will report license usage back to GitLab, Inc."
                    },
                    {
                        "attribute": "user_default_external",
                        "type": "boolean",
                        "required": "no",
                        "description": "Newly registered users will be external by default."
                    },
                    {
                        "attribute": "user_oauth_applications",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow users to register any application to use GitLab as an OAuth provider."
                    },
                    {
                        "attribute": "user_show_add_ssh_key_message",
                        "type": "boolean",
                        "required": "no",
                        "description": "When set to false disable the “You won’t be able to pull or push project code via SSH” warning shown to users with no uploaded SSH key."
                    },
                    {
                        "attribute": "version_check_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Let GitLab inform you when an update is available."
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/tags.html",
        "urlPart": "tags.html",
        "allEntries": [
            {
                "title": "tags-api",
                "description": "Get a list of repository tags from a project, sorted by name in reverse\nalphabetical order. This endpoint can be accessed without authentication if the\nrepository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/tags"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return tags ordered by name or updated fields. Default is updated\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return tags sorted in asc or desc order. Default is desc\n"
                    }
                ]
            },
            {
                "title": "list-project-repository-tags",
                "description": "Get a list of repository tags from a project, sorted by name in reverse\nalphabetical order. This endpoint can be accessed without authentication if the\nrepository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/tags"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return tags ordered by name or updated fields. Default is updated\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return tags sorted in asc or desc order. Default is desc\n"
                    }
                ]
            },
            {
                "title": "get-a-single-repository-tag",
                "description": "Get a specific repository tag determined by its name. This endpoint can be\naccessed without authentication if the repository is publicly accessible.",
                "api": [
                    "GET /projects/:id/repository/tags/:tag_name"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "tag_name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the tag"
                    }
                ]
            },
            {
                "title": "create-a-new-tag",
                "description": "Creates a new tag in the repository that points to the supplied ref.",
                "api": [
                    "POST /projects/:id/repository/tags"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "delete-a-tag",
                "description": "Deletes a tag of a repository with given name.",
                "api": [
                    "DELETE /projects/:id/repository/tags/:tag_name"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-a-new-release",
                "description": "Add release notes to the existing git tag. If there\nalready exists a release for the given tag, status code 409 is returned.",
                "api": [
                    "POST /projects/:id/repository/tags/:tag_name/release"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "update-a-release",
                "description": "Updates the release notes of a given release.",
                "api": [
                    "PUT /projects/:id/repository/tags/:tag_name/release"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/wikis.html",
        "urlPart": "wikis.html",
        "allEntries": [
            {
                "title": "wikis-api",
                "description": "Available only in APIv4.",
                "api": [
                    "GET /projects/:id/wikis"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "with_content",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include pages’ content"
                    }
                ]
            },
            {
                "title": "list-wiki-pages",
                "description": "Get all wiki pages for a given project.",
                "api": [
                    "GET /projects/:id/wikis"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "with_content",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include pages’ content"
                    }
                ]
            },
            {
                "title": "get-a-wiki-page",
                "description": "Get a wiki page for a given project.",
                "api": [
                    "GET /projects/:id/wikis/:slug"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "slug",
                        "type": "string",
                        "required": "yes",
                        "description": "The slug (a unique string) of the wiki page"
                    }
                ]
            },
            {
                "title": "create-a-new-wiki-page",
                "description": "Creates a new wiki page for the given repository with the given title, slug, and content.",
                "api": [
                    "POST /projects/:id/wikis"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "content",
                        "type": "string",
                        "required": "yes",
                        "description": "The content of the wiki page"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "yes",
                        "description": "The title of the wiki page"
                    },
                    {
                        "attribute": "format",
                        "type": "string",
                        "required": "no",
                        "description": "The format of the wiki page. Available formats are: markdown (default), rdoc, and asciidoc\n"
                    }
                ]
            },
            {
                "title": "edit-an-existing-wiki-page",
                "description": "Updates an existing wiki page. At least one parameter is required to update the wiki page.",
                "api": [
                    "PUT /projects/:id/wikis/:slug"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "content",
                        "type": "string",
                        "required": "yes if title is not provided",
                        "description": "The content of the wiki page"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "yes if content is not provided",
                        "description": "The title of the wiki page"
                    },
                    {
                        "attribute": "format",
                        "type": "string",
                        "required": "no",
                        "description": "The format of the wiki page. Available formats are: markdown (default), rdoc, and asciidoc\n"
                    },
                    {
                        "attribute": "slug",
                        "type": "string",
                        "required": "yes",
                        "description": "The slug (a unique string) of the wiki page"
                    }
                ]
            },
            {
                "title": "delete-a-wiki-page",
                "description": "Deletes a wiki page with a given slug.",
                "api": [
                    "DELETE /projects/:id/wikis/:slug"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "slug",
                        "type": "string",
                        "required": "yes",
                        "description": "The slug (a unique string) of the wiki page"
                    }
                ]
            },
            {
                "title": "upload-an-attachment-to-the-wiki-repository",
                "description": "Uploads a file to the attachment folder inside the wiki’s repository. The\n attachment folder is the uploads folder.",
                "api": [
                    "POST /projects/:id/wikis/attachments"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "file",
                        "type": "string",
                        "required": "yes",
                        "description": "The attachment to be uploaded"
                    },
                    {
                        "attribute": "branch",
                        "type": "string",
                        "required": "no",
                        "description": "The name of the branch. Defaults to the wiki repository default branch"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/services.html",
        "urlPart": "services.html",
        "allEntries": [
            {
                "title": "services-api",
                "description": "Asana - Teamwork without email",
                "api": [
                    "PUT /projects/:id/services/asana"
                ],
                "params": []
            },
            {
                "title": "asana",
                "description": "Asana - Teamwork without email",
                "api": [
                    "PUT /projects/:id/services/asana"
                ],
                "params": [
                    {
                        "attribute": "api_key",
                        "type": "string",
                        "required": "true",
                        "description": "User API token. User must have access to task, all comments will be attributed to this user."
                    },
                    {
                        "attribute": "restrict_to_branch",
                        "type": "string",
                        "required": "false",
                        "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches."
                    }
                ]
            },
            {
                "title": "createedit-asana-service",
                "description": "Set Asana service for a project.",
                "api": [
                    "PUT /projects/:id/services/asana"
                ],
                "params": [
                    {
                        "attribute": "api_key",
                        "type": "string",
                        "required": "true",
                        "description": "User API token. User must have access to task, all comments will be attributed to this user."
                    },
                    {
                        "attribute": "restrict_to_branch",
                        "type": "string",
                        "required": "false",
                        "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches."
                    }
                ]
            },
            {
                "title": "delete-asana-service",
                "description": "Delete Asana service for a project.",
                "api": [
                    "DELETE /projects/:id/services/asana"
                ],
                "params": []
            },
            {
                "title": "get-asana-service-settings",
                "description": "Get Asana service settings for a project.",
                "api": [
                    "GET /projects/:id/services/asana"
                ],
                "params": []
            },
            {
                "title": "assembla",
                "description": "Project Management Software (Source Commits Endpoint)",
                "api": [
                    "PUT /projects/:id/services/assembla"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "The authentication token"
                    },
                    {
                        "attribute": "subdomain",
                        "type": "string",
                        "required": "false",
                        "description": "The subdomain setting"
                    }
                ]
            },
            {
                "title": "createedit-assembla-service",
                "description": "Set Assembla service for a project.",
                "api": [
                    "PUT /projects/:id/services/assembla"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "The authentication token"
                    },
                    {
                        "attribute": "subdomain",
                        "type": "string",
                        "required": "false",
                        "description": "The subdomain setting"
                    }
                ]
            },
            {
                "title": "delete-assembla-service",
                "description": "Delete Assembla service for a project.",
                "api": [
                    "DELETE /projects/:id/services/assembla"
                ],
                "params": []
            },
            {
                "title": "get-assembla-service-settings",
                "description": "Get Assembla service settings for a project.",
                "api": [
                    "GET /projects/:id/services/assembla"
                ],
                "params": []
            },
            {
                "title": "atlassian-bamboo-ci",
                "description": "A continuous integration and build server",
                "api": [
                    "PUT /projects/:id/services/bamboo"
                ],
                "params": [
                    {
                        "attribute": "bamboo_url",
                        "type": "string",
                        "required": "true",
                        "description": "Bamboo root URL. For example, https://bamboo.example.com."
                    },
                    {
                        "attribute": "build_key",
                        "type": "string",
                        "required": "true",
                        "description": "Bamboo build plan key like KEY"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "true",
                        "description": "A user with API access, if applicable"
                    },
                    {
                        "attribute": "password",
                        "type": "string",
                        "required": "true",
                        "description": "Password of the user"
                    }
                ]
            },
            {
                "title": "createedit-atlassian-bamboo-ci-service",
                "description": "Set Atlassian Bamboo CI service for a project.",
                "api": [
                    "PUT /projects/:id/services/bamboo"
                ],
                "params": [
                    {
                        "attribute": "bamboo_url",
                        "type": "string",
                        "required": "true",
                        "description": "Bamboo root URL. For example, https://bamboo.example.com."
                    },
                    {
                        "attribute": "build_key",
                        "type": "string",
                        "required": "true",
                        "description": "Bamboo build plan key like KEY"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "true",
                        "description": "A user with API access, if applicable"
                    },
                    {
                        "attribute": "password",
                        "type": "string",
                        "required": "true",
                        "description": "Password of the user"
                    }
                ]
            },
            {
                "title": "delete-atlassian-bamboo-ci-service",
                "description": "Delete Atlassian Bamboo CI service for a project.",
                "api": [
                    "DELETE /projects/:id/services/bamboo"
                ],
                "params": []
            },
            {
                "title": "get-atlassian-bamboo-ci-service-settings",
                "description": "Get Atlassian Bamboo CI service settings for a project.",
                "api": [
                    "GET /projects/:id/services/bamboo"
                ],
                "params": []
            },
            {
                "title": "bugzilla",
                "description": "Bugzilla Issue Tracker",
                "api": [
                    "PUT /projects/:id/services/bugzilla"
                ],
                "params": [
                    {
                        "attribute": "new_issue_url",
                        "type": "string",
                        "required": "true",
                        "description": "New Issue url"
                    },
                    {
                        "attribute": "issues_url",
                        "type": "string",
                        "required": "true",
                        "description": "Issue url"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "Project url"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "false",
                        "description": "Description"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "false",
                        "description": "Title"
                    }
                ]
            },
            {
                "title": "createedit-bugzilla-service",
                "description": "Set Bugzilla service for a project.",
                "api": [
                    "PUT /projects/:id/services/bugzilla"
                ],
                "params": [
                    {
                        "attribute": "new_issue_url",
                        "type": "string",
                        "required": "true",
                        "description": "New Issue url"
                    },
                    {
                        "attribute": "issues_url",
                        "type": "string",
                        "required": "true",
                        "description": "Issue url"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "Project url"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "false",
                        "description": "Description"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "false",
                        "description": "Title"
                    }
                ]
            },
            {
                "title": "delete-bugzilla-service",
                "description": "Delete Bugzilla service for a project.",
                "api": [
                    "DELETE /projects/:id/services/bugzilla"
                ],
                "params": []
            },
            {
                "title": "get-bugzilla-service-settings",
                "description": "Get Bugzilla service settings for a project.",
                "api": [
                    "GET /projects/:id/services/bugzilla"
                ],
                "params": []
            },
            {
                "title": "buildkite",
                "description": "Continuous integration and deployments",
                "api": [
                    "PUT /projects/:id/services/buildkite"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Buildkite project GitLab token"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "https://buildkite.com/example/project"
                    },
                    {
                        "attribute": "enable_ssl_verification",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable SSL verification"
                    }
                ]
            },
            {
                "title": "createedit-buildkite-service",
                "description": "Set Buildkite service for a project.",
                "api": [
                    "PUT /projects/:id/services/buildkite"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Buildkite project GitLab token"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "https://buildkite.com/example/project"
                    },
                    {
                        "attribute": "enable_ssl_verification",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable SSL verification"
                    }
                ]
            },
            {
                "title": "delete-buildkite-service",
                "description": "Delete Buildkite service for a project.",
                "api": [
                    "DELETE /projects/:id/services/buildkite"
                ],
                "params": []
            },
            {
                "title": "get-buildkite-service-settings",
                "description": "Get Buildkite service settings for a project.",
                "api": [
                    "GET /projects/:id/services/buildkite"
                ],
                "params": []
            },
            {
                "title": "campfire",
                "description": "Simple web-based real-time group chat",
                "api": [
                    "PUT /projects/:id/services/campfire"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Campfire token"
                    },
                    {
                        "attribute": "subdomain",
                        "type": "string",
                        "required": "false",
                        "description": "Campfire subdomain"
                    },
                    {
                        "attribute": "room",
                        "type": "string",
                        "required": "false",
                        "description": "Campfire room"
                    }
                ]
            },
            {
                "title": "createedit-campfire-service",
                "description": "Set Campfire service for a project.",
                "api": [
                    "PUT /projects/:id/services/campfire"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Campfire token"
                    },
                    {
                        "attribute": "subdomain",
                        "type": "string",
                        "required": "false",
                        "description": "Campfire subdomain"
                    },
                    {
                        "attribute": "room",
                        "type": "string",
                        "required": "false",
                        "description": "Campfire room"
                    }
                ]
            },
            {
                "title": "delete-campfire-service",
                "description": "Delete Campfire service for a project.",
                "api": [
                    "DELETE /projects/:id/services/campfire"
                ],
                "params": []
            },
            {
                "title": "get-campfire-service-settings",
                "description": "Get Campfire service settings for a project.",
                "api": [
                    "GET /projects/:id/services/campfire"
                ],
                "params": []
            },
            {
                "title": "custom-issue-tracker",
                "description": "Custom issue tracker",
                "api": [
                    "PUT /projects/:id/services/custom-issue-tracker"
                ],
                "params": [
                    {
                        "attribute": "new_issue_url",
                        "type": "string",
                        "required": "true",
                        "description": "New Issue url"
                    },
                    {
                        "attribute": "issues_url",
                        "type": "string",
                        "required": "true",
                        "description": "Issue url"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "Project url"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "false",
                        "description": "Description"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "false",
                        "description": "Title"
                    }
                ]
            },
            {
                "title": "createedit-custom-issue-tracker-service",
                "description": "Set Custom Issue Tracker service for a project.",
                "api": [
                    "PUT /projects/:id/services/custom-issue-tracker"
                ],
                "params": [
                    {
                        "attribute": "new_issue_url",
                        "type": "string",
                        "required": "true",
                        "description": "New Issue url"
                    },
                    {
                        "attribute": "issues_url",
                        "type": "string",
                        "required": "true",
                        "description": "Issue url"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "Project url"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "false",
                        "description": "Description"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "false",
                        "description": "Title"
                    }
                ]
            },
            {
                "title": "delete-custom-issue-tracker-service",
                "description": "Delete Custom Issue Tracker service for a project.",
                "api": [
                    "DELETE /projects/:id/services/custom-issue-tracker"
                ],
                "params": []
            },
            {
                "title": "get-custom-issue-tracker-service-settings",
                "description": "Get Custom Issue Tracker service settings for a project.",
                "api": [
                    "GET /projects/:id/services/custom-issue-tracker"
                ],
                "params": []
            },
            {
                "title": "drone-ci",
                "description": "Drone is a Continuous Integration platform built on Docker, written in Go",
                "api": [
                    "PUT /projects/:id/services/drone-ci"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Drone CI project specific token"
                    },
                    {
                        "attribute": "drone_url",
                        "type": "string",
                        "required": "true",
                        "description": "http://drone.example.com"
                    },
                    {
                        "attribute": "enable_ssl_verification",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable SSL verification"
                    }
                ]
            },
            {
                "title": "createedit-drone-ci-service",
                "description": "Set Drone CI service for a project.",
                "api": [
                    "PUT /projects/:id/services/drone-ci"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Drone CI project specific token"
                    },
                    {
                        "attribute": "drone_url",
                        "type": "string",
                        "required": "true",
                        "description": "http://drone.example.com"
                    },
                    {
                        "attribute": "enable_ssl_verification",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable SSL verification"
                    }
                ]
            },
            {
                "title": "delete-drone-ci-service",
                "description": "Delete Drone CI service for a project.",
                "api": [
                    "DELETE /projects/:id/services/drone-ci"
                ],
                "params": []
            },
            {
                "title": "get-drone-ci-service-settings",
                "description": "Get Drone CI service settings for a project.",
                "api": [
                    "GET /projects/:id/services/drone-ci"
                ],
                "params": []
            },
            {
                "title": "emails-on-push",
                "description": "Email the commits and diff of each push to a list of recipients.",
                "api": [
                    "PUT /projects/:id/services/emails-on-push"
                ],
                "params": [
                    {
                        "attribute": "recipients",
                        "type": "string",
                        "required": "true",
                        "description": "Emails separated by whitespace"
                    },
                    {
                        "attribute": "disable_diffs",
                        "type": "boolean",
                        "required": "false",
                        "description": "Disable code diffs"
                    },
                    {
                        "attribute": "send_from_committer_email",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send from committer"
                    }
                ]
            },
            {
                "title": "createedit-emails-on-push-service",
                "description": "Set Emails on push service for a project.",
                "api": [
                    "PUT /projects/:id/services/emails-on-push"
                ],
                "params": [
                    {
                        "attribute": "recipients",
                        "type": "string",
                        "required": "true",
                        "description": "Emails separated by whitespace"
                    },
                    {
                        "attribute": "disable_diffs",
                        "type": "boolean",
                        "required": "false",
                        "description": "Disable code diffs"
                    },
                    {
                        "attribute": "send_from_committer_email",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send from committer"
                    }
                ]
            },
            {
                "title": "delete-emails-on-push-service",
                "description": "Delete Emails on push service for a project.",
                "api": [
                    "DELETE /projects/:id/services/emails-on-push"
                ],
                "params": []
            },
            {
                "title": "get-emails-on-push-service-settings",
                "description": "Get Emails on push service settings for a project.",
                "api": [
                    "GET /projects/:id/services/emails-on-push"
                ],
                "params": []
            },
            {
                "title": "external-wiki",
                "description": "Replaces the link to the internal wiki with a link to an external wiki.",
                "api": [
                    "PUT /projects/:id/services/external-wiki"
                ],
                "params": [
                    {
                        "attribute": "external_wiki_url",
                        "type": "string",
                        "required": "true",
                        "description": "The URL of the external Wiki"
                    }
                ]
            },
            {
                "title": "createedit-external-wiki-service",
                "description": "Set External Wiki service for a project.",
                "api": [
                    "PUT /projects/:id/services/external-wiki"
                ],
                "params": [
                    {
                        "attribute": "external_wiki_url",
                        "type": "string",
                        "required": "true",
                        "description": "The URL of the external Wiki"
                    }
                ]
            },
            {
                "title": "delete-external-wiki-service",
                "description": "Delete External Wiki service for a project.",
                "api": [
                    "DELETE /projects/:id/services/external-wiki"
                ],
                "params": []
            },
            {
                "title": "get-external-wiki-service-settings",
                "description": "Get External Wiki service settings for a project.",
                "api": [
                    "GET /projects/:id/services/external-wiki"
                ],
                "params": []
            },
            {
                "title": "flowdock",
                "description": "Flowdock is a collaboration web app for technical teams.",
                "api": [
                    "PUT /projects/:id/services/flowdock"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Flowdock Git source token"
                    }
                ]
            },
            {
                "title": "createedit-flowdock-service",
                "description": "Set Flowdock service for a project.",
                "api": [
                    "PUT /projects/:id/services/flowdock"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Flowdock Git source token"
                    }
                ]
            },
            {
                "title": "delete-flowdock-service",
                "description": "Delete Flowdock service for a project.",
                "api": [
                    "DELETE /projects/:id/services/flowdock"
                ],
                "params": []
            },
            {
                "title": "get-flowdock-service-settings",
                "description": "Get Flowdock service settings for a project.",
                "api": [
                    "GET /projects/:id/services/flowdock"
                ],
                "params": []
            },
            {
                "title": "hangouts-chat",
                "description": "Google GSuite team collaboration tool.",
                "api": [
                    "PUT /projects/:id/services/hangouts_chat"
                ],
                "params": []
            },
            {
                "title": "createedit-hangouts-chat-service",
                "description": "Set Hangouts Chat service for a project.",
                "api": [
                    "PUT /projects/:id/services/hangouts_chat"
                ],
                "params": [
                    {
                        "attribute": "webhook",
                        "type": "string",
                        "required": "true",
                        "description": "The Hangouts Chat webhook. For example, https://chat.googleapis.com/v1/spaces...."
                    },
                    {
                        "attribute": "notify_only_broken_pipelines",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications for broken pipelines"
                    },
                    {
                        "attribute": "notify_only_default_branch",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications only for the default branch"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for push events"
                    },
                    {
                        "attribute": "issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for issue events"
                    },
                    {
                        "attribute": "confidential_issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for confidential issue events"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for merge request events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for tag push events"
                    },
                    {
                        "attribute": "note_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for note events"
                    },
                    {
                        "attribute": "pipeline_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for pipeline events"
                    },
                    {
                        "attribute": "wiki_page_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for wiki page events"
                    }
                ]
            },
            {
                "title": "delete-hangouts-chat-service",
                "description": "Delete Hangouts Chat service for a project.",
                "api": [
                    "DELETE /projects/:id/services/hangouts_chat"
                ],
                "params": []
            },
            {
                "title": "get-hangouts-chat-service-settings",
                "description": "Get Hangouts Chat service settings for a project.",
                "api": [
                    "GET /projects/:id/services/hangouts_chat"
                ],
                "params": []
            },
            {
                "title": "hipchat",
                "description": "Private group chat and IM",
                "api": [
                    "PUT /projects/:id/services/hipchat"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Room token"
                    },
                    {
                        "attribute": "color",
                        "type": "string",
                        "required": "false",
                        "description": "The room color"
                    },
                    {
                        "attribute": "notify",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications"
                    },
                    {
                        "attribute": "room",
                        "type": "string",
                        "required": "false",
                        "description": "Room name or ID"
                    },
                    {
                        "attribute": "api_version",
                        "type": "string",
                        "required": "false",
                        "description": "Leave blank for default (v2)"
                    },
                    {
                        "attribute": "server",
                        "type": "string",
                        "required": "false",
                        "description": "Leave blank for default. For example, https://hipchat.example.com."
                    }
                ]
            },
            {
                "title": "createedit-hipchat-service",
                "description": "Set HipChat service for a project.",
                "api": [
                    "PUT /projects/:id/services/hipchat"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "Room token"
                    },
                    {
                        "attribute": "color",
                        "type": "string",
                        "required": "false",
                        "description": "The room color"
                    },
                    {
                        "attribute": "notify",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications"
                    },
                    {
                        "attribute": "room",
                        "type": "string",
                        "required": "false",
                        "description": "Room name or ID"
                    },
                    {
                        "attribute": "api_version",
                        "type": "string",
                        "required": "false",
                        "description": "Leave blank for default (v2)"
                    },
                    {
                        "attribute": "server",
                        "type": "string",
                        "required": "false",
                        "description": "Leave blank for default. For example, https://hipchat.example.com."
                    }
                ]
            },
            {
                "title": "delete-hipchat-service",
                "description": "Delete HipChat service for a project.",
                "api": [
                    "DELETE /projects/:id/services/hipchat"
                ],
                "params": []
            },
            {
                "title": "get-hipchat-service-settings",
                "description": "Get HipChat service settings for a project.",
                "api": [
                    "GET /projects/:id/services/hipchat"
                ],
                "params": []
            },
            {
                "title": "irker-irc-gateway",
                "description": "Send IRC messages, on update, to a list of recipients through an Irker gateway.",
                "api": [
                    "PUT /projects/:id/services/irker"
                ],
                "params": [
                    {
                        "attribute": "recipients",
                        "type": "string",
                        "required": "true",
                        "description": "Recipients/channels separated by whitespaces"
                    },
                    {
                        "attribute": "default_irc_uri",
                        "type": "string",
                        "required": "false",
                        "description": "irc://irc.network.net:6697/"
                    },
                    {
                        "attribute": "server_host",
                        "type": "string",
                        "required": "false",
                        "description": "localhost"
                    },
                    {
                        "attribute": "server_port",
                        "type": "integer",
                        "required": "false",
                        "description": "6659"
                    },
                    {
                        "attribute": "colorize_messages",
                        "type": "boolean",
                        "required": "false",
                        "description": "Colorize messages"
                    }
                ]
            },
            {
                "title": "createedit-irker-irc-gateway-service",
                "description": "Set Irker (IRC gateway) service for a project.",
                "api": [
                    "PUT /projects/:id/services/irker"
                ],
                "params": [
                    {
                        "attribute": "recipients",
                        "type": "string",
                        "required": "true",
                        "description": "Recipients/channels separated by whitespaces"
                    },
                    {
                        "attribute": "default_irc_uri",
                        "type": "string",
                        "required": "false",
                        "description": "irc://irc.network.net:6697/"
                    },
                    {
                        "attribute": "server_host",
                        "type": "string",
                        "required": "false",
                        "description": "localhost"
                    },
                    {
                        "attribute": "server_port",
                        "type": "integer",
                        "required": "false",
                        "description": "6659"
                    },
                    {
                        "attribute": "colorize_messages",
                        "type": "boolean",
                        "required": "false",
                        "description": "Colorize messages"
                    }
                ]
            },
            {
                "title": "delete-irker-irc-gateway-service",
                "description": "Delete Irker (IRC gateway) service for a project.",
                "api": [
                    "DELETE /projects/:id/services/irker"
                ],
                "params": []
            },
            {
                "title": "get-irker-irc-gateway-service-settings",
                "description": "Get Irker (IRC gateway) service settings for a project.",
                "api": [
                    "GET /projects/:id/services/irker"
                ],
                "params": []
            },
            {
                "title": "jira",
                "description": "JIRA issue tracker.",
                "api": [
                    "GET /projects/:id/services/jira"
                ],
                "params": []
            },
            {
                "title": "get-jira-service-settings",
                "description": "Get JIRA service settings for a project.",
                "api": [
                    "GET /projects/:id/services/jira"
                ],
                "params": []
            },
            {
                "title": "createedit-jira-service",
                "description": "Set JIRA service for a project.",
                "api": [
                    "PUT /projects/:id/services/jira"
                ],
                "params": [
                    {
                        "attribute": "url",
                        "type": "string",
                        "required": "yes",
                        "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com."
                    },
                    {
                        "attribute": "project_key",
                        "type": "string",
                        "required": "yes",
                        "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ."
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "yes",
                        "description": "The username of the user created to be used with GitLab/JIRA."
                    },
                    {
                        "attribute": "password",
                        "type": "string",
                        "required": "yes",
                        "description": "The password of the user created to be used with GitLab/JIRA."
                    },
                    {
                        "attribute": "jira_issue_transition_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the Transitions (id) column ([see screenshot][trans]). By default, this ID is set to 2."
                    }
                ]
            },
            {
                "title": "delete-jira-service",
                "description": "Remove all previously JIRA settings from a project.",
                "api": [
                    "DELETE /projects/:id/services/jira"
                ],
                "params": []
            },
            {
                "title": "kubernetes",
                "description": "Kubernetes / Openshift integration",
                "api": [],
                "params": [
                    {
                        "attribute": "namespace",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The Kubernetes namespace to use"
                    }
                ]
            },
            {
                "title": "createedit-kubernetes-service",
                "description": "Set Kubernetes service for a project.",
                "api": [
                    "PUT /projects/:id/services/kubernetes"
                ],
                "params": [
                    {
                        "attribute": "namespace",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The Kubernetes namespace to use"
                    }
                ]
            },
            {
                "title": "delete-kubernetes-service",
                "description": "Delete Kubernetes service for a project.",
                "api": [
                    "DELETE /projects/:id/services/kubernetes"
                ],
                "params": []
            },
            {
                "title": "get-kubernetes-service-settings",
                "description": "Get Kubernetes service settings for a project.",
                "api": [
                    "GET /projects/:id/services/kubernetes"
                ],
                "params": []
            },
            {
                "title": "slack-slash-commands",
                "description": "Ability to receive slash commands from a Slack chat instance.",
                "api": [
                    "GET /projects/:id/services/slack-slash-commands"
                ],
                "params": []
            },
            {
                "title": "get-slack-slash-command-service-settings",
                "description": "Get Slack slash command service settings for a project.",
                "api": [
                    "GET /projects/:id/services/slack-slash-commands"
                ],
                "params": []
            },
            {
                "title": "createedit-slack-slash-command-service",
                "description": "Set Slack slash command for a project.",
                "api": [
                    "PUT /projects/:id/services/slack-slash-commands"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "yes",
                        "description": "The Slack token"
                    }
                ]
            },
            {
                "title": "delete-slack-slash-command-service",
                "description": "Delete Slack slash command service for a project.",
                "api": [
                    "DELETE /projects/:id/services/slack-slash-commands"
                ],
                "params": []
            },
            {
                "title": "mattermost-slash-commands",
                "description": "Ability to receive slash commands from a Mattermost chat instance.",
                "api": [
                    "GET /projects/:id/services/mattermost-slash-commands"
                ],
                "params": []
            },
            {
                "title": "get-mattermost-slash-command-service-settings",
                "description": "Get Mattermost slash command service settings for a project.",
                "api": [
                    "GET /projects/:id/services/mattermost-slash-commands"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "yes",
                        "description": "The Mattermost token"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "no",
                        "description": "The username to use to post the message"
                    }
                ]
            },
            {
                "title": "createedit-mattermost-slash-command-service",
                "description": "Set Mattermost slash command for a project.",
                "api": [
                    "PUT /projects/:id/services/mattermost-slash-commands"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "yes",
                        "description": "The Mattermost token"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "no",
                        "description": "The username to use to post the message"
                    }
                ]
            },
            {
                "title": "delete-mattermost-slash-command-service",
                "description": "Delete Mattermost slash command service for a project.",
                "api": [
                    "DELETE /projects/:id/services/mattermost-slash-commands"
                ],
                "params": []
            },
            {
                "title": "packagist",
                "description": "Update your project on Packagist, the main Composer repository, when commits or tags are pushed to GitLab.",
                "api": [
                    "PUT /projects/:id/services/packagist"
                ],
                "params": [
                    {
                        "attribute": "username",
                        "type": "",
                        "required": "required"
                    }
                ]
            },
            {
                "title": "createedit-packagist-service",
                "description": "Set Packagist service for a project.",
                "api": [
                    "PUT /projects/:id/services/packagist"
                ],
                "params": [
                    {
                        "attribute": "username",
                        "type": "",
                        "required": "required"
                    }
                ]
            },
            {
                "title": "delete-packagist-service",
                "description": "Delete Packagist service for a project.",
                "api": [
                    "DELETE /projects/:id/services/packagist"
                ],
                "params": []
            },
            {
                "title": "get-packagist-service-settings",
                "description": "Get Packagist service settings for a project.",
                "api": [
                    "GET /projects/:id/services/packagist"
                ],
                "params": []
            },
            {
                "title": "pipeline-emails",
                "description": "Get emails for GitLab CI pipelines.",
                "api": [
                    "PUT /projects/:id/services/pipelines-email"
                ],
                "params": [
                    {
                        "attribute": "recipients",
                        "type": "string",
                        "required": "yes",
                        "description": "Comma-separated list of recipient email addresses"
                    },
                    {
                        "attribute": "add_pusher",
                        "type": "boolean",
                        "required": "no",
                        "description": "Add pusher to recipients list"
                    },
                    {
                        "attribute": "notify_only_broken_pipelines",
                        "type": "boolean",
                        "required": "no",
                        "description": "Notify only broken pipelines"
                    }
                ]
            },
            {
                "title": "createedit-pipeline-emails-service",
                "description": "Set Pipeline-Emails service for a project.",
                "api": [
                    "PUT /projects/:id/services/pipelines-email"
                ],
                "params": [
                    {
                        "attribute": "recipients",
                        "type": "string",
                        "required": "yes",
                        "description": "Comma-separated list of recipient email addresses"
                    },
                    {
                        "attribute": "add_pusher",
                        "type": "boolean",
                        "required": "no",
                        "description": "Add pusher to recipients list"
                    },
                    {
                        "attribute": "notify_only_broken_pipelines",
                        "type": "boolean",
                        "required": "no",
                        "description": "Notify only broken pipelines"
                    }
                ]
            },
            {
                "title": "delete-pipeline-emails-service",
                "description": "Delete Pipeline-Emails service for a project.",
                "api": [
                    "DELETE /projects/:id/services/pipelines-email"
                ],
                "params": []
            },
            {
                "title": "get-pipeline-emails-service-settings",
                "description": "Get Pipeline-Emails service settings for a project.",
                "api": [
                    "GET /projects/:id/services/pipelines-email"
                ],
                "params": []
            },
            {
                "title": "pivotaltracker",
                "description": "Project Management Software (Source Commits Endpoint)",
                "api": [
                    "PUT /projects/:id/services/pivotaltracker"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "The PivotalTracker token"
                    },
                    {
                        "attribute": "restrict_to_branch",
                        "type": "boolean",
                        "required": "false",
                        "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches."
                    }
                ]
            },
            {
                "title": "createedit-pivotaltracker-service",
                "description": "Set PivotalTracker service for a project.",
                "api": [
                    "PUT /projects/:id/services/pivotaltracker"
                ],
                "params": [
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "true",
                        "description": "The PivotalTracker token"
                    },
                    {
                        "attribute": "restrict_to_branch",
                        "type": "boolean",
                        "required": "false",
                        "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches."
                    }
                ]
            },
            {
                "title": "delete-pivotaltracker-service",
                "description": "Delete PivotalTracker service for a project.",
                "api": [
                    "DELETE /projects/:id/services/pivotaltracker"
                ],
                "params": []
            },
            {
                "title": "get-pivotaltracker-service-settings",
                "description": "Get PivotalTracker service settings for a project.",
                "api": [
                    "GET /projects/:id/services/pivotaltracker"
                ],
                "params": []
            },
            {
                "title": "prometheus",
                "description": "Prometheus is a powerful time-series monitoring service.",
                "api": [
                    "PUT /projects/:id/services/prometheus"
                ],
                "params": [
                    {
                        "attribute": "api_url",
                        "type": "string",
                        "required": "true",
                        "description": "Prometheus API Base URL. For example, http://prometheus.example.com/."
                    }
                ]
            },
            {
                "title": "createedit-prometheus-service",
                "description": "Set Prometheus service for a project.",
                "api": [
                    "PUT /projects/:id/services/prometheus"
                ],
                "params": [
                    {
                        "attribute": "api_url",
                        "type": "string",
                        "required": "true",
                        "description": "Prometheus API Base URL. For example, http://prometheus.example.com/."
                    }
                ]
            },
            {
                "title": "delete-prometheus-service",
                "description": "Delete Prometheus service for a project.",
                "api": [
                    "DELETE /projects/:id/services/prometheus"
                ],
                "params": []
            },
            {
                "title": "get-prometheus-service-settings",
                "description": "Get Prometheus service settings for a project.",
                "api": [
                    "GET /projects/:id/services/prometheus"
                ],
                "params": []
            },
            {
                "title": "pushover",
                "description": "Pushover makes it easy to get real-time notifications on your Android device, iPhone, iPad, and Desktop.",
                "api": [
                    "PUT /projects/:id/services/pushover"
                ],
                "params": [
                    {
                        "attribute": "api_key",
                        "type": "string",
                        "required": "true",
                        "description": "Your application key"
                    },
                    {
                        "attribute": "user_key",
                        "type": "string",
                        "required": "true",
                        "description": "Your user key"
                    },
                    {
                        "attribute": "priority",
                        "type": "string",
                        "required": "true",
                        "description": "The priority"
                    },
                    {
                        "attribute": "device",
                        "type": "string",
                        "required": "false",
                        "description": "Leave blank for all active devices"
                    },
                    {
                        "attribute": "sound",
                        "type": "string",
                        "required": "false",
                        "description": "The sound of the notification"
                    }
                ]
            },
            {
                "title": "createedit-pushover-service",
                "description": "Set Pushover service for a project.",
                "api": [
                    "PUT /projects/:id/services/pushover"
                ],
                "params": [
                    {
                        "attribute": "api_key",
                        "type": "string",
                        "required": "true",
                        "description": "Your application key"
                    },
                    {
                        "attribute": "user_key",
                        "type": "string",
                        "required": "true",
                        "description": "Your user key"
                    },
                    {
                        "attribute": "priority",
                        "type": "string",
                        "required": "true",
                        "description": "The priority"
                    },
                    {
                        "attribute": "device",
                        "type": "string",
                        "required": "false",
                        "description": "Leave blank for all active devices"
                    },
                    {
                        "attribute": "sound",
                        "type": "string",
                        "required": "false",
                        "description": "The sound of the notification"
                    }
                ]
            },
            {
                "title": "delete-pushover-service",
                "description": "Delete Pushover service for a project.",
                "api": [
                    "DELETE /projects/:id/services/pushover"
                ],
                "params": []
            },
            {
                "title": "get-pushover-service-settings",
                "description": "Get Pushover service settings for a project.",
                "api": [
                    "GET /projects/:id/services/pushover"
                ],
                "params": []
            },
            {
                "title": "redmine",
                "description": "Redmine issue tracker",
                "api": [
                    "PUT /projects/:id/services/redmine"
                ],
                "params": [
                    {
                        "attribute": "new_issue_url",
                        "type": "string",
                        "required": "true",
                        "description": "New Issue url"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "Project url"
                    },
                    {
                        "attribute": "issues_url",
                        "type": "string",
                        "required": "true",
                        "description": "Issue url"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "false",
                        "description": "Description"
                    }
                ]
            },
            {
                "title": "createedit-redmine-service",
                "description": "Set Redmine service for a project.",
                "api": [
                    "PUT /projects/:id/services/redmine"
                ],
                "params": [
                    {
                        "attribute": "new_issue_url",
                        "type": "string",
                        "required": "true",
                        "description": "New Issue url"
                    },
                    {
                        "attribute": "project_url",
                        "type": "string",
                        "required": "true",
                        "description": "Project url"
                    },
                    {
                        "attribute": "issues_url",
                        "type": "string",
                        "required": "true",
                        "description": "Issue url"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "false",
                        "description": "Description"
                    }
                ]
            },
            {
                "title": "delete-redmine-service",
                "description": "Delete Redmine service for a project.",
                "api": [
                    "DELETE /projects/:id/services/redmine"
                ],
                "params": []
            },
            {
                "title": "get-redmine-service-settings",
                "description": "Get Redmine service settings for a project.",
                "api": [
                    "GET /projects/:id/services/redmine"
                ],
                "params": []
            },
            {
                "title": "slack-notifications",
                "description": "Receive event notifications in Slack",
                "api": [
                    "PUT /projects/:id/services/slack"
                ],
                "params": [
                    {
                        "attribute": "webhook",
                        "type": "string",
                        "required": "true",
                        "description": "https://hooks.slack.com/services/..."
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "false",
                        "description": "username"
                    },
                    {
                        "attribute": "channel",
                        "type": "string",
                        "required": "false",
                        "description": "Default channel to use if others are not configured"
                    },
                    {
                        "attribute": "notify_only_broken_pipelines",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications for broken pipelines"
                    },
                    {
                        "attribute": "notify_only_default_branch",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications only for the default branch"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for push events"
                    },
                    {
                        "attribute": "issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for issue events"
                    },
                    {
                        "attribute": "confidential_issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for confidential issue events"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for merge request events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for tag push events"
                    },
                    {
                        "attribute": "note_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for note events"
                    },
                    {
                        "attribute": "pipeline_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for pipeline events"
                    },
                    {
                        "attribute": "wiki_page_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for wiki page events"
                    },
                    {
                        "attribute": "push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive push events notifications"
                    },
                    {
                        "attribute": "issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive issues events notifications"
                    },
                    {
                        "attribute": "confidential_issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive confidential issues events notifications"
                    },
                    {
                        "attribute": "merge_request_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive merge request events notifications"
                    },
                    {
                        "attribute": "note_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive note events notifications"
                    },
                    {
                        "attribute": "tag_push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive tag push events notifications"
                    },
                    {
                        "attribute": "pipeline_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive pipeline events notifications"
                    },
                    {
                        "attribute": "wiki_page_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive wiki page events notifications"
                    }
                ]
            },
            {
                "title": "createedit-slack-service",
                "description": "Set Slack service for a project.",
                "api": [
                    "PUT /projects/:id/services/slack"
                ],
                "params": [
                    {
                        "attribute": "webhook",
                        "type": "string",
                        "required": "true",
                        "description": "https://hooks.slack.com/services/..."
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "false",
                        "description": "username"
                    },
                    {
                        "attribute": "channel",
                        "type": "string",
                        "required": "false",
                        "description": "Default channel to use if others are not configured"
                    },
                    {
                        "attribute": "notify_only_broken_pipelines",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications for broken pipelines"
                    },
                    {
                        "attribute": "notify_only_default_branch",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications only for the default branch"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for push events"
                    },
                    {
                        "attribute": "issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for issue events"
                    },
                    {
                        "attribute": "confidential_issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for confidential issue events"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for merge request events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for tag push events"
                    },
                    {
                        "attribute": "note_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for note events"
                    },
                    {
                        "attribute": "pipeline_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for pipeline events"
                    },
                    {
                        "attribute": "wiki_page_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for wiki page events"
                    },
                    {
                        "attribute": "push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive push events notifications"
                    },
                    {
                        "attribute": "issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive issues events notifications"
                    },
                    {
                        "attribute": "confidential_issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive confidential issues events notifications"
                    },
                    {
                        "attribute": "merge_request_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive merge request events notifications"
                    },
                    {
                        "attribute": "note_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive note events notifications"
                    },
                    {
                        "attribute": "tag_push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive tag push events notifications"
                    },
                    {
                        "attribute": "pipeline_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive pipeline events notifications"
                    },
                    {
                        "attribute": "wiki_page_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive wiki page events notifications"
                    }
                ]
            },
            {
                "title": "delete-slack-service",
                "description": "Delete Slack service for a project.",
                "api": [
                    "DELETE /projects/:id/services/slack"
                ],
                "params": []
            },
            {
                "title": "get-slack-service-settings",
                "description": "Get Slack service settings for a project.",
                "api": [
                    "GET /projects/:id/services/slack"
                ],
                "params": []
            },
            {
                "title": "microsoft-teams",
                "description": "Group Chat Software",
                "api": [
                    "PUT /projects/:id/services/microsoft-teams"
                ],
                "params": [
                    {
                        "attribute": "webhook",
                        "type": "string",
                        "required": "true",
                        "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                    }
                ]
            },
            {
                "title": "createedit-microsoft-teams-service",
                "description": "Set Microsoft Teams service for a project.",
                "api": [
                    "PUT /projects/:id/services/microsoft-teams"
                ],
                "params": [
                    {
                        "attribute": "webhook",
                        "type": "string",
                        "required": "true",
                        "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...\n"
                    }
                ]
            },
            {
                "title": "delete-microsoft-teams-service",
                "description": "Delete Microsoft Teams service for a project.",
                "api": [
                    "DELETE /projects/:id/services/microsoft-teams"
                ],
                "params": []
            },
            {
                "title": "get-microsoft-teams-service-settings",
                "description": "Get Microsoft Teams service settings for a project.",
                "api": [
                    "GET /projects/:id/services/microsoft-teams"
                ],
                "params": []
            },
            {
                "title": "mattermost-notifications",
                "description": "Receive event notifications in Mattermost",
                "api": [
                    "PUT /projects/:id/services/mattermost"
                ],
                "params": [
                    {
                        "attribute": "webhook",
                        "type": "string",
                        "required": "true",
                        "description": "The Mattermost webhook. For example, http://mattermost_host/hooks/...\n"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "false",
                        "description": "username"
                    },
                    {
                        "attribute": "channel",
                        "type": "string",
                        "required": "false",
                        "description": "Default channel to use if others are not configured"
                    },
                    {
                        "attribute": "notify_only_broken_pipelines",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications for broken pipelines"
                    },
                    {
                        "attribute": "notify_only_default_branch",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications only for the default branch"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for push events"
                    },
                    {
                        "attribute": "issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for issue events"
                    },
                    {
                        "attribute": "confidential_issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for confidential issue events"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for merge request events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for tag push events"
                    },
                    {
                        "attribute": "note_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for note events"
                    },
                    {
                        "attribute": "pipeline_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for pipeline events"
                    },
                    {
                        "attribute": "wiki_page_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for wiki page events"
                    },
                    {
                        "attribute": "push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive push events notifications"
                    },
                    {
                        "attribute": "issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive issues events notifications"
                    },
                    {
                        "attribute": "confidential_issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive confidential issues events notifications"
                    },
                    {
                        "attribute": "merge_request_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive merge request events notifications"
                    },
                    {
                        "attribute": "note_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive note events notifications"
                    },
                    {
                        "attribute": "tag_push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive tag push events notifications"
                    },
                    {
                        "attribute": "pipeline_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive pipeline events notifications"
                    },
                    {
                        "attribute": "wiki_page_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive wiki page events notifications"
                    }
                ]
            },
            {
                "title": "createedit-mattermost-notifications-service",
                "description": "Set Mattermost service for a project.",
                "api": [
                    "PUT /projects/:id/services/mattermost"
                ],
                "params": [
                    {
                        "attribute": "webhook",
                        "type": "string",
                        "required": "true",
                        "description": "The Mattermost webhook. For example, http://mattermost_host/hooks/...\n"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "false",
                        "description": "username"
                    },
                    {
                        "attribute": "channel",
                        "type": "string",
                        "required": "false",
                        "description": "Default channel to use if others are not configured"
                    },
                    {
                        "attribute": "notify_only_broken_pipelines",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications for broken pipelines"
                    },
                    {
                        "attribute": "notify_only_default_branch",
                        "type": "boolean",
                        "required": "false",
                        "description": "Send notifications only for the default branch"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for push events"
                    },
                    {
                        "attribute": "issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for issue events"
                    },
                    {
                        "attribute": "confidential_issues_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for confidential issue events"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for merge request events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for tag push events"
                    },
                    {
                        "attribute": "note_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for note events"
                    },
                    {
                        "attribute": "pipeline_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for pipeline events"
                    },
                    {
                        "attribute": "wiki_page_events",
                        "type": "boolean",
                        "required": "false",
                        "description": "Enable notifications for wiki page events"
                    },
                    {
                        "attribute": "push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive push events notifications"
                    },
                    {
                        "attribute": "issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive issues events notifications"
                    },
                    {
                        "attribute": "confidential_issue_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive confidential issues events notifications"
                    },
                    {
                        "attribute": "merge_request_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive merge request events notifications"
                    },
                    {
                        "attribute": "note_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive note events notifications"
                    },
                    {
                        "attribute": "tag_push_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive tag push events notifications"
                    },
                    {
                        "attribute": "pipeline_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive pipeline events notifications"
                    },
                    {
                        "attribute": "wiki_page_channel",
                        "type": "string",
                        "required": "false",
                        "description": "The name of the channel to receive wiki page events notifications"
                    }
                ]
            },
            {
                "title": "delete-mattermost-notifications-service",
                "description": "Delete Mattermost Notifications service for a project.",
                "api": [
                    "DELETE /projects/:id/services/mattermost"
                ],
                "params": []
            },
            {
                "title": "get-mattermost-notifications-service-settings",
                "description": "Get Mattermost notifications service settings for a project.",
                "api": [
                    "GET /projects/:id/services/mattermost"
                ],
                "params": []
            },
            {
                "title": "jetbrains-teamcity-ci",
                "description": "A continuous integration and build server",
                "api": [
                    "PUT /projects/:id/services/teamcity"
                ],
                "params": [
                    {
                        "attribute": "teamcity_url",
                        "type": "string",
                        "required": "true",
                        "description": "TeamCity root URL. For example, https://teamcity.example.com\n"
                    },
                    {
                        "attribute": "build_type",
                        "type": "string",
                        "required": "true",
                        "description": "Build configuration ID"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "true",
                        "description": "A user with permissions to trigger a manual build"
                    },
                    {
                        "attribute": "password",
                        "type": "string",
                        "required": "true",
                        "description": "The password of the user"
                    }
                ]
            },
            {
                "title": "createedit-jetbrains-teamcity-ci-service",
                "description": "Set JetBrains TeamCity CI service for a project.",
                "api": [
                    "PUT /projects/:id/services/teamcity"
                ],
                "params": [
                    {
                        "attribute": "teamcity_url",
                        "type": "string",
                        "required": "true",
                        "description": "TeamCity root URL. For example, https://teamcity.example.com\n"
                    },
                    {
                        "attribute": "build_type",
                        "type": "string",
                        "required": "true",
                        "description": "Build configuration ID"
                    },
                    {
                        "attribute": "username",
                        "type": "string",
                        "required": "true",
                        "description": "A user with permissions to trigger a manual build"
                    },
                    {
                        "attribute": "password",
                        "type": "string",
                        "required": "true",
                        "description": "The password of the user"
                    }
                ]
            },
            {
                "title": "delete-jetbrains-teamcity-ci-service",
                "description": "Delete JetBrains TeamCity CI service for a project.",
                "api": [
                    "DELETE /projects/:id/services/teamcity"
                ],
                "params": []
            },
            {
                "title": "get-jetbrains-teamcity-ci-service-settings",
                "description": "Get JetBrains TeamCity CI service settings for a project.",
                "api": [
                    "GET /projects/:id/services/teamcity"
                ],
                "params": []
            },
            {
                "title": "jenkins-ci",
                "description": "A continuous integration and build server",
                "api": [
                    "PUT /projects/:id/services/jenkins"
                ],
                "params": [
                    {
                        "attribute": "jenkins_url",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Jenkins URL like http://jenkins.example.com\n"
                    }
                ]
            },
            {
                "title": "createedit-jenkins-ci-service",
                "description": "Set Jenkins CI service for a project.",
                "api": [
                    "PUT /projects/:id/services/jenkins"
                ],
                "params": [
                    {
                        "attribute": "jenkins_url",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Jenkins URL like http://jenkins.example.com\n"
                    }
                ]
            },
            {
                "title": "delete-jenkins-ci-service",
                "description": "Delete Jenkins CI service for a project.",
                "api": [
                    "DELETE /projects/:id/services/jenkins"
                ],
                "params": []
            },
            {
                "title": "get-jenkins-ci-service-settings",
                "description": "Get Jenkins CI service settings for a project.",
                "api": [
                    "GET /projects/:id/services/jenkins"
                ],
                "params": []
            },
            {
                "title": "jenkins-ci-deprecated-service",
                "description": "A continuous integration and build server",
                "api": [
                    "PUT /projects/:id/services/jenkins-deprecated"
                ],
                "params": [
                    {
                        "attribute": "project_url",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Jenkins project URL like http://jenkins.example.com/job/my"
                    }
                ]
            },
            {
                "title": "createedit-jenkins-ci-deprecated-service",
                "description": "Set Jenkins CI (Deprecated) service for a project.",
                "api": [
                    "PUT /projects/:id/services/jenkins-deprecated"
                ],
                "params": [
                    {
                        "attribute": "project_url",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Jenkins project URL like http://jenkins.example.com/job/my"
                    }
                ]
            },
            {
                "title": "delete-jenkins-ci-deprecated-service",
                "description": "Delete Jenkins CI (Deprecated) service for a project.",
                "api": [
                    "DELETE /projects/:id/services/jenkins-deprecated"
                ],
                "params": []
            },
            {
                "title": "get-jenkins-ci-deprecated-service-settings",
                "description": "Get Jenkins CI (Deprecated) service settings for a project.",
                "api": [
                    "GET /projects/:id/services/jenkins-deprecated"
                ],
                "params": []
            },
            {
                "title": "mockci",
                "description": "Mock an external CI. See gitlab-org/gitlab-mock-ci-service for an example of a companion mock service.",
                "api": [
                    "PUT /projects/:id/services/mock-ci"
                ],
                "params": [
                    {
                        "attribute": "mock_service_url",
                        "type": "string",
                        "required": "true",
                        "description": "http://localhost:4004"
                    }
                ]
            },
            {
                "title": "createedit-mockci-service",
                "description": "Set MockCI service for a project.",
                "api": [
                    "PUT /projects/:id/services/mock-ci"
                ],
                "params": [
                    {
                        "attribute": "mock_service_url",
                        "type": "string",
                        "required": "true",
                        "description": "http://localhost:4004"
                    }
                ]
            },
            {
                "title": "delete-mockci-service",
                "description": "Delete MockCI service for a project.",
                "api": [
                    "DELETE /projects/:id/services/mock-ci"
                ],
                "params": []
            },
            {
                "title": "get-mockci-service-settings",
                "description": "Get MockCI service settings for a project.",
                "api": [
                    "GET /projects/:id/services/mock-ci"
                ],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/version.html",
        "urlPart": "version.html",
        "allEntries": [
            {
                "title": "version-api",
                "description": "Retrieve version information for this GitLab instance. Responds 200 OK for\nauthenticated users.",
                "api": [
                    "GET /version"
                ],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/users.html",
        "urlPart": "users.html",
        "allEntries": [
            {
                "title": "list-users",
                "description": "Get a list of users",
                "api": [
                    "GET /users"
                ],
                "params": []
            },
            {
                "title": "list-users-for-admins",
                "description": "You can lookup users by external UID and provider:",
                "api": [
                    "GET /users"
                ],
                "params": [
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects ordered by id, name, username, created_at, or updated_at fields. Default is id\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "two_factor",
                        "type": "string",
                        "required": "no",
                        "description": "Filter users by Two-factor authentication. Filter values are enabled or disabled. By default it returns all users"
                    }
                ]
            },
            {
                "title": "single-user",
                "description": "Get a single user.",
                "api": [
                    "GET /users/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of a user"
                    }
                ]
            },
            {
                "title": "user-creation",
                "description": "Creates a new user. Note only administrators can create new users. Either password or reset_password should be specified (reset_password takes priority). If reset_password is false, then password is required.",
                "api": [
                    "POST /users"
                ],
                "params": [
                    {
                        "attribute": "email",
                        "type": "",
                        "required": "required",
                        "paramDescription": " Email"
                    }
                ]
            },
            {
                "title": "user-modification",
                "description": "Modifies an existing user. Only administrators can change attributes of a user.",
                "api": [
                    "PUT /users/:id"
                ],
                "params": [
                    {
                        "attribute": "email",
                        "type": "",
                        "required": "optional",
                        "paramDescription": " Email"
                    }
                ]
            },
            {
                "title": "user-deletion",
                "description": "Deletes a user. Available only for administrators.\nThis returns a 204 No Content status code if the operation was successfully or 404 if the resource was not found.",
                "api": [
                    "DELETE /users/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of the user"
                    }
                ]
            },
            {
                "title": "user",
                "description": "Gets currently authenticated user.",
                "api": [
                    "GET /user"
                ],
                "params": []
            },
            {
                "title": "user-for-admins",
                "description": "Gets currently authenticated user.",
                "api": [
                    "GET /user"
                ],
                "params": [
                    {
                        "attribute": "sudo",
                        "type": "",
                        "required": "optional",
                        "paramDescription": " the ID of a user to make the call in their place"
                    }
                ]
            },
            {
                "title": "user-status",
                "description": "Get the status of the currently signed in user.",
                "api": [
                    "GET /user/status"
                ],
                "params": []
            },
            {
                "title": "get-the-status-of-a-user",
                "description": "Get the status of a user.",
                "api": [
                    "GET /users/:id_or_username/status"
                ],
                "params": [
                    {
                        "attribute": "id_or_username",
                        "type": "string",
                        "required": "yes",
                        "description": "The id or username of the user to get a status of"
                    }
                ]
            },
            {
                "title": "set-user-status",
                "description": "Set the status of the current user.",
                "api": [
                    "PUT /user/status"
                ],
                "params": [
                    {
                        "attribute": "emoji",
                        "type": "string",
                        "required": "no",
                        "description": "The name of the emoji to use as status, if omitted speech_balloon is used. Emoji name can be one of the specified names in the Gemojione index."
                    },
                    {
                        "attribute": "message",
                        "type": "string",
                        "required": "no",
                        "description": "The message to set as a status. It can also contain emoji codes."
                    }
                ]
            },
            {
                "title": "list-user-projects",
                "description": "Please refer to the List of user projects .",
                "api": [
                    "GET /user/keys"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "list-ssh-keys",
                "description": "Get a list of currently authenticated user’s SSH keys.",
                "api": [
                    "GET /user/keys"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "list-ssh-keys-for-user",
                "description": "Get a list of a specified user’s SSH keys.",
                "api": [
                    "GET /users/:id/keys"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "single-ssh-key",
                "description": "Get a single key.",
                "api": [
                    "GET /user/keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "key_id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of an SSH key"
                    }
                ]
            },
            {
                "title": "add-ssh-key",
                "description": "Creates a new key owned by the currently authenticated user.",
                "api": [
                    "POST /user/keys"
                ],
                "params": [
                    {
                        "attribute": "title",
                        "type": "",
                        "required": "required",
                        "paramDescription": " new SSH Key’s title"
                    }
                ]
            },
            {
                "title": "add-ssh-key-for-user",
                "description": "Create new key owned by specified user. Available only for admin",
                "api": [
                    "POST /users/:id/keys"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "delete-ssh-key-for-current-user",
                "description": "Deletes key owned by currently authenticated user.\nThis returns a 204 No Content status code if the operation was successfully or 404 if the resource was not found.",
                "api": [
                    "DELETE /user/keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "key_id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " SSH key ID"
                    }
                ]
            },
            {
                "title": "delete-ssh-key-for-given-user",
                "description": "Deletes key owned by a specified user. Available only for admin.",
                "api": [
                    "DELETE /users/:id/keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "list-all-gpg-keys",
                "description": "Get a list of currently authenticated user’s GPG keys.",
                "api": [
                    "GET /user/gpg_keys"
                ],
                "params": []
            },
            {
                "title": "get-a-specific-gpg-key",
                "description": "Get a specific GPG key of currently authenticated user.",
                "api": [
                    "GET /user/gpg_keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the GPG key"
                    }
                ]
            },
            {
                "title": "add-a-gpg-key",
                "description": "Creates a new GPG key owned by the currently authenticated user.",
                "api": [
                    "POST /user/gpg_keys"
                ],
                "params": [
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The new GPG key"
                    }
                ]
            },
            {
                "title": "delete-a-gpg-key",
                "description": "Delete a GPG key owned by currently authenticated user.",
                "api": [
                    "DELETE /user/gpg_keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the GPG key"
                    }
                ]
            },
            {
                "title": "list-all-gpg-keys-for-given-user",
                "description": "Get a list of a specified user’s GPG keys. Available only for admins.",
                "api": [
                    "GET /users/:id/gpg_keys"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    }
                ]
            },
            {
                "title": "get-a-specific-gpg-key-for-a-given-user",
                "description": "Get a specific GPG key for a given user. Available only for admins.",
                "api": [
                    "GET /users/:id/gpg_keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the GPG key"
                    }
                ]
            },
            {
                "title": "add-a-gpg-key-for-a-given-user",
                "description": "Create new GPG key owned by the specified user. Available only for admins.",
                "api": [
                    "POST /users/:id/gpg_keys"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the GPG key"
                    }
                ]
            },
            {
                "title": "delete-a-gpg-key-for-a-given-user",
                "description": "Delete a GPG key owned by a specified user. Available only for admins.",
                "api": [
                    "DELETE /users/:id/gpg_keys/:key_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "key_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the GPG key"
                    }
                ]
            },
            {
                "title": "list-emails",
                "description": "Get a list of currently authenticated user’s emails.",
                "api": [
                    "GET /user/emails"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "list-emails-for-user",
                "description": "Get a list of a specified user’s emails. Available only for admin",
                "api": [
                    "GET /users/:id/emails"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "single-email",
                "description": "Get a single email.",
                "api": [
                    "GET /user/emails/:email_id"
                ],
                "params": [
                    {
                        "attribute": "email_id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " email ID"
                    }
                ]
            },
            {
                "title": "add-email",
                "description": "Creates a new email owned by the currently authenticated user.",
                "api": [
                    "POST /user/emails"
                ],
                "params": [
                    {
                        "attribute": "email",
                        "type": "",
                        "required": "required",
                        "paramDescription": " email address"
                    }
                ]
            },
            {
                "title": "add-email-for-user",
                "description": "Create new email owned by specified user. Available only for admin",
                "api": [
                    "POST /users/:id/emails"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "delete-email-for-current-user",
                "description": "Deletes email owned by currently authenticated user.\nThis returns a 204 No Content status code if the operation was successfully or 404 if the resource was not found.",
                "api": [
                    "DELETE /user/emails/:email_id"
                ],
                "params": [
                    {
                        "attribute": "email_id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " email ID"
                    }
                ]
            },
            {
                "title": "delete-email-for-given-user",
                "description": "Deletes email owned by a specified user. Available only for admin.",
                "api": [
                    "DELETE /users/:id/emails/:email_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "block-user",
                "description": "Blocks the specified user.  Available only for admin.",
                "api": [
                    "POST /users/:id/block"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "unblock-user",
                "description": "Unblocks the specified user.  Available only for admin.",
                "api": [
                    "POST /users/:id/unblock"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " id of specified user"
                    }
                ]
            },
            {
                "title": "get-user-contribution-events",
                "description": "Please refer to the Events API documentation",
                "api": [
                    "GET /users/:user_id/impersonation_tokens"
                ],
                "params": [
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "filter tokens based on state (all, active, inactive)"
                    }
                ]
            },
            {
                "title": "get-all-impersonation-tokens-of-a-user",
                "description": "It retrieves every impersonation token of the user. Use the pagination\nparameters page and per_page to restrict the list of impersonation tokens.",
                "api": [
                    "GET /users/:user_id/impersonation_tokens"
                ],
                "params": [
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "filter tokens based on state (all, active, inactive)"
                    }
                ]
            },
            {
                "title": "get-an-impersonation-token-of-a-user",
                "description": "It shows a user’s impersonation token.",
                "api": [
                    "GET /users/:user_id/impersonation_tokens/:impersonation_token_id"
                ],
                "params": [
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "impersonation_token_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the impersonation token"
                    }
                ]
            },
            {
                "title": "create-an-impersonation-token",
                "description": "It creates a new impersonation token. Note that only administrators can do this.\nYou are only able to create impersonation tokens to impersonate the user and perform\nboth API calls and Git reads and writes. The user will not see these tokens in their profile\nsettings page.",
                "api": [
                    "POST /users/:user_id/impersonation_tokens"
                ],
                "params": [
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the impersonation token"
                    },
                    {
                        "attribute": "expires_at",
                        "type": "date",
                        "required": "no",
                        "description": "The expiration date of the impersonation token in ISO format (YYYY-MM-DD)"
                    },
                    {
                        "attribute": "scopes",
                        "type": "array",
                        "required": "yes",
                        "description": "The array of scopes of the impersonation token (api, read_user)"
                    }
                ]
            },
            {
                "title": "revoke-an-impersonation-token",
                "description": "It revokes an impersonation token.",
                "api": [
                    "DELETE /users/:user_id/impersonation_tokens/:impersonation_token_id"
                ],
                "params": [
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the user"
                    },
                    {
                        "attribute": "impersonation_token_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the impersonation token"
                    }
                ]
            },
            {
                "title": "get-user-activities-admin-only",
                "description": "Get the last activity date for all users, sorted from oldest to newest.",
                "api": [
                    "GET /user/activities"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/environments.html",
        "urlPart": "environments.html",
        "allEntries": [
            {
                "title": "environments-api",
                "description": "Get all environments for a given project.",
                "api": [
                    "GET /projects/:id/environments"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-environments",
                "description": "Get all environments for a given project.",
                "api": [
                    "GET /projects/:id/environments"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "create-a-new-environment",
                "description": "Creates a new environment with the given name and external_url.",
                "api": [
                    "POST /projects/:id/environments"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the environment"
                    },
                    {
                        "attribute": "external_url",
                        "type": "string",
                        "required": "no",
                        "description": "Place to link to for this environment"
                    }
                ]
            },
            {
                "title": "edit-an-existing-environment",
                "description": "Updates an existing environment’s name and/or external_url.",
                "api": [
                    "PUT /projects/:id/environments/:environments_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user",
                        "undefined": " "
                    },
                    {
                        "attribute": "environment_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the environment",
                        "undefined": "The ID of the environment"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "The new name of the environment",
                        "undefined": " "
                    },
                    {
                        "attribute": "external_url",
                        "type": "string",
                        "required": "no",
                        "description": "The new external_url",
                        "undefined": " "
                    }
                ]
            },
            {
                "title": "delete-an-environment",
                "description": "It returns 204 if the environment was successfully deleted, and 404 if the environment does not exist.",
                "api": [
                    "DELETE /projects/:id/environments/:environment_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "environment_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the environment"
                    }
                ]
            },
            {
                "title": "stop-an-environment",
                "description": "It returns 200 if the environment was successfully stopped, and 404 if the environment does not exist.",
                "api": [
                    "POST /projects/:id/environments/:environment_id/stop"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "environment_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the environment"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/members.html",
        "urlPart": "members.html",
        "allEntries": [
            {
                "title": "group-and-project-members-api",
                "description": "Valid access levels",
                "api": [
                    "10 => Guest access",
                    "20 => Reporter access",
                    "30 => Developer access",
                    "40 => Maintainer access",
                    "50 => Owner access # Only valid for groups"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "query",
                        "type": "string",
                        "required": "no",
                        "description": "A query string to search for members"
                    }
                ]
            },
            {
                "title": "list-all-members-of-a-group-or-project",
                "description": "Gets a list of group or project members viewable by the authenticated user.\nReturns only direct members and not inherited members through ancestors groups.",
                "api": [
                    "GET /groups/:id/members",
                    "GET /projects/:id/members"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "query",
                        "type": "string",
                        "required": "no",
                        "description": "A query string to search for members"
                    }
                ]
            },
            {
                "title": "list-all-members-of-a-group-or-project-including-inherited-members",
                "description": "Gets a list of group or project members viewable by the authenticated user, including inherited members through ancestor groups.\nReturns multiple times the same user (with different member attributes) when the user is a member of the project/group and of one or more ancestor group.",
                "api": [
                    "GET /groups/:id/members/all",
                    "GET /projects/:id/members/all"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "query",
                        "type": "string",
                        "required": "no",
                        "description": "A query string to search for members"
                    }
                ]
            },
            {
                "title": "get-a-member-of-a-group-or-project",
                "description": "Gets a member of a group or project.",
                "api": [
                    "GET /groups/:id/members/:user_id",
                    "GET /projects/:id/members/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the member"
                    }
                ]
            },
            {
                "title": "add-a-member-to-a-group-or-project",
                "description": "Adds a member to a group or project.",
                "api": [
                    "POST /groups/:id/members",
                    "POST /projects/:id/members"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the new member"
                    },
                    {
                        "attribute": "access_level",
                        "type": "integer",
                        "required": "yes",
                        "description": "A valid access level"
                    },
                    {
                        "attribute": "expires_at",
                        "type": "string",
                        "required": "no",
                        "description": "A date string in the format YEAR-MONTH-DAY"
                    }
                ]
            },
            {
                "title": "edit-a-member-of-a-group-or-project",
                "description": "Updates a member of a group or project.",
                "api": [
                    "PUT /groups/:id/members/:user_id",
                    "PUT /projects/:id/members/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the member"
                    },
                    {
                        "attribute": "access_level",
                        "type": "integer",
                        "required": "yes",
                        "description": "A valid access level"
                    },
                    {
                        "attribute": "expires_at",
                        "type": "string",
                        "required": "no",
                        "description": "A date string in the format YEAR-MONTH-DAY"
                    }
                ]
            },
            {
                "title": "remove-a-member-from-a-group-or-project",
                "description": "Removes a user from a group or project.",
                "api": [
                    "DELETE /groups/:id/members/:user_id",
                    "DELETE /projects/:id/members/:user_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project or group owned by the authenticated user"
                    },
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the member"
                    }
                ]
            },
            {
                "title": "give-a-group-access-to-a-project",
                "description": "Look at share project with group",
                "api": [],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/geo_nodes.html",
        "urlPart": "geo_nodes.html",
        "allEntries": [
            {
                "title": "geo-nodes-api",
                "description": "In order to interact with Geo node endpoints, you need to authenticate yourself\nas an admin.",
                "api": [
                    "GET /geo_nodes"
                ],
                "params": []
            },
            {
                "title": "retrieve-configuration-about-all-geo-nodes",
                "description": "Example response:",
                "api": [
                    "GET /geo_nodes"
                ],
                "params": []
            },
            {
                "title": "retrieve-configuration-about-a-specific-geo-node",
                "description": "Example response:",
                "api": [
                    "GET /geo_nodes/:id"
                ],
                "params": []
            },
            {
                "title": "edit-a-geo-node",
                "description": "Updates an existing Geo secondary node. The primary node cannot be edited.",
                "api": [
                    "PUT /geo_nodes/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the Geo node."
                    },
                    {
                        "attribute": "enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag indicating if the Geo node is enabled."
                    },
                    {
                        "attribute": "url",
                        "type": "string",
                        "required": "no",
                        "description": "The URL to connect to the Geo node."
                    },
                    {
                        "attribute": "files_max_capacity",
                        "type": "integer",
                        "required": "no",
                        "description": "Control the maximum concurrency of LFS/attachment backfill for this secondary node."
                    },
                    {
                        "attribute": "repos_max_capacity",
                        "type": "integer",
                        "required": "no",
                        "description": "Control the maximum concurrency of repository backfill for this secondary node."
                    },
                    {
                        "attribute": "verification_max_capacity",
                        "type": "integer",
                        "required": "no",
                        "description": "Control the maximum concurrency of verification for this node."
                    }
                ]
            },
            {
                "title": "delete-a-geo-node",
                "description": "Removes the Geo node.",
                "api": [
                    "DELETE /geo_nodes/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the Geo node."
                    }
                ]
            },
            {
                "title": "repair-a-geo-node",
                "description": "To repair the OAuth authentication of a Geo node.",
                "api": [
                    "POST /geo_nodes/:id/repair"
                ],
                "params": []
            },
            {
                "title": "retrieve-status-about-all-geo-nodes",
                "description": "Example response:",
                "api": [
                    "GET /geo_nodes/status"
                ],
                "params": []
            },
            {
                "title": "retrieve-status-about-a-specific-geo-node",
                "description": "Example response:",
                "api": [
                    "GET /geo_nodes/:id/status"
                ],
                "params": []
            },
            {
                "title": "retrieve-project-sync-or-verification-failures-that-occurred-on-the-current-node",
                "description": "This only works on a secondary node.",
                "api": [
                    "GET /geo_nodes/current/failures"
                ],
                "params": [
                    {
                        "attribute": "type",
                        "type": "string",
                        "required": "no",
                        "description": "Type of failed objects (repository/wiki)"
                    },
                    {
                        "attribute": "failure_type",
                        "type": "string",
                        "required": "no",
                        "description": "Type of failures (sync/checksum_mismatch/verification)"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/features.html",
        "urlPart": "features.html",
        "allEntries": [
            {
                "title": "features-flags-api",
                "description": "All methods require administrator authorization.",
                "api": [
                    "GET /features"
                ],
                "params": []
            },
            {
                "title": "list-all-features",
                "description": "Get a list of all persisted features, with its gate values.",
                "api": [
                    "GET /features"
                ],
                "params": []
            },
            {
                "title": "set-or-create-a-feature",
                "description": "Set a feature’s gate value. If a feature with the given name doesn’t exist yet\nit will be created. The value can be a boolean, or an integer to indicate\npercentage of time.",
                "api": [
                    "POST /features/:name"
                ],
                "params": [
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "Name of the feature to create or update"
                    },
                    {
                        "attribute": "value",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "\ntrue or false to enable/disable, or an integer for percentage of time"
                    },
                    {
                        "attribute": "feature_group",
                        "type": "string",
                        "required": "no",
                        "description": "A Feature group name"
                    },
                    {
                        "attribute": "user",
                        "type": "string",
                        "required": "no",
                        "description": "A GitLab username"
                    }
                ]
            },
            {
                "title": "delete-a-feature",
                "description": "Removes a feature gate. Response is equal when the gate exists, or doesn’t.",
                "api": [
                    "DELETE /features/:name"
                ],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/group_badges.html",
        "urlPart": "group_badges.html",
        "allEntries": [
            {
                "title": "group-badges-api",
                "description": "Badges support placeholders that will be replaced in real time in both the link and image URL. The allowed placeholders are:",
                "api": [
                    "GET /groups/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "placeholder-tokens",
                "description": "Badges support placeholders that will be replaced in real time in both the link and image URL. The allowed placeholders are:",
                "api": [
                    "GET /groups/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "list-all-badges-of-a-group",
                "description": "Gets a list of a group’s badges.",
                "api": [
                    "GET /groups/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "get-a-badge-of-a-group",
                "description": "Gets a badge of a group.",
                "api": [
                    "GET /groups/:id/badges/:badge_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "badge_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The badge ID"
                    }
                ]
            },
            {
                "title": "add-a-badge-to-a-group",
                "description": "Adds a badge to a group.",
                "api": [
                    "POST /groups/:id/badges"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "link_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge link"
                    },
                    {
                        "attribute": "image_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge image"
                    }
                ]
            },
            {
                "title": "edit-a-badge-of-a-group",
                "description": "Updates a badge of a group.",
                "api": [
                    "PUT /groups/:id/badges/:badge_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "badge_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The badge ID"
                    },
                    {
                        "attribute": "link_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL of the badge link"
                    },
                    {
                        "attribute": "image_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL of the badge image"
                    }
                ]
            },
            {
                "title": "remove-a-badge-from-a-group",
                "description": "Removes a badge from a group.",
                "api": [
                    "DELETE /groups/:id/badges/:badge_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "badge_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The badge ID"
                    }
                ]
            },
            {
                "title": "preview-a-badge-from-a-group",
                "description": "Returns how the link_url and image_url final URLs would be after resolving the placeholder interpolation.",
                "api": [
                    "GET /groups/:id/badges/render"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "link_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge link"
                    },
                    {
                        "attribute": "image_url",
                        "type": "string",
                        "required": "yes",
                        "description": "URL of the badge image"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/templates/gitignores.html",
        "urlPart": "templates/gitignores.html",
        "allEntries": [
            {
                "title": "gitignores-api",
                "description": "Get all gitignore templates.",
                "api": [
                    "GET /templates/gitignores"
                ],
                "params": []
            },
            {
                "title": "list-gitignore-templates",
                "description": "Get all gitignore templates.",
                "api": [
                    "GET /templates/gitignores"
                ],
                "params": []
            },
            {
                "title": "single-gitignore-template",
                "description": "Get a single gitignore template.",
                "api": [
                    "GET /templates/gitignores/:key"
                ],
                "params": [
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the gitignore template"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/events.html",
        "urlPart": "events.html",
        "allEntries": [
            {
                "title": "events",
                "description": "Available action types for the action parameter are:",
                "api": [
                    "YYYY-MM-DD"
                ],
                "params": [
                    {
                        "attribute": "created",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "filter-parameters",
                "description": "Available action types for the action parameter are:",
                "api": [
                    "YYYY-MM-DD"
                ],
                "params": [
                    {
                        "attribute": "created",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "action-types",
                "description": "Available action types for the action parameter are:",
                "api": [
                    "YYYY-MM-DD"
                ],
                "params": [
                    {
                        "attribute": "created",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "target-types",
                "description": "Available target types for the target_type parameter are:",
                "api": [
                    "YYYY-MM-DD"
                ],
                "params": [
                    {
                        "attribute": "issue",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "date-formatting",
                "description": "Dates for the before and after parameters should be supplied in the following format:",
                "api": [
                    "YYYY-MM-DD"
                ],
                "params": []
            },
            {
                "title": "event-time-period-limit",
                "description": "GitLab removes events older than 2 years from the events table for performance reasons.",
                "api": [
                    "GET /events"
                ],
                "params": [
                    {
                        "attribute": "action",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular action type\n"
                    },
                    {
                        "attribute": "target_type",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular target type\n"
                    },
                    {
                        "attribute": "before",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created before a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "after",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created after a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Sort events in asc or desc order by created_at. Default is desc\n"
                    }
                ]
            },
            {
                "title": "list-currently-authenticated-users-events",
                "description": "Get a list of events for the authenticated user. Scope read_user or api is required.",
                "api": [
                    "GET /events"
                ],
                "params": [
                    {
                        "attribute": "action",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular action type\n"
                    },
                    {
                        "attribute": "target_type",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular target type\n"
                    },
                    {
                        "attribute": "before",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created before a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "after",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created after a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Sort events in asc or desc order by created_at. Default is desc\n"
                    }
                ]
            },
            {
                "title": "get-user-contribution-events",
                "description": "Get the contribution events for the specified user, sorted from newest to oldest. Scope read_user or api is required.",
                "api": [
                    "GET /users/:id/events"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID or Username of the user"
                    },
                    {
                        "attribute": "action",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular action type\n"
                    },
                    {
                        "attribute": "target_type",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular target type\n"
                    },
                    {
                        "attribute": "before",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created before a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "after",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created after a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Sort events in asc or desc order by created_at. Default is desc\n"
                    }
                ]
            },
            {
                "title": "list-a-projects-visible-events",
                "description": "Get a list of visible events for a particular project.",
                "api": [
                    "GET /projects/:project_id/events"
                ],
                "params": [
                    {
                        "attribute": "project_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "action",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular action type\n"
                    },
                    {
                        "attribute": "target_type",
                        "type": "string",
                        "required": "no",
                        "description": "Include only events of a particular target type\n"
                    },
                    {
                        "attribute": "before",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created before a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "after",
                        "type": "date",
                        "required": "no",
                        "description": "Include only events created after a particular date. Please see here for the supported format\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Sort events in asc or desc order by created_at. Default is desc\n"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/groups.html",
        "urlPart": "groups.html",
        "allEntries": [
            {
                "title": "groups-api",
                "description": "Get a list of visible groups for the authenticated user. When accessed without\nauthentication, only public groups are returned.",
                "api": [
                    "GET /groups"
                ],
                "params": [
                    {
                        "attribute": "skip_groups",
                        "type": "array of integers",
                        "required": "no",
                        "description": "Skip the group IDs passed"
                    },
                    {
                        "attribute": "all_available",
                        "type": "boolean",
                        "required": "no",
                        "description": "Show all the groups you have access to (defaults to false for authenticated users, true for admin); Attributes owned and min_access_level have precedence"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return the list of authorized groups matching the search criteria"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Order groups by name, path or id. Default is name\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Order groups in asc or desc order. Default is asc\n"
                    },
                    {
                        "attribute": "statistics",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include group statistics (admins only)"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    },
                    {
                        "attribute": "owned",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit to groups explicitly owned by the current user"
                    },
                    {
                        "attribute": "min_access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "Limit to groups where current user has at least this access level\n"
                    }
                ]
            },
            {
                "title": "list-groups",
                "description": "Get a list of visible groups for the authenticated user. When accessed without\nauthentication, only public groups are returned.",
                "api": [
                    "GET /groups"
                ],
                "params": [
                    {
                        "attribute": "skip_groups",
                        "type": "array of integers",
                        "required": "no",
                        "description": "Skip the group IDs passed"
                    },
                    {
                        "attribute": "all_available",
                        "type": "boolean",
                        "required": "no",
                        "description": "Show all the groups you have access to (defaults to false for authenticated users, true for admin); Attributes owned and min_access_level have precedence"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return the list of authorized groups matching the search criteria"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Order groups by name, path or id. Default is name\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Order groups in asc or desc order. Default is asc\n"
                    },
                    {
                        "attribute": "statistics",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include group statistics (admins only)"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    },
                    {
                        "attribute": "owned",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit to groups explicitly owned by the current user"
                    },
                    {
                        "attribute": "min_access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "Limit to groups where current user has at least this access level\n"
                    }
                ]
            },
            {
                "title": "list-a-groups-subgroups",
                "description": "Get a list of visible direct subgroups in this group.\nWhen accessed without authentication, only public groups are returned.",
                "api": [
                    "GET /groups/:id/subgroups"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group of the parent group"
                    },
                    {
                        "attribute": "skip_groups",
                        "type": "array of integers",
                        "required": "no",
                        "description": "Skip the group IDs passed"
                    },
                    {
                        "attribute": "all_available",
                        "type": "boolean",
                        "required": "no",
                        "description": "Show all the groups you have access to (defaults to false for authenticated users, true for admin); Attributes owned and min_access_level have precedence"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return the list of authorized groups matching the search criteria"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Order groups by name, path or id. Default is name\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Order groups in asc or desc order. Default is asc\n"
                    },
                    {
                        "attribute": "statistics",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include group statistics (admins only)"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    },
                    {
                        "attribute": "owned",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit to groups explicitly owned by the current user"
                    },
                    {
                        "attribute": "min_access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "Limit to groups where current user has at least this access level\n"
                    }
                ]
            },
            {
                "title": "list-a-groups-projects",
                "description": "Get a list of projects in this group. When accessed without authentication, only\npublic projects are returned.",
                "api": [
                    "GET /groups/:id/projects"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "archived",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by archived status"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "Limit by visibility public, internal, or private\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects ordered by id, name, path, created_at, updated_at, or last_activity_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return list of authorized projects matching the search criteria"
                    },
                    {
                        "attribute": "simple",
                        "type": "boolean",
                        "required": "no",
                        "description": "Return only the ID, URL, name, and path of each project"
                    },
                    {
                        "attribute": "owned",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects owned by the current user"
                    },
                    {
                        "attribute": "starred",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects starred by the current user"
                    },
                    {
                        "attribute": "with_issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled issues feature"
                    },
                    {
                        "attribute": "with_merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled merge requests feature"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    }
                ]
            },
            {
                "title": "details-of-a-group",
                "description": "Get all details of a group. This endpoint can be accessed without authentication\nif the group is publicly accessible.",
                "api": [
                    "GET /groups/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    },
                    {
                        "attribute": "with_projects",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include details from projects that belong to the specified group (defaults to true)."
                    }
                ]
            },
            {
                "title": "new-group",
                "description": "Creates a new project group. Available only for users who can create groups.",
                "api": [
                    "POST /groups"
                ],
                "params": [
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the group"
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "yes",
                        "description": "The path of the group"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The group’s description"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "The group’s visibility. Can be private, internal, or public."
                    },
                    {
                        "attribute": "lfs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable Large File Storage (LFS) for the projects in this group"
                    },
                    {
                        "attribute": "request_access_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow users to request member access."
                    },
                    {
                        "attribute": "parent_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The parent group id for creating nested group."
                    },
                    {
                        "attribute": "shared_runners_minutes_limit",
                        "type": "integer",
                        "required": "no",
                        "description": "(admin-only) Pipeline minutes quota for this group."
                    }
                ]
            },
            {
                "title": "transfer-project-to-group",
                "description": "Transfer a project to the Group namespace. Available only for admin",
                "api": [
                    "POST  /groups/:id/projects/:project_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "project_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "update-group",
                "description": "Updates the project group. Only available to group owners and administrators.",
                "api": [
                    "PUT /groups/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the group"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "The name of the group"
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "no",
                        "description": "The path of the group"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of the group"
                    },
                    {
                        "attribute": "membership_lock",
                        "type": "boolean",
                        "required": "no",
                        "description": "Prevent adding new members to project membership within this group"
                    },
                    {
                        "attribute": "share_with_group_lock",
                        "type": "boolean",
                        "required": "no",
                        "description": "Prevent sharing a project with another group within this group"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "The visibility level of the group. Can be private, internal, or public."
                    },
                    {
                        "attribute": "\nlfs_enabled (optional)",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable/disable Large File Storage (LFS) for the projects in this group"
                    },
                    {
                        "attribute": "request_access_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow users to request member access."
                    },
                    {
                        "attribute": "file_template_project_id",
                        "type": "integer",
                        "required": "no",
                        "description": "\n(Premium) The ID of a project to load custom file templates from"
                    },
                    {
                        "attribute": "shared_runners_minutes_limit",
                        "type": "integer",
                        "required": "no",
                        "description": "(admin-only) Pipeline minutes quota for this group"
                    }
                ]
            },
            {
                "title": "remove-group",
                "description": "Removes group with all projects inside. Only available to group owners and administrators.",
                "api": [
                    "DELETE /groups/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or path of a user group"
                    }
                ]
            },
            {
                "title": "search-for-group",
                "description": "Get all groups that match your string in their name or path.",
                "api": [
                    "GET /groups?search=foobar"
                ],
                "params": []
            },
            {
                "title": "sync-group-with-ldap",
                "description": "Syncs the group with its linked LDAP group. Only available to group owners and administrators.",
                "api": [
                    "POST /groups/:id/ldap_sync"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or path of a user group"
                    }
                ]
            },
            {
                "title": "group-members",
                "description": "Please consult the Group Members documentation.",
                "api": [
                    "POST /groups/:id/ldap_group_links"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of a group"
                    }
                ]
            },
            {
                "title": "add-ldap-group-link",
                "description": "Adds LDAP group link",
                "api": [
                    "POST /groups/:id/ldap_group_links"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of a group"
                    }
                ]
            },
            {
                "title": "delete-ldap-group-link",
                "description": "Deletes a LDAP group link",
                "api": [
                    "DELETE /groups/:id/ldap_group_links/:cn"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of a group"
                    }
                ]
            },
            {
                "title": "namespaces-in-groups",
                "description": "By default, groups only get 20 namespaces at a time because the API results are paginated.",
                "api": [],
                "params": []
            },
            {
                "title": "group-badges",
                "description": "Read more in the Group Badges documentation.",
                "api": [],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/snippets.html",
        "urlPart": "snippets.html",
        "allEntries": [
            {
                "title": "snippets-api",
                "description": "Snippets in GitLab can be either private, internal, or public.\nYou can set it with the visibility field in the snippet.",
                "api": [
                    "GET /snippets"
                ],
                "params": [
                    {
                        "attribute": "private",
                        "type": "The snippet is visible only to the snippet creator"
                    },
                    {
                        "attribute": "internal",
                        "type": "The snippet is visible for any logged in user"
                    },
                    {
                        "attribute": "public",
                        "type": "The snippet can be accessed without any authentication"
                    }
                ]
            },
            {
                "title": "snippet-visibility-level",
                "description": "Snippets in GitLab can be either private, internal, or public.\nYou can set it with the visibility field in the snippet.",
                "api": [
                    "GET /snippets"
                ],
                "params": [
                    {
                        "attribute": "private",
                        "type": "The snippet is visible only to the snippet creator"
                    },
                    {
                        "attribute": "internal",
                        "type": "The snippet is visible for any logged in user"
                    },
                    {
                        "attribute": "public",
                        "type": "The snippet can be accessed without any authentication"
                    }
                ]
            },
            {
                "title": "list-snippets",
                "description": "Get a list of current user’s snippets.",
                "api": [
                    "GET /snippets"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "Integer",
                        "required": "yes",
                        "description": "The ID of a snippet"
                    }
                ]
            },
            {
                "title": "single-snippet",
                "description": "Get a single snippet.",
                "api": [
                    "GET /snippets/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "Integer",
                        "required": "yes",
                        "description": "The ID of a snippet"
                    }
                ]
            },
            {
                "title": "create-new-snippet",
                "description": "Creates a new snippet. The user must have permission to create new snippets.",
                "api": [
                    "POST /snippets"
                ],
                "params": [
                    {
                        "attribute": "title",
                        "type": "String",
                        "required": "yes",
                        "description": "The title of a snippet"
                    },
                    {
                        "attribute": "file_name",
                        "type": "String",
                        "required": "yes",
                        "description": "The name of a snippet file"
                    },
                    {
                        "attribute": "content",
                        "type": "String",
                        "required": "yes",
                        "description": "The content of a snippet"
                    },
                    {
                        "attribute": "description",
                        "type": "String",
                        "required": "no",
                        "description": "The description of a snippet"
                    },
                    {
                        "attribute": "visibility",
                        "type": "String",
                        "required": "no",
                        "description": "The snippet’s visibility"
                    }
                ]
            },
            {
                "title": "update-snippet",
                "description": "Updates an existing snippet. The user must have permission to change an existing snippet.",
                "api": [
                    "PUT /snippets/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "Integer",
                        "required": "yes",
                        "description": "The ID of a snippet"
                    },
                    {
                        "attribute": "title",
                        "type": "String",
                        "required": "no",
                        "description": "The title of a snippet"
                    },
                    {
                        "attribute": "file_name",
                        "type": "String",
                        "required": "no",
                        "description": "The name of a snippet file"
                    },
                    {
                        "attribute": "description",
                        "type": "String",
                        "required": "no",
                        "description": "The description of a snippet"
                    },
                    {
                        "attribute": "content",
                        "type": "String",
                        "required": "no",
                        "description": "The content of a snippet"
                    },
                    {
                        "attribute": "visibility",
                        "type": "String",
                        "required": "no",
                        "description": "The snippet’s visibility"
                    }
                ]
            },
            {
                "title": "delete-snippet",
                "description": "Deletes an existing snippet.",
                "api": [
                    "DELETE /snippets/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "Integer",
                        "required": "yes",
                        "description": "The ID of a snippet"
                    }
                ]
            },
            {
                "title": "explore-all-public-snippets",
                "description": "Example response:",
                "api": [
                    "GET /snippets/public"
                ],
                "params": [
                    {
                        "attribute": "per_page",
                        "type": "Integer",
                        "required": "no",
                        "description": "number of snippets to return per page"
                    },
                    {
                        "attribute": "page",
                        "type": "Integer",
                        "required": "no",
                        "description": "the page to retrieve"
                    }
                ]
            },
            {
                "title": "get-user-agent-details",
                "description": "Available only for admins.",
                "api": [
                    "GET /snippets/:id/user_agent_detail"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "Integer",
                        "required": "yes",
                        "description": "The ID of a snippet"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/templates/dockerfiles.html",
        "urlPart": "templates/dockerfiles.html",
        "allEntries": [
            {
                "title": "dockerfiles-api",
                "description": "Get all Dockerfile templates.",
                "api": [
                    "GET /templates/dockerfiles"
                ],
                "params": []
            },
            {
                "title": "list-dockerfile-templates",
                "description": "Get all Dockerfile templates.",
                "api": [
                    "GET /templates/dockerfiles"
                ],
                "params": []
            },
            {
                "title": "single-dockerfile-template",
                "description": "Get a single Dockerfile template.",
                "api": [
                    "GET /templates/dockerfiles/:key"
                ],
                "params": [
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the Dockerfile template"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/boards.html",
        "urlPart": "boards.html",
        "allEntries": [
            {
                "title": "issue-boards-api",
                "description": "Every API call to boards must be authenticated.",
                "api": [
                    "GET /projects/:id/boards"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "project-board",
                "description": "Lists Issue Boards in the given project.",
                "api": [
                    "GET /projects/:id/boards"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "single-board",
                "description": "Get a single board.",
                "api": [
                    "GET /projects/:id/boards/:board_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    }
                ]
            },
            {
                "title": "create-a-board-starter",
                "description": "Creates a board.",
                "api": [
                    "POST /projects/:id/boards"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the new board"
                    }
                ]
            },
            {
                "title": "update-a-board-starter",
                "description": "Updates a board.",
                "api": [
                    "PUT /projects/:id/boards/:board_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "The new name of the board"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The assignee the board should be scoped to"
                    },
                    {
                        "attribute": "milestone_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The milestone the board should be scoped to"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated list of label names which the board should be scoped to"
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "The weight range from 0 to 9, to which the board should be scoped to"
                    }
                ]
            },
            {
                "title": "delete-a-board-starter",
                "description": "Deletes a board.",
                "api": [
                    "DELETE /projects/:id/boards/:board_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    }
                ]
            },
            {
                "title": "list-board-lists",
                "description": "Get a list of the board’s lists.\nDoes not include open and closed lists",
                "api": [
                    "GET /projects/:id/boards/:board_id/lists"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    }
                ]
            },
            {
                "title": "single-board-list",
                "description": "Get a single board list.",
                "api": [
                    "GET /projects/:id/boards/:board_id/lists/:list_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "list_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board’s list"
                    }
                ]
            },
            {
                "title": "new-board-list",
                "description": "Creates a new Issue Board list.",
                "api": [
                    "POST /projects/:id/boards/:board_id/lists"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "label_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a label"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a user"
                    },
                    {
                        "attribute": "milestone_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of a milestone"
                    }
                ]
            },
            {
                "title": "edit-board-list",
                "description": "Updates an existing Issue Board list. This call is used to change list position.",
                "api": [
                    "PUT /projects/:id/boards/:board_id/lists/:list_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "list_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board’s list"
                    },
                    {
                        "attribute": "position",
                        "type": "integer",
                        "required": "yes",
                        "description": "The position of the list"
                    }
                ]
            },
            {
                "title": "delete-a-board-list",
                "description": "Only for admins and project owners. Soft deletes the board list in question.",
                "api": [
                    "DELETE /projects/:id/boards/:board_id/lists/:list_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "list_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board’s list"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/templates/gitlab_ci_ymls.html",
        "urlPart": "templates/gitlab_ci_ymls.html",
        "allEntries": [
            {
                "title": "gitlab-ci-ymls-api",
                "description": "Get all GitLab CI YML templates.",
                "api": [
                    "GET /templates/gitlab_ci_ymls"
                ],
                "params": []
            },
            {
                "title": "list-gitlab-ci-yml-templates",
                "description": "Get all GitLab CI YML templates.",
                "api": [
                    "GET /templates/gitlab_ci_ymls"
                ],
                "params": []
            },
            {
                "title": "single-gitlab-ci-yml-template",
                "description": "Get a single GitLab CI YML template.",
                "api": [
                    "GET /templates/gitlab_ci_ymls/:key"
                ],
                "params": [
                    {
                        "attribute": "key",
                        "type": "string",
                        "required": "yes",
                        "description": "The key of the GitLab CI YML template"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/issue_links.html",
        "urlPart": "issue_links.html",
        "allEntries": [
            {
                "title": "issue-links-api",
                "description": "Get a list of related issues of a given issue, sorted by the relationship creation datetime (ascending).\nIssues will be filtered according to the user authorizations.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/links"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "list-issue-relations",
                "description": "Get a list of related issues of a given issue, sorted by the relationship creation datetime (ascending).\nIssues will be filtered according to the user authorizations.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/links"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "create-an-issue-link",
                "description": "Creates a two-way relation between two issues. User must be allowed to update both issues in order to succeed.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/links"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    },
                    {
                        "attribute": "target_project_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project of a target project"
                    },
                    {
                        "attribute": "target_issue_iid",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The internal ID of a target project’s issue"
                    }
                ]
            },
            {
                "title": "delete-an-issue-link",
                "description": "Deletes an issue link, thus removes the two-way relationship.",
                "api": [
                    "DELETE /projects/:id/issues/:issue_iid/links/:issue_link_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    },
                    {
                        "attribute": "issue_link_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of an issue relationship"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/license.html",
        "urlPart": "license.html",
        "allEntries": [
            {
                "title": "license",
                "description": "In order to interact with license endpoints, you need to authenticate yourself\nas an admin.",
                "api": [
                    "GET /license"
                ],
                "params": [
                    {
                        "attribute": "license",
                        "type": "string",
                        "required": "yes",
                        "description": "The license string"
                    }
                ]
            },
            {
                "title": "retrieve-information-about-the-current-license",
                "description": "Example response:",
                "api": [
                    "GET /license"
                ],
                "params": [
                    {
                        "attribute": "license",
                        "type": "string",
                        "required": "yes",
                        "description": "The license string"
                    }
                ]
            },
            {
                "title": "add-a-new-license",
                "description": "Example response:",
                "api": [
                    "POST /license"
                ],
                "params": [
                    {
                        "attribute": "license",
                        "type": "string",
                        "required": "yes",
                        "description": "The license string"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/milestones.html",
        "urlPart": "milestones.html",
        "allEntries": [
            {
                "title": "milestones-api",
                "description": "Returns a list of project milestones.",
                "api": [
                    "GET /projects/:id/milestones",
                    "GET /projects/:id/milestones?iids[]=42",
                    "GET /projects/:id/milestones?iids[]=42&iids[]=43",
                    "GET /projects/:id/milestones?state=active",
                    "GET /projects/:id/milestones?state=closed",
                    "GET /projects/:id/milestones?search=version"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "optional",
                        "description": "Return only the milestones having the given iid\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only active or closed milestones"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only milestones with a title or description matching the provided string"
                    }
                ]
            },
            {
                "title": "list-project-milestones",
                "description": "Returns a list of project milestones.",
                "api": [
                    "GET /projects/:id/milestones",
                    "GET /projects/:id/milestones?iids[]=42",
                    "GET /projects/:id/milestones?iids[]=42&iids[]=43",
                    "GET /projects/:id/milestones?state=active",
                    "GET /projects/:id/milestones?state=closed",
                    "GET /projects/:id/milestones?search=version"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "optional",
                        "description": "Return only the milestones having the given iid\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only active or closed milestones"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only milestones with a title or description matching the provided string"
                    }
                ]
            },
            {
                "title": "get-single-milestone",
                "description": "Gets a single project milestone.",
                "api": [
                    "GET /projects/:id/milestones/:milestone_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-new-milestone",
                "description": "Creates a new project milestone.",
                "api": [
                    "POST /projects/:id/milestones"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "edit-milestone",
                "description": "Updates an existing project milestone.",
                "api": [
                    "PUT /projects/:id/milestones/:milestone_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "delete-project-milestone",
                "description": "Only for user with developer access to the project.",
                "api": [
                    "DELETE /projects/:id/milestones/:milestone_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-all-issues-assigned-to-a-single-milestone",
                "description": "Gets all issues assigned to a single project milestone.",
                "api": [
                    "GET /projects/:id/milestones/:milestone_id/issues"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-all-merge-requests-assigned-to-a-single-milestone",
                "description": "Gets all merge requests assigned to a single project milestone.",
                "api": [
                    "GET /projects/:id/milestones/:milestone_id/merge_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/markdown.html",
        "urlPart": "markdown.html",
        "allEntries": [
            {
                "title": "markdown-api",
                "description": "Available only in APIv4.",
                "api": [
                    "POST /api/v4/markdown"
                ],
                "params": [
                    {
                        "attribute": "text",
                        "type": "string",
                        "required": "yes",
                        "description": "The markdown text to render"
                    },
                    {
                        "attribute": "gfm",
                        "type": "boolean",
                        "required": "no (optional)",
                        "description": "Render text using GitLab Flavored Markdown. Default is false\n"
                    },
                    {
                        "attribute": "project",
                        "type": "string",
                        "required": "no (optional)",
                        "description": "Use project as a context when creating references using GitLab Flavored Markdown. Authentication is required if a project is not public."
                    }
                ]
            },
            {
                "title": "render-an-arbitrary-markdown-document",
                "description": "Response example:",
                "api": [
                    "POST /api/v4/markdown"
                ],
                "params": [
                    {
                        "attribute": "text",
                        "type": "string",
                        "required": "yes",
                        "description": "The markdown text to render"
                    },
                    {
                        "attribute": "gfm",
                        "type": "boolean",
                        "required": "no (optional)",
                        "description": "Render text using GitLab Flavored Markdown. Default is false\n"
                    },
                    {
                        "attribute": "project",
                        "type": "string",
                        "required": "no (optional)",
                        "description": "Use project as a context when creating references using GitLab Flavored Markdown. Authentication is required if a project is not public."
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/managed_licenses.html",
        "urlPart": "managed_licenses.html",
        "allEntries": [
            {
                "title": "managed-licenses-api-ultimate",
                "description": "Get all managed licenses for a given project.",
                "api": [
                    "GET /projects/:id/managed_licenses"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-managed-licenses",
                "description": "Get all managed licenses for a given project.",
                "api": [
                    "GET /projects/:id/managed_licenses"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "show-an-existing-managed-license",
                "description": "Shows an existing managed license.",
                "api": [
                    "GET /projects/:id/managed_licenses/:managed_license_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "managed_license_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded name of the license belonging to the project"
                    }
                ]
            },
            {
                "title": "create-a-new-managed-license",
                "description": "Creates a new managed license for the given project with the given name and approval status.",
                "api": [
                    "POST /projects/:id/managed_licenses"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the managed license"
                    },
                    {
                        "attribute": "approval_status",
                        "type": "string",
                        "required": "yes",
                        "description": "The approval status. “approved” or “blacklisted”"
                    }
                ]
            },
            {
                "title": "delete-a-managed-license",
                "description": "Deletes a managed license with a given id.",
                "api": [
                    "DELETE /projects/:id/managed_licenses/:managed_license_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "managed_license_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded name of the license belonging to the project"
                    }
                ]
            },
            {
                "title": "edit-an-existing-managed-license",
                "description": "Updates an existing managed license with a new approval status.",
                "api": [
                    "PATCH /projects/:id/managed_licenses/:managed_license_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "managed_license_id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded name of the license belonging to the project"
                    },
                    {
                        "attribute": "approval_status",
                        "type": "string",
                        "required": "yes",
                        "description": "The approval status. “approved” or “blacklisted”"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/keys.html",
        "urlPart": "keys.html",
        "allEntries": [
            {
                "title": "keys-api",
                "description": "Get SSH key with user by ID of an SSH key. Note only administrators can lookup SSH key with user by ID of an SSH key.",
                "api": [
                    "GET /keys/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of an SSH key"
                    }
                ]
            },
            {
                "title": "get-ssh-key-with-user-by-id-of-an-ssh-key",
                "description": "Get SSH key with user by ID of an SSH key. Note only administrators can lookup SSH key with user by ID of an SSH key.",
                "api": [
                    "GET /keys/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID of an SSH key"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/labels.html",
        "urlPart": "labels.html",
        "allEntries": [
            {
                "title": "labels-api",
                "description": "Get all labels for a given project.",
                "api": [
                    "GET /projects/:id/labels"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "list-labels",
                "description": "Get all labels for a given project.",
                "api": [
                    "GET /projects/:id/labels"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "create-a-new-label",
                "description": "Creates a new label for the given repository with the given name and color.",
                "api": [
                    "POST /projects/:id/labels"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the label"
                    },
                    {
                        "attribute": "color",
                        "type": "string",
                        "required": "yes",
                        "description": "The color of the label given in 6-digit hex notation with leading ‘#’ sign (e.g. #FFAABB) or one of the CSS color names\n"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of the label"
                    },
                    {
                        "attribute": "priority",
                        "type": "integer",
                        "required": "no",
                        "description": "The priority of the label. Must be greater or equal than zero or null to remove the priority."
                    }
                ]
            },
            {
                "title": "delete-a-label",
                "description": "Deletes a label with a given name.",
                "api": [
                    "DELETE /projects/:id/labels"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the label"
                    }
                ]
            },
            {
                "title": "edit-an-existing-label",
                "description": "Updates an existing label with new name or new color. At least one parameter\nis required, to update the label.",
                "api": [
                    "PUT /projects/:id/labels"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the existing label"
                    },
                    {
                        "attribute": "new_name",
                        "type": "string",
                        "required": "yes if color is not provided",
                        "description": "The new name of the label"
                    },
                    {
                        "attribute": "color",
                        "type": "string",
                        "required": "yes if new_name is not provided",
                        "description": "The color of the label given in 6-digit hex notation with leading ‘#’ sign (e.g. #FFAABB) or one of the CSS color names\n"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The new description of the label"
                    },
                    {
                        "attribute": "priority",
                        "type": "integer",
                        "required": "no",
                        "description": "The new priority of the label. Must be greater or equal than zero or null to remove the priority."
                    }
                ]
            },
            {
                "title": "subscribe-to-a-label",
                "description": "Subscribes the authenticated user to a label to receive notifications.\nIf the user is already subscribed to the label, the status code 304\nis returned.",
                "api": [
                    "POST /projects/:id/labels/:label_id/subscribe"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "label_id",
                        "type": "integer or string",
                        "required": "yes",
                        "description": "The ID or title of a project’s label"
                    }
                ]
            },
            {
                "title": "unsubscribe-from-a-label",
                "description": "Unsubscribes the authenticated user from a label to not receive notifications\nfrom it. If the user is not subscribed to the label, the\nstatus code 304 is returned.",
                "api": [
                    "POST /projects/:id/labels/:label_id/unsubscribe"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "label_id",
                        "type": "integer or string",
                        "required": "yes",
                        "description": "The ID or title of a project’s label"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/group_milestones.html",
        "urlPart": "group_milestones.html",
        "allEntries": [
            {
                "title": "group-milestones-api",
                "description": "Returns a list of group milestones.",
                "api": [
                    "GET /groups/:id/milestones",
                    "GET /groups/:id/milestones?iids[]=42",
                    "GET /groups/:id/milestones?iids[]=42&iids[]=43",
                    "GET /groups/:id/milestones?state=active",
                    "GET /groups/:id/milestones?state=closed",
                    "GET /groups/:id/milestones?search=version"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "optional",
                        "description": "Return only the milestones having the given iid\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only active or closed milestones"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only milestones with a title or description matching the provided string"
                    }
                ]
            },
            {
                "title": "list-group-milestones",
                "description": "Returns a list of group milestones.",
                "api": [
                    "GET /groups/:id/milestones",
                    "GET /groups/:id/milestones?iids[]=42",
                    "GET /groups/:id/milestones?iids[]=42&iids[]=43",
                    "GET /groups/:id/milestones?state=active",
                    "GET /groups/:id/milestones?state=closed",
                    "GET /groups/:id/milestones?search=version"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "optional",
                        "description": "Return only the milestones having the given iid\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only active or closed milestones"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "optional",
                        "description": "Return only milestones with a title or description matching the provided string"
                    }
                ]
            },
            {
                "title": "get-single-milestone",
                "description": "Gets a single group milestone.",
                "api": [
                    "GET /groups/:id/milestones/:milestone_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-new-milestone",
                "description": "Creates a new group milestone.",
                "api": [
                    "POST /groups/:id/milestones"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "edit-milestone",
                "description": "Updates an existing group milestone.",
                "api": [
                    "PUT /groups/:id/milestones/:milestone_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "delete-group-milestone",
                "description": "Only for user with developer access to the group.",
                "api": [
                    "DELETE /groups/:id/milestones/:milestone_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-all-issues-assigned-to-a-single-milestone",
                "description": "Gets all issues assigned to a single group milestone.",
                "api": [
                    "GET /groups/:id/milestones/:milestone_id/issues"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-all-merge-requests-assigned-to-a-single-milestone",
                "description": "Gets all merge requests assigned to a single group milestone.",
                "api": [
                    "GET /groups/:id/milestones/:milestone_id/merge_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/group_boards.html",
        "urlPart": "group_boards.html",
        "allEntries": [
            {
                "title": "group-issue-boards-api",
                "description": "Every API call to group boards must be authenticated.",
                "api": [
                    "GET /groups/:id/boards"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "group-board",
                "description": "Lists Issue Boards in the given group.",
                "api": [
                    "GET /groups/:id/boards"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    }
                ]
            },
            {
                "title": "single-board",
                "description": "Gets a single board.",
                "api": [
                    "GET /groups/:id/boards/:board_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    }
                ]
            },
            {
                "title": "create-a-board",
                "description": "Creates a board.",
                "api": [
                    "POST /groups/:id/boards"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the new board"
                    }
                ]
            },
            {
                "title": "update-a-board",
                "description": "Updates a board.",
                "api": [
                    "PUT /groups/:id/boards/:board_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "The new name of the board"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The assignee the board should be scoped to"
                    },
                    {
                        "attribute": "milestone_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The milestone the board should be scoped to"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated list of label names which the board should be scoped to"
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "The weight range from 0 to 9, to which the board should be scoped to"
                    }
                ]
            },
            {
                "title": "delete-a-board",
                "description": "Deletes a board.",
                "api": [
                    "DELETE /groups/:id/boards/:board_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    }
                ]
            },
            {
                "title": "list-board-lists",
                "description": "Get a list of the board’s lists.\nDoes not include open and closed lists",
                "api": [
                    "GET /groups/:id/boards/:board_id/lists"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    }
                ]
            },
            {
                "title": "single-board-list",
                "description": "Get a single board list.",
                "api": [
                    "GET /groups/:id/boards/:board_id/lists/:list_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "list_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board’s list"
                    }
                ]
            },
            {
                "title": "new-board-list",
                "description": "Creates a new Issue Board list.",
                "api": [
                    "POST /groups/:id/boards/:board_id/lists"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "label_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a label"
                    }
                ]
            },
            {
                "title": "edit-board-list",
                "description": "Updates an existing Issue Board list. This call is used to change list position.",
                "api": [
                    "PUT /groups/:id/boards/:board_id/lists/:list_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "list_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board’s list"
                    },
                    {
                        "attribute": "position",
                        "type": "integer",
                        "required": "yes",
                        "description": "The position of the list"
                    }
                ]
            },
            {
                "title": "delete-a-board-list",
                "description": "Only for admins and group owners. Soft deletes the board list in question.",
                "api": [
                    "DELETE /groups/:id/boards/:board_id/lists/:list_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "board_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board"
                    },
                    {
                        "attribute": "list_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a board’s list"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/projects.html",
        "urlPart": "projects.html",
        "allEntries": [
            {
                "title": "projects-api",
                "description": "Project in GitLab can be either private, internal or public.\nThis is determined by the visibility field in the project.",
                "api": [
                    "GET /projects"
                ],
                "params": [
                    {
                        "attribute": "private",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "project-visibility-level",
                "description": "Project in GitLab can be either private, internal or public.\nThis is determined by the visibility field in the project.",
                "api": [
                    "GET /projects"
                ],
                "params": [
                    {
                        "attribute": "private",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "project-merge-method",
                "description": "There are currently three options for merge_method to choose from:",
                "api": [
                    "GET /projects"
                ],
                "params": [
                    {
                        "attribute": "merge",
                        "type": "",
                        "required": "optional"
                    }
                ]
            },
            {
                "title": "list-all-projects",
                "description": "Get a list of all visible projects across GitLab for the authenticated user.\nWhen accessed without authentication, only public projects with “simple” fields are returned.",
                "api": [
                    "GET /projects"
                ],
                "params": [
                    {
                        "attribute": "archived",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by archived status"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "Limit by visibility public, internal, or private\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects ordered by id, name, path, created_at, updated_at, or last_activity_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return list of projects matching the search criteria"
                    },
                    {
                        "attribute": "simple",
                        "type": "boolean",
                        "required": "no",
                        "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned."
                    },
                    {
                        "attribute": "owned",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects explicitly owned by the current user"
                    },
                    {
                        "attribute": "membership",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects that the current user is a member of"
                    },
                    {
                        "attribute": "starred",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects starred by the current user"
                    },
                    {
                        "attribute": "statistics",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include project statistics"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    },
                    {
                        "attribute": "with_issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled issues feature"
                    },
                    {
                        "attribute": "with_merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled merge requests feature"
                    },
                    {
                        "attribute": "wiki_checksum_failed",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit projects where the wiki checksum calculation has failed (Introduced in GitLab Premium 11.2)\n"
                    },
                    {
                        "attribute": "repository_checksum_failed",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit projects where the repository checksum calculation has failed (Introduced in GitLab Premium 11.2)\n"
                    },
                    {
                        "attribute": "min_access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "Limit by current user minimal access level\n"
                    }
                ]
            },
            {
                "title": "list-user-projects",
                "description": "Get a list of visible projects owned by the given user. When accessed without authentication, only public projects are returned.",
                "api": [
                    "GET /users/:user_id/projects"
                ],
                "params": [
                    {
                        "attribute": "user_id",
                        "type": "string",
                        "required": "yes",
                        "description": "The ID or username of the user"
                    },
                    {
                        "attribute": "archived",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by archived status"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "Limit by visibility public, internal, or private\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects ordered by id, name, path, created_at, updated_at, or last_activity_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return list of projects matching the search criteria"
                    },
                    {
                        "attribute": "simple",
                        "type": "boolean",
                        "required": "no",
                        "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned."
                    },
                    {
                        "attribute": "owned",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects explicitly owned by the current user"
                    },
                    {
                        "attribute": "membership",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects that the current user is a member of"
                    },
                    {
                        "attribute": "starred",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects starred by the current user"
                    },
                    {
                        "attribute": "statistics",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include project statistics"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    },
                    {
                        "attribute": "with_issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled issues feature"
                    },
                    {
                        "attribute": "with_merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled merge requests feature"
                    },
                    {
                        "attribute": "min_access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "Limit by current user minimal access level\n"
                    }
                ]
            },
            {
                "title": "get-single-project",
                "description": "Get a specific project. This endpoint can be accessed without authentication if\nthe project is publicly accessible.",
                "api": [
                    "GET /projects/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "statistics",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include project statistics"
                    },
                    {
                        "attribute": "license",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include project license data"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    }
                ]
            },
            {
                "title": "get-project-users",
                "description": "Get the users list of a project.",
                "api": [
                    "GET /projects/:id/users"
                ],
                "params": [
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search for specific users"
                    }
                ]
            },
            {
                "title": "get-project-events",
                "description": "Please refer to the Events API documentation.",
                "api": [
                    "POST /projects"
                ],
                "params": [
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes if path is not provided",
                        "description": "The name of the new project. Equals path if not provided."
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "yes if name is not provided",
                        "description": "Repository name for new project. Generated based on name if not provided (generated lowercased with dashes)."
                    },
                    {
                        "attribute": "namespace_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Namespace for the new project (defaults to the current user’s namespace)"
                    },
                    {
                        "attribute": "default_branch",
                        "type": "string",
                        "required": "no",
                        "description": "\nmaster by default"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Short project description"
                    },
                    {
                        "attribute": "issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable issues for this project"
                    },
                    {
                        "attribute": "merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable merge requests for this project"
                    },
                    {
                        "attribute": "jobs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable jobs for this project"
                    },
                    {
                        "attribute": "wiki_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable wiki for this project"
                    },
                    {
                        "attribute": "snippets_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable snippets for this project"
                    },
                    {
                        "attribute": "resolve_outdated_diff_discussions",
                        "type": "boolean",
                        "required": "no",
                        "description": "Automatically resolve merge request diffs discussions on lines changed with a push"
                    },
                    {
                        "attribute": "container_registry_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable container registry for this project"
                    },
                    {
                        "attribute": "shared_runners_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable shared runners for this project"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "See project visibility level\n"
                    },
                    {
                        "attribute": "import_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL to import repository from"
                    },
                    {
                        "attribute": "public_jobs",
                        "type": "boolean",
                        "required": "no",
                        "description": "If true, jobs can be viewed by non-project-members"
                    },
                    {
                        "attribute": "only_allow_merge_if_pipeline_succeeds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged with successful jobs"
                    },
                    {
                        "attribute": "only_allow_merge_if_all_discussions_are_resolved",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged when all the discussions are resolved"
                    },
                    {
                        "attribute": "merge_method",
                        "type": "string",
                        "required": "no",
                        "description": "Set the merge method used"
                    },
                    {
                        "attribute": "lfs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable LFS"
                    },
                    {
                        "attribute": "request_access_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow users to request member access"
                    },
                    {
                        "attribute": "tag_list",
                        "type": "array",
                        "required": "no",
                        "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project"
                    },
                    {
                        "attribute": "avatar",
                        "type": "mixed",
                        "required": "no",
                        "description": "Image file for avatar of the project"
                    },
                    {
                        "attribute": "printing_merge_request_link_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Show link to create/view merge request when pushing from the command line"
                    },
                    {
                        "attribute": "ci_config_path",
                        "type": "string",
                        "required": "no",
                        "description": "The path to CI config file"
                    },
                    {
                        "attribute": "repository_storage",
                        "type": "string",
                        "required": "no",
                        "description": "Which storage shard the repository is on. Available only to admins"
                    },
                    {
                        "attribute": "approvals_before_merge",
                        "type": "integer",
                        "required": "no",
                        "description": "How many approvers should approve merge request by default"
                    },
                    {
                        "attribute": "mirror",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enables pull mirroring in a project"
                    },
                    {
                        "attribute": "mirror_trigger_builds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Pull mirroring triggers builds"
                    },
                    {
                        "attribute": "initialize_with_readme",
                        "type": "boolean",
                        "required": "no",
                        "description": "\nfalse by default"
                    }
                ]
            },
            {
                "title": "create-project",
                "description": "Creates a new project owned by the authenticated user.",
                "api": [
                    "POST /projects"
                ],
                "params": [
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes if path is not provided",
                        "description": "The name of the new project. Equals path if not provided."
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "yes if name is not provided",
                        "description": "Repository name for new project. Generated based on name if not provided (generated lowercased with dashes)."
                    },
                    {
                        "attribute": "namespace_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Namespace for the new project (defaults to the current user’s namespace)"
                    },
                    {
                        "attribute": "default_branch",
                        "type": "string",
                        "required": "no",
                        "description": "\nmaster by default"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Short project description"
                    },
                    {
                        "attribute": "issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable issues for this project"
                    },
                    {
                        "attribute": "merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable merge requests for this project"
                    },
                    {
                        "attribute": "jobs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable jobs for this project"
                    },
                    {
                        "attribute": "wiki_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable wiki for this project"
                    },
                    {
                        "attribute": "snippets_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable snippets for this project"
                    },
                    {
                        "attribute": "resolve_outdated_diff_discussions",
                        "type": "boolean",
                        "required": "no",
                        "description": "Automatically resolve merge request diffs discussions on lines changed with a push"
                    },
                    {
                        "attribute": "container_registry_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable container registry for this project"
                    },
                    {
                        "attribute": "shared_runners_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable shared runners for this project"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "See project visibility level\n"
                    },
                    {
                        "attribute": "import_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL to import repository from"
                    },
                    {
                        "attribute": "public_jobs",
                        "type": "boolean",
                        "required": "no",
                        "description": "If true, jobs can be viewed by non-project-members"
                    },
                    {
                        "attribute": "only_allow_merge_if_pipeline_succeeds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged with successful jobs"
                    },
                    {
                        "attribute": "only_allow_merge_if_all_discussions_are_resolved",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged when all the discussions are resolved"
                    },
                    {
                        "attribute": "merge_method",
                        "type": "string",
                        "required": "no",
                        "description": "Set the merge method used"
                    },
                    {
                        "attribute": "lfs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable LFS"
                    },
                    {
                        "attribute": "request_access_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow users to request member access"
                    },
                    {
                        "attribute": "tag_list",
                        "type": "array",
                        "required": "no",
                        "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project"
                    },
                    {
                        "attribute": "avatar",
                        "type": "mixed",
                        "required": "no",
                        "description": "Image file for avatar of the project"
                    },
                    {
                        "attribute": "printing_merge_request_link_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Show link to create/view merge request when pushing from the command line"
                    },
                    {
                        "attribute": "ci_config_path",
                        "type": "string",
                        "required": "no",
                        "description": "The path to CI config file"
                    },
                    {
                        "attribute": "repository_storage",
                        "type": "string",
                        "required": "no",
                        "description": "Which storage shard the repository is on. Available only to admins"
                    },
                    {
                        "attribute": "approvals_before_merge",
                        "type": "integer",
                        "required": "no",
                        "description": "How many approvers should approve merge request by default"
                    },
                    {
                        "attribute": "mirror",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enables pull mirroring in a project"
                    },
                    {
                        "attribute": "mirror_trigger_builds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Pull mirroring triggers builds"
                    },
                    {
                        "attribute": "initialize_with_readme",
                        "type": "boolean",
                        "required": "no",
                        "description": "\nfalse by default"
                    }
                ]
            },
            {
                "title": "create-project-for-user",
                "description": "Creates a new project owned by the specified user. Available only for admins.",
                "api": [
                    "POST /projects/user/:user_id"
                ],
                "params": [
                    {
                        "attribute": "user_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The user ID of the project owner"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "yes",
                        "description": "The name of the new project"
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "no",
                        "description": "Custom repository name for new project. By default generated based on name"
                    },
                    {
                        "attribute": "namespace_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Namespace for the new project (defaults to the current user’s namespace)"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Short project description"
                    },
                    {
                        "attribute": "issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable issues for this project"
                    },
                    {
                        "attribute": "merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable merge requests for this project"
                    },
                    {
                        "attribute": "jobs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable jobs for this project"
                    },
                    {
                        "attribute": "wiki_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable wiki for this project"
                    },
                    {
                        "attribute": "snippets_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable snippets for this project"
                    },
                    {
                        "attribute": "resolve_outdated_diff_discussions",
                        "type": "boolean",
                        "required": "no",
                        "description": "Automatically resolve merge request diffs discussions on lines changed with a push"
                    },
                    {
                        "attribute": "container_registry_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable container registry for this project"
                    },
                    {
                        "attribute": "shared_runners_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable shared runners for this project"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "See project visibility level\n"
                    },
                    {
                        "attribute": "import_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL to import repository from"
                    },
                    {
                        "attribute": "public_jobs",
                        "type": "boolean",
                        "required": "no",
                        "description": "If true, jobs can be viewed by non-project-members"
                    },
                    {
                        "attribute": "only_allow_merge_if_pipeline_succeeds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged with successful jobs"
                    },
                    {
                        "attribute": "only_allow_merge_if_all_discussions_are_resolved",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged when all the discussions are resolved"
                    },
                    {
                        "attribute": "merge_method",
                        "type": "string",
                        "required": "no",
                        "description": "Set the merge method used"
                    },
                    {
                        "attribute": "lfs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable LFS"
                    },
                    {
                        "attribute": "request_access_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow users to request member access"
                    },
                    {
                        "attribute": "tag_list",
                        "type": "array",
                        "required": "no",
                        "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project"
                    },
                    {
                        "attribute": "avatar",
                        "type": "mixed",
                        "required": "no",
                        "description": "Image file for avatar of the project"
                    },
                    {
                        "attribute": "printing_merge_request_link_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Show link to create/view merge request when pushing from the command line"
                    },
                    {
                        "attribute": "ci_config_path",
                        "type": "string",
                        "required": "no",
                        "description": "The path to CI config file"
                    },
                    {
                        "attribute": "repository_storage",
                        "type": "string",
                        "required": "no",
                        "description": "Which storage shard the repository is on. Available only to admins"
                    },
                    {
                        "attribute": "approvals_before_merge",
                        "type": "integer",
                        "required": "no",
                        "description": "How many approvers should approve merge request by default"
                    },
                    {
                        "attribute": "external_authorization_classification_label",
                        "type": "string",
                        "required": "no",
                        "description": "The classification label for the project"
                    },
                    {
                        "attribute": "mirror",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enables pull mirroring in a project"
                    },
                    {
                        "attribute": "mirror_trigger_builds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Pull mirroring triggers builds"
                    }
                ]
            },
            {
                "title": "edit-project",
                "description": "Updates an existing project.",
                "api": [
                    "PUT /projects/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "name",
                        "type": "string",
                        "required": "no",
                        "description": "The name of the project"
                    },
                    {
                        "attribute": "path",
                        "type": "string",
                        "required": "no",
                        "description": "Custom repository name for the project. By default generated based on name"
                    },
                    {
                        "attribute": "default_branch",
                        "type": "string",
                        "required": "no",
                        "description": "\nmaster by default"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Short project description"
                    },
                    {
                        "attribute": "issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable issues for this project"
                    },
                    {
                        "attribute": "merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable merge requests for this project"
                    },
                    {
                        "attribute": "jobs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable jobs for this project"
                    },
                    {
                        "attribute": "wiki_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable wiki for this project"
                    },
                    {
                        "attribute": "snippets_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable snippets for this project"
                    },
                    {
                        "attribute": "resolve_outdated_diff_discussions",
                        "type": "boolean",
                        "required": "no",
                        "description": "Automatically resolve merge request diffs discussions on lines changed with a push"
                    },
                    {
                        "attribute": "container_registry_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable container registry for this project"
                    },
                    {
                        "attribute": "shared_runners_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable shared runners for this project"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "See project visibility level\n"
                    },
                    {
                        "attribute": "import_url",
                        "type": "string",
                        "required": "no",
                        "description": "URL to import repository from"
                    },
                    {
                        "attribute": "public_jobs",
                        "type": "boolean",
                        "required": "no",
                        "description": "If true, jobs can be viewed by non-project-members"
                    },
                    {
                        "attribute": "only_allow_merge_if_pipeline_succeeds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged with successful jobs"
                    },
                    {
                        "attribute": "only_allow_merge_if_all_discussions_are_resolved",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set whether merge requests can only be merged when all the discussions are resolved"
                    },
                    {
                        "attribute": "merge_method",
                        "type": "string",
                        "required": "no",
                        "description": "Set the merge method used"
                    },
                    {
                        "attribute": "lfs_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enable LFS"
                    },
                    {
                        "attribute": "request_access_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow users to request member access"
                    },
                    {
                        "attribute": "tag_list",
                        "type": "array",
                        "required": "no",
                        "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project"
                    },
                    {
                        "attribute": "avatar",
                        "type": "mixed",
                        "required": "no",
                        "description": "Image file for avatar of the project"
                    },
                    {
                        "attribute": "ci_config_path",
                        "type": "string",
                        "required": "no",
                        "description": "The path to CI config file"
                    },
                    {
                        "attribute": "repository_storage",
                        "type": "string",
                        "required": "no",
                        "description": "Which storage shard the repository is on. Available only to admins"
                    },
                    {
                        "attribute": "approvals_before_merge",
                        "type": "integer",
                        "required": "no",
                        "description": "How many approvers should approve merge request by default"
                    },
                    {
                        "attribute": "external_authorization_classification_label",
                        "type": "string",
                        "required": "no",
                        "description": "The classification label for the project"
                    },
                    {
                        "attribute": "mirror",
                        "type": "boolean",
                        "required": "no",
                        "description": "Enables pull mirroring in a project"
                    },
                    {
                        "attribute": "mirror_user_id",
                        "type": "integer",
                        "required": "no",
                        "description": "User responsible for all the activity surrounding a pull mirror event"
                    },
                    {
                        "attribute": "mirror_trigger_builds",
                        "type": "boolean",
                        "required": "no",
                        "description": "Pull mirroring triggers builds"
                    },
                    {
                        "attribute": "only_mirror_protected_branches",
                        "type": "boolean",
                        "required": "no",
                        "description": "Only mirror protected branches"
                    },
                    {
                        "attribute": "mirror_overwrites_diverged_branches",
                        "type": "boolean",
                        "required": "no",
                        "description": "Pull mirror overwrites diverged branches"
                    }
                ]
            },
            {
                "title": "fork-project",
                "description": "Forks a project into the user namespace of the authenticated user or the one provided.",
                "api": [
                    "POST /projects/:id/fork"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "namespace",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or path of the namespace that the project will be forked to"
                    }
                ]
            },
            {
                "title": "list-forks-of-a-project",
                "description": "List the projects accessible to the calling user that have an established, forked relationship with the specified project",
                "api": [
                    "GET /projects/:id/forks"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "archived",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by archived status"
                    },
                    {
                        "attribute": "visibility",
                        "type": "string",
                        "required": "no",
                        "description": "Limit by visibility public, internal, or private\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects ordered by id, name, path, created_at, updated_at, or last_activity_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return projects sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Return list of projects matching the search criteria"
                    },
                    {
                        "attribute": "simple",
                        "type": "boolean",
                        "required": "no",
                        "description": "Return only limited fields for each project. This is a no-op without authentication as then only simple fields are returned."
                    },
                    {
                        "attribute": "owned",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects explicitly owned by the current user"
                    },
                    {
                        "attribute": "membership",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects that the current user is a member of"
                    },
                    {
                        "attribute": "starred",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by projects starred by the current user"
                    },
                    {
                        "attribute": "statistics",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include project statistics"
                    },
                    {
                        "attribute": "with_custom_attributes",
                        "type": "boolean",
                        "required": "no",
                        "description": "Include custom attributes in response (admins only)"
                    },
                    {
                        "attribute": "with_issues_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled issues feature"
                    },
                    {
                        "attribute": "with_merge_requests_enabled",
                        "type": "boolean",
                        "required": "no",
                        "description": "Limit by enabled merge requests feature"
                    },
                    {
                        "attribute": "min_access_level",
                        "type": "integer",
                        "required": "no",
                        "description": "Limit by current user minimal access level\n"
                    }
                ]
            },
            {
                "title": "star-a-project",
                "description": "Stars a given project. Returns status code 304 if the project is already starred.",
                "api": [
                    "POST /projects/:id/star"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "unstar-a-project",
                "description": "Unstars a given project. Returns status code 304 if the project is not starred.",
                "api": [
                    "POST /projects/:id/unstar"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "languages",
                "description": "Get languages used in a project with percentage value.",
                "api": [
                    "GET /projects/:id/languages"
                ],
                "params": []
            },
            {
                "title": "archive-a-project",
                "description": "Archives the project if the user is either admin or the project owner of this project. This action is\nidempotent, thus archiving an already archived project will not change the project.",
                "api": [
                    "POST /projects/:id/archive"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "unarchive-a-project",
                "description": "Unarchives the project if the user is either admin or the project owner of this project. This action is\nidempotent, thus unarchiving a non-archived project will not change the project.",
                "api": [
                    "POST /projects/:id/unarchive"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "remove-project",
                "description": "Removes a project including all associated resources (issues, merge requests etc.)",
                "api": [
                    "DELETE /projects/:id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "upload-a-file",
                "description": "Uploads a file to the specified project to be used in an issue or merge request description, or a comment.",
                "api": [
                    "POST /projects/:id/uploads"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "file",
                        "type": "string",
                        "required": "yes",
                        "description": "The file to be uploaded"
                    }
                ]
            },
            {
                "title": "share-project-with-group",
                "description": "Allow to share project with group.",
                "api": [
                    "POST /projects/:id/share"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "group_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the group to share with"
                    },
                    {
                        "attribute": "group_access",
                        "type": "integer",
                        "required": "yes",
                        "description": "The permissions level to grant the group"
                    },
                    {
                        "attribute": "expires_at",
                        "type": "string",
                        "required": "no",
                        "description": "Share expiration date in ISO 8601 format: 2016-09-26"
                    }
                ]
            },
            {
                "title": "delete-a-shared-project-link-within-a-group",
                "description": "Unshare the project from the group. Returns 204 and no content on success.",
                "api": [
                    "DELETE /projects/:id/share/:group_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "group_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the group"
                    }
                ]
            },
            {
                "title": "hooks",
                "description": "Also called Project Hooks and Webhooks.\nThese are different for System Hooks that are system wide.",
                "api": [
                    "GET /projects/:id/hooks"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "list-project-hooks",
                "description": "Get a list of project hooks.",
                "api": [
                    "GET /projects/:id/hooks"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "get-project-hook",
                "description": "Get a specific hook for a project.",
                "api": [
                    "GET /projects/:id/hooks/:hook_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "hook_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project hook"
                    }
                ]
            },
            {
                "title": "add-project-hook",
                "description": "Adds a hook to a specified project.",
                "api": [
                    "POST /projects/:id/hooks"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "url",
                        "type": "string",
                        "required": "yes",
                        "description": "The hook URL"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on push events"
                    },
                    {
                        "attribute": "push_events_branch_filter",
                        "type": "string",
                        "required": "no",
                        "description": "Trigger hook on push events for matching branches only"
                    },
                    {
                        "attribute": "issues_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on issues events"
                    },
                    {
                        "attribute": "confidential_issues_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on confidential issues events"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on merge requests events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on tag push events"
                    },
                    {
                        "attribute": "note_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on note events"
                    },
                    {
                        "attribute": "job_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on job events"
                    },
                    {
                        "attribute": "pipeline_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on pipeline events"
                    },
                    {
                        "attribute": "wiki_page_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on wiki events"
                    },
                    {
                        "attribute": "enable_ssl_verification",
                        "type": "boolean",
                        "required": "no",
                        "description": "Do SSL verification when triggering the hook"
                    },
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "no",
                        "description": "Secret token to validate received payloads; this will not be returned in the response"
                    }
                ]
            },
            {
                "title": "edit-project-hook",
                "description": "Edits a hook for a specified project.",
                "api": [
                    "PUT /projects/:id/hooks/:hook_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "hook_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the project hook"
                    },
                    {
                        "attribute": "url",
                        "type": "string",
                        "required": "yes",
                        "description": "The hook URL"
                    },
                    {
                        "attribute": "push_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on push events"
                    },
                    {
                        "attribute": "push_events_branch_filter",
                        "type": "string",
                        "required": "no",
                        "description": "Trigger hook on push events for matching branches only"
                    },
                    {
                        "attribute": "issues_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on issues events"
                    },
                    {
                        "attribute": "confidential_issues_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on confidential issues events"
                    },
                    {
                        "attribute": "merge_requests_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on merge requests events"
                    },
                    {
                        "attribute": "tag_push_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on tag push events"
                    },
                    {
                        "attribute": "note_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on note events"
                    },
                    {
                        "attribute": "job_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on job events"
                    },
                    {
                        "attribute": "pipeline_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on pipeline events"
                    },
                    {
                        "attribute": "wiki_events",
                        "type": "boolean",
                        "required": "no",
                        "description": "Trigger hook on wiki events"
                    },
                    {
                        "attribute": "enable_ssl_verification",
                        "type": "boolean",
                        "required": "no",
                        "description": "Do SSL verification when triggering the hook"
                    },
                    {
                        "attribute": "token",
                        "type": "string",
                        "required": "no",
                        "description": "Secret token to validate received payloads; this will not be returned in the response"
                    }
                ]
            },
            {
                "title": "delete-project-hook",
                "description": "Removes a hook from a project. This is an idempotent method and can be called multiple times.\nEither the hook is available or not.",
                "api": [
                    "DELETE /projects/:id/hooks/:hook_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "hook_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the project hook"
                    }
                ]
            },
            {
                "title": "fork-relationship",
                "description": "Allows modification of the forked relationship between existing projects. Available only for project owners and admins.",
                "api": [],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "forked_from_id",
                        "type": "ID",
                        "required": "yes",
                        "description": "The ID of the project that was forked from"
                    }
                ]
            },
            {
                "title": "create-a-forked-fromto-relation-between-existing-projects",
                "description": "Search for projects by name which are accessible to the authenticated user. This\nendpoint can be accessed without authentication if the project is publicly\naccessible.",
                "api": [],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "forked_from_id",
                        "type": "ID",
                        "required": "yes",
                        "description": "The ID of the project that was forked from"
                    }
                ]
            },
            {
                "title": "delete-an-existing-forked-from-relationship",
                "description": "Search for projects by name which are accessible to the authenticated user. This\nendpoint can be accessed without authentication if the project is publicly\naccessible.",
                "api": [
                    "DELETE /projects/:id/fork"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "search-for-projects-by-name",
                "description": "Search for projects by name which are accessible to the authenticated user. This\nendpoint can be accessed without authentication if the project is publicly\naccessible.",
                "api": [
                    "GET /projects"
                ],
                "params": [
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "yes",
                        "description": "A string contained in the project name"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return requests ordered by id, name, created_at or last_activity_at fields"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return requests sorted in asc or desc order"
                    }
                ]
            },
            {
                "title": "start-the-housekeeping-task-for-a-project",
                "description": "Get the push rules of a project.",
                "api": [
                    "POST /projects/:id/housekeeping"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of the project or NAMESPACE/PROJECT_NAME"
                    }
                ]
            },
            {
                "title": "push-rules-starter",
                "description": "Get the push rules of a project.",
                "api": [
                    "GET /projects/:id/push_rule"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of the project or NAMESPACE/PROJECT_NAME"
                    }
                ]
            },
            {
                "title": "get-project-push-rules",
                "description": "Get the push rules of a project.",
                "api": [
                    "GET /projects/:id/push_rule"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of the project or NAMESPACE/PROJECT_NAME"
                    }
                ]
            },
            {
                "title": "add-project-push-rule",
                "description": "Adds a push rule to a specified project.",
                "api": [
                    "POST /projects/:id/push_rule"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of the project or NAMESPACE/PROJECT_NAME"
                    },
                    {
                        "attribute": "deny_delete_tag",
                        "type": "boolean",
                        "required": "no",
                        "description": "Deny deleting a tag"
                    },
                    {
                        "attribute": "member_check",
                        "type": "boolean",
                        "required": "no",
                        "description": "Restrict commits by author (email) to existing GitLab users"
                    },
                    {
                        "attribute": "prevent_secrets",
                        "type": "boolean",
                        "required": "no",
                        "description": "GitLab will reject any files that are likely to contain secrets"
                    },
                    {
                        "attribute": "commit_message_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All commit messages must match this, e.g. Fixed \\d+\\..*\n"
                    },
                    {
                        "attribute": "branch_name_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All branch names must match this, e.g. (feature|hotfix)\\/*\n"
                    },
                    {
                        "attribute": "author_email_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All commit author emails must match this, e.g. @my-company.com$\n"
                    },
                    {
                        "attribute": "file_name_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All commited filenames must not match this, e.g. (jar|exe)$\n"
                    },
                    {
                        "attribute": "max_file_size",
                        "type": "integer",
                        "required": "no",
                        "description": "Maximum file size (MB)"
                    }
                ]
            },
            {
                "title": "edit-project-push-rule",
                "description": "Edits a push rule for a specified project.",
                "api": [
                    "PUT /projects/:id/push_rule"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID of the project or NAMESPACE/PROJECT_NAME"
                    },
                    {
                        "attribute": "deny_delete_tag",
                        "type": "boolean",
                        "required": "no",
                        "description": "Deny deleting a tag"
                    },
                    {
                        "attribute": "member_check",
                        "type": "boolean",
                        "required": "no",
                        "description": "Restrict commits by author (email) to existing GitLab users"
                    },
                    {
                        "attribute": "prevent_secrets",
                        "type": "boolean",
                        "required": "no",
                        "description": "GitLab will reject any files that are likely to contain secrets"
                    },
                    {
                        "attribute": "commit_message_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All commit messages must match this, e.g. Fixed \\d+\\..*\n"
                    },
                    {
                        "attribute": "branch_name_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All branch names must match this, e.g. (feature|hotfix)\\/*\n"
                    },
                    {
                        "attribute": "author_email_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All commit author emails must match this, e.g. @my-company.com$\n"
                    },
                    {
                        "attribute": "file_name_regex",
                        "type": "string",
                        "required": "no",
                        "description": "All commited filenames must not match this, e.g. (jar|exe)$\n"
                    },
                    {
                        "attribute": "max_file_size",
                        "type": "integer",
                        "required": "no",
                        "description": "Maximum file size (MB)"
                    }
                ]
            },
            {
                "title": "delete-project-push-rule",
                "description": "Removes a push rule from a project. This is an idempotent method and can be called multiple times.\nEither the push rule is available or not.",
                "api": [
                    "DELETE /projects/:id/push_rule"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "transfer-a-project-to-a-new-namespace",
                "description": "Read more in the Branches documentation.",
                "api": [
                    "PUT /projects/:id/transfer"
                ],
                "params": [
                    {
                        "attribute": "namespace",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or path of the namespace to transfer to project to"
                    }
                ]
            },
            {
                "title": "branches",
                "description": "Read more in the Branches documentation.",
                "api": [
                    "POST /projects/:id/mirror/pull"
                ],
                "params": []
            },
            {
                "title": "project-importexport",
                "description": "Read more in the Project import/export documentation.",
                "api": [
                    "POST /projects/:id/mirror/pull"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "project-members",
                "description": "Read more in the Project members documentation.",
                "api": [
                    "POST /projects/:id/mirror/pull"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "start-the-pull-mirroring-process-for-a-project-starter",
                "description": "Read more in the Project Badges documentation.",
                "api": [
                    "POST /projects/:id/mirror/pull"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    }
                ]
            },
            {
                "title": "project-badges",
                "description": "Read more in the Project Badges documentation.",
                "api": [
                    "GET /projects/:id/snapshot"
                ],
                "params": []
            },
            {
                "title": "issue-and-merge-request-description-templates",
                "description": "The non-default issue and merge request description templates are managed inside the project’s repository. So you can manage them via the API through the Repositories API and the Repository Files API.",
                "api": [
                    "GET /projects/:id/snapshot"
                ],
                "params": []
            },
            {
                "title": "download-snapshot-of-a-git-repository",
                "description": "This endpoint may only be accessed by an administrative user.",
                "api": [
                    "GET /projects/:id/snapshot"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project\n"
                    },
                    {
                        "attribute": "wiki",
                        "type": "boolean",
                        "required": "no",
                        "description": "Whether to download the wiki, rather than project, repository"
                    }
                ]
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/merge_requests.html",
        "urlPart": "merge_requests.html",
        "allEntries": [
            {
                "title": "merge-requests-api",
                "description": "Every API call to merge requests must be authenticated.",
                "api": [
                    "GET /merge_requests",
                    "GET /merge_requests?state=opened",
                    "GET /merge_requests?state=all",
                    "GET /merge_requests?milestone=release",
                    "GET /merge_requests?labels=bug,reproduced",
                    "GET /merge_requests?author_id=5",
                    "GET /merge_requests?my_reaction_emoji=star",
                    "GET /merge_requests?scope=assigned_to_me"
                ],
                "params": []
            },
            {
                "title": "list-merge-requests",
                "description": "Get all merge requests the authenticated user has access to. By\ndefault it returns only merge requests created by the current user. To\nget all merge requests, use parameter scope=all.",
                "api": [
                    "GET /merge_requests",
                    "GET /merge_requests?state=opened",
                    "GET /merge_requests?state=all",
                    "GET /merge_requests?milestone=release",
                    "GET /merge_requests?labels=bug,reproduced",
                    "GET /merge_requests?author_id=5",
                    "GET /merge_requests?my_reaction_emoji=star",
                    "GET /merge_requests?scope=assigned_to_me"
                ],
                "params": [
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Return all merge requests or just those that are opened, closed, locked, or merged\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return requests ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return requests sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "milestone",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests for a specific milestone. None returns merge requests with no milestone. Any returns merge requests that have an assigned milestone."
                    },
                    {
                        "attribute": "view",
                        "type": "string",
                        "required": "no",
                        "description": "If simple, returns the iid, URL, title, description, and basic state of merge request"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests matching a comma separated list of labels"
                    },
                    {
                        "attribute": "created_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests created on or after the given time"
                    },
                    {
                        "attribute": "created_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests created on or before the given time"
                    },
                    {
                        "attribute": "updated_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests updated on or after the given time"
                    },
                    {
                        "attribute": "updated_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests updated on or before the given time"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests for the given scope: created_by_me, assigned_to_me or all. Defaults to created_by_me For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead."
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Returns merge requests created by the given user id. Combine with scope=all or scope=assigned_to_me\n"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Returns merge requests assigned to the given user id. None returns unassigned merge requests. Any returns merge requests with an assignee."
                    },
                    {
                        "attribute": "my_reaction_emoji",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction. (Introduced in GitLab 10.0)\n"
                    },
                    {
                        "attribute": "source_branch",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests with the given source branch"
                    },
                    {
                        "attribute": "target_branch",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests with the given target branch"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search merge requests against their title and description\n"
                    },
                    {
                        "attribute": "wip",
                        "type": "string",
                        "required": "no",
                        "description": "Filter merge requests against their wip status. yes to return only WIP merge requests, no to return non WIP merge requests"
                    }
                ]
            },
            {
                "title": "list-project-merge-requests",
                "description": "Get all merge requests for this project.\nThe state parameter can be used to get only merge requests with a given state (opened, closed, locked, or merged) or all of them (all).\nThe pagination parameters page and per_page can be used to restrict the list of merge requests.",
                "api": [
                    "GET /projects/:id/merge_requests",
                    "GET /projects/:id/merge_requests?state=opened",
                    "GET /projects/:id/merge_requests?state=all",
                    "GET /projects/:id/merge_requests?iids[]=42&iids[]=43",
                    "GET /projects/:id/merge_requests?milestone=release",
                    "GET /projects/:id/merge_requests?labels=bug,reproduced",
                    "GET /projects/:id/merge_requests?my_reaction_emoji=star"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "no",
                        "description": "Return the request having the given iid\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Return all merge requests or just those that are opened, closed, locked, or merged\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return requests ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return requests sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "milestone",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests for a specific milestone. None returns merge requests with no milestone. Any returns merge requests that have an assigned milestone."
                    },
                    {
                        "attribute": "view",
                        "type": "string",
                        "required": "no",
                        "description": "If simple, returns the iid, URL, title, description, and basic state of merge request"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests matching a comma separated list of labels"
                    },
                    {
                        "attribute": "created_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests created on or after the given time"
                    },
                    {
                        "attribute": "created_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests created on or before the given time"
                    },
                    {
                        "attribute": "updated_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests updated on or after the given time"
                    },
                    {
                        "attribute": "updated_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests updated on or before the given time"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests for the given scope: created_by_me, assigned_to_me or all. For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. (Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)\n"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Returns merge requests created by the given user id (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Returns merge requests assigned to the given user id. None returns unassigned merge requests. Any returns merge requests with an assignee. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "my_reaction_emoji",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction. (Introduced in GitLab 10.0)\n"
                    },
                    {
                        "attribute": "source_branch",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests with the given source branch"
                    },
                    {
                        "attribute": "target_branch",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests with the given target branch"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search merge requests against their title and description\n"
                    }
                ]
            },
            {
                "title": "list-group-merge-requests",
                "description": "Get all merge requests for this group and its subgroups.\nThe state parameter can be used to get only merge requests with a given state (opened, closed, locked, or merged) or all of them (all).\nThe pagination parameters page and per_page can be used to restrict the list of merge requests.",
                "api": [
                    "GET /groups/:id/merge_requests",
                    "GET /groups/:id/merge_requests?state=opened",
                    "GET /groups/:id/merge_requests?state=all",
                    "GET /groups/:id/merge_requests?milestone=release",
                    "GET /groups/:id/merge_requests?labels=bug,reproduced",
                    "GET /groups/:id/merge_requests?my_reaction_emoji=star"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a group"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Return all merge requests or just those that are opened, closed, locked, or merged\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "milestone",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests for a specific milestone. None returns merge requests with no milestone. Any returns merge requests that have an assigned milestone."
                    },
                    {
                        "attribute": "view",
                        "type": "string",
                        "required": "no",
                        "description": "If simple, returns the iid, URL, title, description, and basic state of merge request"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests matching a comma separated list of labels"
                    },
                    {
                        "attribute": "created_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests created on or after the given time"
                    },
                    {
                        "attribute": "created_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests created on or before the given time"
                    },
                    {
                        "attribute": "updated_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests updated on or after the given time"
                    },
                    {
                        "attribute": "updated_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return merge requests updated on or before the given time"
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests for the given scope: created_by_me, assigned_to_me or all.\n"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Returns merge requests created by the given user id (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Returns merge requests assigned to the given user id. None returns unassigned merge requests. Any returns merge requests with an assignee. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "my_reaction_emoji",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction. (Introduced in GitLab 10.0)\n"
                    },
                    {
                        "attribute": "source_branch",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests with the given source branch"
                    },
                    {
                        "attribute": "target_branch",
                        "type": "string",
                        "required": "no",
                        "description": "Return merge requests with the given target branch"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search merge requests against their title and description\n"
                    }
                ]
            },
            {
                "title": "get-single-mr",
                "description": "Shows information about a single merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-single-mr-participants",
                "description": "Get a list of merge request participants.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/participants"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-single-mr-commits",
                "description": "Get a list of merge request commits.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/commits"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "get-single-mr-changes",
                "description": "Shows information about the merge request including its files and changes.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/changes"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "list-mr-pipelines",
                "description": "Get a list of merge request pipelines.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/pipelines"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": " The ID or URL"
                    }
                ]
            },
            {
                "title": "create-mr",
                "description": "Creates a new merge request.",
                "api": [
                    "POST /projects/:id/merge_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "source_branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The source branch"
                    },
                    {
                        "attribute": "target_branch",
                        "type": "string",
                        "required": "yes",
                        "description": "The target branch"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "yes",
                        "description": "Title of MR"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Assignee user ID"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Description of MR"
                    },
                    {
                        "attribute": "target_project_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The target project (numeric id)"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Labels for MR as a comma-separated list"
                    },
                    {
                        "attribute": "milestone_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The global ID of a milestone"
                    },
                    {
                        "attribute": "remove_source_branch",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag indicating if a merge request should remove the source branch when merging"
                    },
                    {
                        "attribute": "allow_collaboration",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow commits from members who can merge to the target branch"
                    },
                    {
                        "attribute": "allow_maintainer_to_push",
                        "type": "boolean",
                        "required": "no",
                        "description": "Deprecated, see allow_collaboration"
                    },
                    {
                        "attribute": "squash",
                        "type": "boolean",
                        "required": "no",
                        "description": "Squash commits into a single commit when merging"
                    }
                ]
            },
            {
                "title": "update-mr",
                "description": "Updates an existing merge request. You can change the target branch, title, or even close the MR.",
                "api": [
                    "PUT /projects/:id/merge_requests/:merge_request_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a merge request"
                    },
                    {
                        "attribute": "target_branch",
                        "type": "string",
                        "required": "no",
                        "description": "The target branch"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "no",
                        "description": "Title of MR"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The ID of the user to assign the merge request to. Set to 0 or provide an empty value to unassign all assignees."
                    },
                    {
                        "attribute": "milestone_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The global ID of a milestone to assign the merge request to. Set to 0 or provide an empty value to unassign a milestone."
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated label names for a merge request. Set to an empty string to unassign all labels."
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "Description of MR"
                    },
                    {
                        "attribute": "state_event",
                        "type": "string",
                        "required": "no",
                        "description": "New state (close/reopen)"
                    },
                    {
                        "attribute": "remove_source_branch",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag indicating if a merge request should remove the source branch when merging"
                    },
                    {
                        "attribute": "squash",
                        "type": "boolean",
                        "required": "no",
                        "description": "Squash commits into a single commit when merging"
                    },
                    {
                        "attribute": "discussion_locked",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag indicating if the merge request’s discussion is locked. If the discussion is locked only project members can add, edit or resolve comments."
                    },
                    {
                        "attribute": "allow_collaboration",
                        "type": "boolean",
                        "required": "no",
                        "description": "Allow commits from members who can merge to the target branch"
                    },
                    {
                        "attribute": "allow_maintainer_to_push",
                        "type": "boolean",
                        "required": "no",
                        "description": "Deprecated, see allow_collaboration"
                    }
                ]
            },
            {
                "title": "delete-a-merge-request",
                "description": "Only for admins and project owners. Soft deletes the merge request in question.",
                "api": [
                    "DELETE /projects/:id/merge_requests/:merge_request_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "accept-mr",
                "description": "Merge changes submitted with MR using this API.",
                "api": [
                    "PUT /projects/:id/merge_requests/:merge_request_iid/merge"
                ],
                "params": []
            },
            {
                "title": "cancel-merge-when-pipeline-succeeds",
                "description": "If you don’t have permissions to accept this merge request - you’ll get a 401",
                "api": [
                    "PUT /projects/:id/merge_requests/:merge_request_iid/cancel_merge_when_pipeline_succeeds"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "",
                        "required": "required",
                        "paramDescription": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "",
                        "required": "required",
                        "paramDescription": "Internal ID of MR"
                    }
                ]
            },
            {
                "title": "comments-on-merge-requests",
                "description": "Comments are done via the notes resource.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/closes_issues"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "list-issues-that-will-close-on-merge",
                "description": "Get all the issues that would be closed by merging the provided merge request.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/closes_issues"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "subscribe-to-a-merge-request",
                "description": "Subscribes the authenticated user to a merge request to receive notification. If the user is already subscribed to the merge request, the\nstatus code 304 is returned.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/subscribe"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "unsubscribe-from-a-merge-request",
                "description": "Unsubscribes the authenticated user from a merge request to not receive\nnotifications from that merge request. If the user is\nnot subscribed to the merge request, the status code 304 is returned.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/unsubscribe"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "create-a-todo",
                "description": "Manually creates a todo for the current user on a merge request.\nIf there already exists a todo for the user on that merge request,\nstatus code 304 is returned.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/todo"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "get-mr-diff-versions",
                "description": "Get a list of merge request diff versions.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/versions"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "String",
                        "required": "yes",
                        "description": "The ID of the project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "get-a-single-mr-diff-version",
                "description": "Get a single merge request diff version.",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/versions/:version_id"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "String",
                        "required": "yes",
                        "description": "The ID of the project"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    },
                    {
                        "attribute": "version_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the merge request diff version"
                    }
                ]
            },
            {
                "title": "set-a-time-estimate-for-a-merge-request",
                "description": "Sets an estimated time of work for this merge request.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/time_estimate"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    },
                    {
                        "attribute": "duration",
                        "type": "string",
                        "required": "yes",
                        "description": "The duration in human format. e.g: 3h30m"
                    }
                ]
            },
            {
                "title": "reset-the-time-estimate-for-a-merge-request",
                "description": "Resets the estimated time for this merge request to 0 seconds.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/reset_time_estimate"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s merge_request"
                    }
                ]
            },
            {
                "title": "add-spent-time-for-a-merge-request",
                "description": "Adds spent time for this merge request",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/add_spent_time"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    },
                    {
                        "attribute": "duration",
                        "type": "string",
                        "required": "yes",
                        "description": "The duration in human format. e.g: 3h30m"
                    }
                ]
            },
            {
                "title": "reset-spent-time-for-a-merge-request",
                "description": "Resets the total spent time for this merge request to 0 seconds.",
                "api": [
                    "POST /projects/:id/merge_requests/:merge_request_iid/reset_spent_time"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s merge_request"
                    }
                ]
            },
            {
                "title": "get-time-tracking-stats",
                "description": "Example response:",
                "api": [
                    "GET /projects/:id/merge_requests/:merge_request_iid/time_stats"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "merge_request_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of the merge request"
                    }
                ]
            },
            {
                "title": "approvals",
                "description": "For approvals, please see Merge Request Approvals",
                "api": [],
                "params": []
            }
        ]
    },
    {
        "url": "https://docs.gitlab.com/ee/api/issues.html",
        "urlPart": "issues.html",
        "allEntries": [
            {
                "title": "issues-api",
                "description": "Every API call to issues must be authenticated.",
                "api": [
                    "GET /issues",
                    "GET /issues?state=opened",
                    "GET /issues?state=closed",
                    "GET /issues?labels=foo",
                    "GET /issues?labels=foo,bar",
                    "GET /issues?labels=foo,bar&state=opened",
                    "GET /issues?milestone=1.0.0",
                    "GET /issues?milestone=1.0.0&state=opened",
                    "GET /issues?iids[]=42&iids[]=43",
                    "GET /issues?author_id=5",
                    "GET /issues?assignee_id=5",
                    "GET /issues?my_reaction_emoji=star"
                ],
                "params": []
            },
            {
                "title": "issues-pagination",
                "description": "By default, GET requests return 20 results at a time because the API results\nare paginated.",
                "api": [
                    "GET /issues",
                    "GET /issues?state=opened",
                    "GET /issues?state=closed",
                    "GET /issues?labels=foo",
                    "GET /issues?labels=foo,bar",
                    "GET /issues?labels=foo,bar&state=opened",
                    "GET /issues?milestone=1.0.0",
                    "GET /issues?milestone=1.0.0&state=opened",
                    "GET /issues?iids[]=42&iids[]=43",
                    "GET /issues?author_id=5",
                    "GET /issues?assignee_id=5",
                    "GET /issues?my_reaction_emoji=star"
                ],
                "params": [
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Return all issues or just those that are opened or closed\n"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated list of label names, issues must have all labels to be returned. No+Label lists all issues with no labels"
                    },
                    {
                        "attribute": "milestone",
                        "type": "string",
                        "required": "no",
                        "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone."
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues for the given scope: created_by_me, assigned_to_me or all. Defaults to created_by_me For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. (Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)\n"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues created by the given user id. Combine with scope=all or scope=assigned_to_me. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues assigned to the given user id. None returns unassigned issues. Any returns issues with an assignee. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "my_reaction_emoji",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction. (Introduced in GitLab 10.0)\n"
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned."
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "no",
                        "description": "Return only the issues having the given iid\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search issues against their title and description\n"
                    },
                    {
                        "attribute": "created_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or after the given time"
                    },
                    {
                        "attribute": "created_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or before the given time"
                    },
                    {
                        "attribute": "updated_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or after the given time"
                    },
                    {
                        "attribute": "updated_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or before the given time"
                    }
                ]
            },
            {
                "title": "list-issues",
                "description": "Get all issues the authenticated user has access to. By default it\nreturns only issues created by the current user. To get all issues,\nuse parameter scope=all.",
                "api": [
                    "GET /issues",
                    "GET /issues?state=opened",
                    "GET /issues?state=closed",
                    "GET /issues?labels=foo",
                    "GET /issues?labels=foo,bar",
                    "GET /issues?labels=foo,bar&state=opened",
                    "GET /issues?milestone=1.0.0",
                    "GET /issues?milestone=1.0.0&state=opened",
                    "GET /issues?iids[]=42&iids[]=43",
                    "GET /issues?author_id=5",
                    "GET /issues?assignee_id=5",
                    "GET /issues?my_reaction_emoji=star"
                ],
                "params": [
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Return all issues or just those that are opened or closed\n"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated list of label names, issues must have all labels to be returned. No+Label lists all issues with no labels"
                    },
                    {
                        "attribute": "milestone",
                        "type": "string",
                        "required": "no",
                        "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone."
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues for the given scope: created_by_me, assigned_to_me or all. Defaults to created_by_me For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. (Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)\n"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues created by the given user id. Combine with scope=all or scope=assigned_to_me. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues assigned to the given user id. None returns unassigned issues. Any returns issues with an assignee. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "my_reaction_emoji",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction. (Introduced in GitLab 10.0)\n"
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned."
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "no",
                        "description": "Return only the issues having the given iid\n"
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search issues against their title and description\n"
                    },
                    {
                        "attribute": "created_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or after the given time"
                    },
                    {
                        "attribute": "created_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or before the given time"
                    },
                    {
                        "attribute": "updated_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or after the given time"
                    },
                    {
                        "attribute": "updated_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or before the given time"
                    }
                ]
            },
            {
                "title": "list-group-issues",
                "description": "Get a list of a group’s issues.",
                "api": [
                    "GET /groups/:id/issues",
                    "GET /groups/:id/issues?state=opened",
                    "GET /groups/:id/issues?state=closed",
                    "GET /groups/:id/issues?labels=foo",
                    "GET /groups/:id/issues?labels=foo,bar",
                    "GET /groups/:id/issues?labels=foo,bar&state=opened",
                    "GET /groups/:id/issues?milestone=1.0.0",
                    "GET /groups/:id/issues?milestone=1.0.0&state=opened",
                    "GET /groups/:id/issues?iids[]=42&iids[]=43",
                    "GET /groups/:id/issues?search=issue+title+or+description",
                    "GET /groups/:id/issues?author_id=5",
                    "GET /groups/:id/issues?assignee_id=5",
                    "GET /groups/:id/issues?my_reaction_emoji=star"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the group owned by the authenticated user"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Return all issues or just those that are opened or closed\n"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated list of label names, issues must have all labels to be returned. No+Label lists all issues with no labels"
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "no",
                        "description": "Return only the issues having the given iid\n"
                    },
                    {
                        "attribute": "milestone",
                        "type": "string",
                        "required": "no",
                        "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone."
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues for the given scope: created_by_me, assigned_to_me or all. For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. (Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)\n"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues created by the given user id (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues assigned to the given user id. None returns unassigned issues. Any returns issues with an assignee. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "my_reaction_emoji",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction. (Introduced in GitLab 10.0)\n"
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned."
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search group issues against their title and description\n"
                    },
                    {
                        "attribute": "created_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or after the given time"
                    },
                    {
                        "attribute": "created_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or before the given time"
                    },
                    {
                        "attribute": "updated_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or after the given time"
                    },
                    {
                        "attribute": "updated_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or before the given time"
                    }
                ]
            },
            {
                "title": "list-project-issues",
                "description": "Get a list of a project’s issues.",
                "api": [
                    "GET /projects/:id/issues",
                    "GET /projects/:id/issues?state=opened",
                    "GET /projects/:id/issues?state=closed",
                    "GET /projects/:id/issues?labels=foo",
                    "GET /projects/:id/issues?labels=foo,bar",
                    "GET /projects/:id/issues?labels=foo,bar&state=opened",
                    "GET /projects/:id/issues?milestone=1.0.0",
                    "GET /projects/:id/issues?milestone=1.0.0&state=opened",
                    "GET /projects/:id/issues?iids[]=42&iids[]=43",
                    "GET /projects/:id/issues?search=issue+title+or+description",
                    "GET /projects/:id/issues?author_id=5",
                    "GET /projects/:id/issues?assignee_id=5",
                    "GET /projects/:id/issues?my_reaction_emoji=star"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "iids[]",
                        "type": "Array[integer]",
                        "required": "no",
                        "description": "Return only the milestone having the given iid\n"
                    },
                    {
                        "attribute": "state",
                        "type": "string",
                        "required": "no",
                        "description": "Return all issues or just those that are opened or closed\n"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated list of label names, issues must have all labels to be returned. No+Label lists all issues with no labels"
                    },
                    {
                        "attribute": "milestone",
                        "type": "string",
                        "required": "no",
                        "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone."
                    },
                    {
                        "attribute": "scope",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues for the given scope: created_by_me, assigned_to_me or all. For versions before 11.0, use the now deprecated created-by-me or assigned-to-me scopes instead. (Introduced in GitLab 9.5. Changed to snake_case in GitLab 11.0)\n"
                    },
                    {
                        "attribute": "author_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues created by the given user id (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "assignee_id",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues assigned to the given user id. None returns unassigned issues. Any returns issues with an assignee. (Introduced in GitLab 9.5)\n"
                    },
                    {
                        "attribute": "my_reaction_emoji",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction. (Introduced in GitLab 10.0)\n"
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned."
                    },
                    {
                        "attribute": "order_by",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues ordered by created_at or updated_at fields. Default is created_at\n"
                    },
                    {
                        "attribute": "sort",
                        "type": "string",
                        "required": "no",
                        "description": "Return issues sorted in asc or desc order. Default is desc\n"
                    },
                    {
                        "attribute": "search",
                        "type": "string",
                        "required": "no",
                        "description": "Search project issues against their title and description\n"
                    },
                    {
                        "attribute": "created_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or after the given time"
                    },
                    {
                        "attribute": "created_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues created on or before the given time"
                    },
                    {
                        "attribute": "updated_after",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or after the given time"
                    },
                    {
                        "attribute": "updated_before",
                        "type": "datetime",
                        "required": "no",
                        "description": "Return issues updated on or before the given time"
                    }
                ]
            },
            {
                "title": "single-issue",
                "description": "Get a single project issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "new-issue",
                "description": "Creates a new project issue.",
                "api": [
                    "POST /projects/:id/issues"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "iid",
                        "type": "integer/string",
                        "required": "no",
                        "description": "The internal ID of the project’s issue (requires admin or project owner rights)"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "yes",
                        "description": "The title of an issue"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of an issue"
                    },
                    {
                        "attribute": "confidential",
                        "type": "boolean",
                        "required": "no",
                        "description": "Set an issue to be confidential. Default is false."
                    },
                    {
                        "attribute": "assignee_ids",
                        "type": "Array[integer]",
                        "required": "no",
                        "description": "The ID of a user to assign issue"
                    },
                    {
                        "attribute": "milestone_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The global ID of a milestone to assign issue"
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated label names for an issue"
                    },
                    {
                        "attribute": "created_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project/group owner rights)"
                    },
                    {
                        "attribute": "due_date",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string in the format YEAR-MONTH-DAY, e.g. 2016-03-11\n"
                    },
                    {
                        "attribute": "merge_request_to_resolve_discussions_of",
                        "type": "integer",
                        "required": "no",
                        "description": "The IID of a merge request in which to resolve all issues. This will fill the issue with a default description and mark all discussions as resolved. When passing a description or title, these values will take precedence over the default values."
                    },
                    {
                        "attribute": "discussion_to_resolve",
                        "type": "string",
                        "required": "no",
                        "description": "The ID of a discussion to resolve. This will fill in the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of."
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "The weight of the issue. Valid values are greater than or equal to 0."
                    }
                ]
            },
            {
                "title": "edit-issue",
                "description": "Updates an existing project issue. This call is also used to mark an issue as\nclosed.",
                "api": [
                    "PUT /projects/:id/issues/:issue_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    },
                    {
                        "attribute": "title",
                        "type": "string",
                        "required": "no",
                        "description": "The title of an issue"
                    },
                    {
                        "attribute": "description",
                        "type": "string",
                        "required": "no",
                        "description": "The description of an issue"
                    },
                    {
                        "attribute": "confidential",
                        "type": "boolean",
                        "required": "no",
                        "description": "Updates an issue to be confidential"
                    },
                    {
                        "attribute": "assignee_ids",
                        "type": "Array[integer]",
                        "required": "no",
                        "description": "The ID of the user(s) to assign the issue to. Set to 0 or provide an empty value to unassign all assignees."
                    },
                    {
                        "attribute": "milestone_id",
                        "type": "integer",
                        "required": "no",
                        "description": "The global ID of a milestone to assign the issue to. Set to 0 or provide an empty value to unassign a milestone."
                    },
                    {
                        "attribute": "labels",
                        "type": "string",
                        "required": "no",
                        "description": "Comma-separated label names for an issue. Set to an empty string to unassign all labels."
                    },
                    {
                        "attribute": "state_event",
                        "type": "string",
                        "required": "no",
                        "description": "The state event of an issue. Set close to close the issue and reopen to reopen it"
                    },
                    {
                        "attribute": "updated_at",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z (requires admin or project owner rights)"
                    },
                    {
                        "attribute": "due_date",
                        "type": "string",
                        "required": "no",
                        "description": "Date time string in the format YEAR-MONTH-DAY, e.g. 2016-03-11\n"
                    },
                    {
                        "attribute": "weight",
                        "type": "integer",
                        "required": "no",
                        "description": "The weight of the issue. Valid values are greater than or equal to 0. 0"
                    },
                    {
                        "attribute": "discussion_locked",
                        "type": "boolean",
                        "required": "no",
                        "description": "Flag indicating if the issue’s discussion is locked. If the discussion is locked only project members can add or edit comments."
                    }
                ]
            },
            {
                "title": "delete-an-issue",
                "description": "Only for admins and project owners. Soft deletes the issue in question.",
                "api": [
                    "DELETE /projects/:id/issues/:issue_iid"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "move-an-issue",
                "description": "Moves an issue to a different project. If the target project\nequals the source project or the user has insufficient permissions to move an\nissue, error 400 together with an explaining error message is returned.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/move"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    },
                    {
                        "attribute": "to_project_id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of the new project"
                    }
                ]
            },
            {
                "title": "subscribe-to-an-issue",
                "description": "Subscribes the authenticated user to an issue to receive notifications.\nIf the user is already subscribed to the issue, the status code 304\nis returned.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/subscribe"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "unsubscribe-from-an-issue",
                "description": "Unsubscribes the authenticated user from the issue to not receive notifications\nfrom it. If the user is not subscribed to the issue, the\nstatus code 304 is returned.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/unsubscribe"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "create-a-todo",
                "description": "Manually creates a todo for the current user on an issue. If\nthere already exists a todo for the user on that issue, status code 304 is\nreturned.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/todo"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "set-a-time-estimate-for-an-issue",
                "description": "Sets an estimated time of work for this issue.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/time_estimate"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    },
                    {
                        "attribute": "duration",
                        "type": "string",
                        "required": "yes",
                        "description": "The duration in human format. e.g: 3h30m"
                    }
                ]
            },
            {
                "title": "reset-the-time-estimate-for-an-issue",
                "description": "Resets the estimated time for this issue to 0 seconds.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/reset_time_estimate"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "add-spent-time-for-an-issue",
                "description": "Adds spent time for this issue",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/add_spent_time"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    },
                    {
                        "attribute": "duration",
                        "type": "string",
                        "required": "yes",
                        "description": "The duration in human format. e.g: 3h30m"
                    }
                ]
            },
            {
                "title": "reset-spent-time-for-an-issue",
                "description": "Resets the total spent time for this issue to 0 seconds.",
                "api": [
                    "POST /projects/:id/issues/:issue_iid/reset_spent_time"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "get-time-tracking-stats",
                "description": "Example response:",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/time_stats"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "list-merge-requests-related-to-issue",
                "description": "Get all the merge requests that are related to the issue.",
                "api": [
                    "GET /projects/:id/issues/:issue_id/related_merge_requests"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "list-merge-requests-that-will-close-issue-on-merge",
                "description": "Get all the merge requests that will close issue when merged.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/closed_by"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer",
                        "required": "yes",
                        "description": "The ID of a project"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project issue"
                    }
                ]
            },
            {
                "title": "participants-on-issues",
                "description": "Example response:",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/participants"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "comments-on-issues",
                "description": "Comments are done via the notes resource.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/user_agent_detail"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            },
            {
                "title": "get-user-agent-details",
                "description": "Available only for admins.",
                "api": [
                    "GET /projects/:id/issues/:issue_iid/user_agent_detail"
                ],
                "params": [
                    {
                        "attribute": "id",
                        "type": "integer/string",
                        "required": "yes",
                        "description": "The ID or URL-encoded path of the project owned by the authenticated user"
                    },
                    {
                        "attribute": "issue_iid",
                        "type": "integer",
                        "required": "yes",
                        "description": "The internal ID of a project’s issue"
                    }
                ]
            }
        ]
    }
]